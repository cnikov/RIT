{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nexport var EditorContextKeys;\n(function (EditorContextKeys) {\n  EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false, true);\n  /**\n   * A context key that is set when the editor's text has focus (cursor is blinking).\n   * Is false when focus is in simple editor widgets (repl input, scm commit input).\n   */\n  EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n  /**\n   * A context key that is set when the editor's text or an editor's widget has focus.\n   */\n  EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n  /**\n   * A context key that is set when any editor input has focus (regular editor, repl input...).\n   */\n  EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n  EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read-only\"));\n  EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n  EditorContextKeys.isEmbeddedDiffEditor = new RawContextKey('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', \"Whether the context is an embedded diff editor\"));\n  EditorContextKeys.comparingMovedCode = new RawContextKey('comparingMovedCode', false, nls.localize('comparingMovedCode', \"Whether a moved code block is selected for comparison\"));\n  EditorContextKeys.accessibleDiffViewerVisible = new RawContextKey('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', \"Whether the accessible diff viewer is visible\"));\n  EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', \"Whether the diff editor render side by side inline breakpoint is reached\"));\n  EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n  EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n  EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n  EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n  EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n  EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n  EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n  EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n  EditorContextKeys.isInWalkThroughSnippet = new RawContextKey('isInEmbeddedEditor', false, true);\n  EditorContextKeys.canUndo = new RawContextKey('canUndo', false, true);\n  EditorContextKeys.canRedo = new RawContextKey('canRedo', false, true);\n  EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n  EditorContextKeys.hoverFocused = new RawContextKey('editorHoverFocused', false, nls.localize('editorHoverFocused', \"Whether the editor hover is focused\"));\n  EditorContextKeys.stickyScrollFocused = new RawContextKey('stickyScrollFocused', false, nls.localize('stickyScrollFocused', \"Whether the sticky scroll is focused\"));\n  EditorContextKeys.stickyScrollVisible = new RawContextKey('stickyScrollVisible', false, nls.localize('stickyScrollVisible', \"Whether the sticky scroll is visible\"));\n  EditorContextKeys.standaloneColorPickerVisible = new RawContextKey('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', \"Whether the standalone color picker is visible\"));\n  EditorContextKeys.standaloneColorPickerFocused = new RawContextKey('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', \"Whether the standalone color picker is focused\"));\n  /**\n   * A context key that is set when an editor is part of a larger editor, like notebooks or\n   * (future) a diff editor\n   */\n  EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n  EditorContextKeys.notInCompositeEditor = EditorContextKeys.inCompositeEditor.toNegated();\n  // -- mode context keys\n  EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n  EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n  EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n  EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n  EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n  EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n  EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n  EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n  EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n  EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n  EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n  EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n  EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n  EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n  EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n  // -- mode context keys: formatting\n  EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n  EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n  EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n  EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n})(EditorContextKeys || (EditorContextKeys = {}));","map":{"version":3,"names":["nls","RawContextKey","EditorContextKeys","editorSimpleInput","editorTextFocus","localize","focus","textInputFocus","readOnly","inDiffEditor","isEmbeddedDiffEditor","comparingMovedCode","accessibleDiffViewerVisible","diffEditorRenderSideBySideInlineBreakpointReached","columnSelection","writable","toNegated","hasNonEmptySelection","hasOnlyEmptySelection","hasMultipleSelections","hasSingleSelection","tabMovesFocus","tabDoesNotMoveFocus","isInWalkThroughSnippet","canUndo","canRedo","hoverVisible","hoverFocused","stickyScrollFocused","stickyScrollVisible","standaloneColorPickerVisible","standaloneColorPickerFocused","inCompositeEditor","undefined","notInCompositeEditor","languageId","hasCompletionItemProvider","hasCodeActionsProvider","hasCodeLensProvider","hasDefinitionProvider","hasDeclarationProvider","hasImplementationProvider","hasTypeDefinitionProvider","hasHoverProvider","hasDocumentHighlightProvider","hasDocumentSymbolProvider","hasReferenceProvider","hasRenameProvider","hasSignatureHelpProvider","hasInlayHintsProvider","hasDocumentFormattingProvider","hasDocumentSelectionFormattingProvider","hasMultipleDocumentFormattingProvider","hasMultipleDocumentSelectionFormattingProvider"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\nexport var EditorContextKeys;\n(function (EditorContextKeys) {\n    EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false, true);\n    /**\n     * A context key that is set when the editor's text has focus (cursor is blinking).\n     * Is false when focus is in simple editor widgets (repl input, scm commit input).\n     */\n    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n    /**\n     * A context key that is set when the editor's text or an editor's widget has focus.\n     */\n    EditorContextKeys.focus = new RawContextKey('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n    /**\n     * A context key that is set when any editor input has focus (regular editor, repl input...).\n     */\n    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read-only\"));\n    EditorContextKeys.inDiffEditor = new RawContextKey('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n    EditorContextKeys.isEmbeddedDiffEditor = new RawContextKey('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', \"Whether the context is an embedded diff editor\"));\n    EditorContextKeys.comparingMovedCode = new RawContextKey('comparingMovedCode', false, nls.localize('comparingMovedCode', \"Whether a moved code block is selected for comparison\"));\n    EditorContextKeys.accessibleDiffViewerVisible = new RawContextKey('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', \"Whether the accessible diff viewer is visible\"));\n    EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', \"Whether the diff editor render side by side inline breakpoint is reached\"));\n    EditorContextKeys.columnSelection = new RawContextKey('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n    EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\n    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n    EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\n    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n    EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\n    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n    EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\n    EditorContextKeys.isInWalkThroughSnippet = new RawContextKey('isInEmbeddedEditor', false, true);\n    EditorContextKeys.canUndo = new RawContextKey('canUndo', false, true);\n    EditorContextKeys.canRedo = new RawContextKey('canRedo', false, true);\n    EditorContextKeys.hoverVisible = new RawContextKey('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n    EditorContextKeys.hoverFocused = new RawContextKey('editorHoverFocused', false, nls.localize('editorHoverFocused', \"Whether the editor hover is focused\"));\n    EditorContextKeys.stickyScrollFocused = new RawContextKey('stickyScrollFocused', false, nls.localize('stickyScrollFocused', \"Whether the sticky scroll is focused\"));\n    EditorContextKeys.stickyScrollVisible = new RawContextKey('stickyScrollVisible', false, nls.localize('stickyScrollVisible', \"Whether the sticky scroll is visible\"));\n    EditorContextKeys.standaloneColorPickerVisible = new RawContextKey('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', \"Whether the standalone color picker is visible\"));\n    EditorContextKeys.standaloneColorPickerFocused = new RawContextKey('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', \"Whether the standalone color picker is focused\"));\n    /**\n     * A context key that is set when an editor is part of a larger editor, like notebooks or\n     * (future) a diff editor\n     */\n    EditorContextKeys.inCompositeEditor = new RawContextKey('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n    EditorContextKeys.notInCompositeEditor = EditorContextKeys.inCompositeEditor.toNegated();\n    // -- mode context keys\n    EditorContextKeys.languageId = new RawContextKey('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n    EditorContextKeys.hasInlayHintsProvider = new RawContextKey('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n    // -- mode context keys: formatting\n    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n})(EditorContextKeys || (EditorContextKeys = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}