{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider, getOnTypeFormattingEdits } from './format.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nlet FormatOnType = class FormatOnType {\n  constructor(_editor, _languageFeaturesService, _workerService) {\n    this._editor = _editor;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._workerService = _workerService;\n    this._disposables = new DisposableStore();\n    this._sessionDisposables = new DisposableStore();\n    this._disposables.add(_languageFeaturesService.onTypeFormattingEditProvider.onDidChange(this._update, this));\n    this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n    this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n    this._disposables.add(_editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(56 /* EditorOption.formatOnType */)) {\n        this._update();\n      }\n    }));\n    this._update();\n  }\n  dispose() {\n    this._disposables.dispose();\n    this._sessionDisposables.dispose();\n  }\n  _update() {\n    // clean up\n    this._sessionDisposables.clear();\n    // we are disabled\n    if (!this._editor.getOption(56 /* EditorOption.formatOnType */)) {\n      return;\n    }\n    // no model\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    // no support\n    const [support] = this._languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n    if (!support || !support.autoFormatTriggerCharacters) {\n      return;\n    }\n    // register typing listeners that will trigger the format\n    const triggerChars = new CharacterSet();\n    for (const ch of support.autoFormatTriggerCharacters) {\n      triggerChars.add(ch.charCodeAt(0));\n    }\n    this._sessionDisposables.add(this._editor.onDidType(text => {\n      const lastCharCode = text.charCodeAt(text.length - 1);\n      if (triggerChars.has(lastCharCode)) {\n        this._trigger(String.fromCharCode(lastCharCode));\n      }\n    }));\n  }\n  _trigger(ch) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    if (this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) {\n      return;\n    }\n    const model = this._editor.getModel();\n    const position = this._editor.getPosition();\n    const cts = new CancellationTokenSource();\n    // install a listener that checks if edits happens before the\n    // position on which we format right now. If so, we won't\n    // apply the format edits\n    const unbind = this._editor.onDidChangeModelContent(e => {\n      if (e.isFlush) {\n        // a model.setValue() was called\n        // cancel only once\n        cts.cancel();\n        unbind.dispose();\n        return;\n      }\n      for (let i = 0, len = e.changes.length; i < len; i++) {\n        const change = e.changes[i];\n        if (change.range.endLineNumber <= position.lineNumber) {\n          // cancel only once\n          cts.cancel();\n          unbind.dispose();\n          return;\n        }\n      }\n    });\n    getOnTypeFormattingEdits(this._workerService, this._languageFeaturesService, model, position, ch, model.getFormattingOptions(), cts.token).then(edits => {\n      if (cts.token.isCancellationRequested) {\n        return;\n      }\n      if (isNonEmptyArray(edits)) {\n        FormattingEdit.execute(this._editor, edits, true);\n        alertFormattingEdits(edits);\n      }\n    }).finally(() => {\n      unbind.dispose();\n    });\n  }\n};\nFormatOnType.ID = 'editor.contrib.autoFormat';\nFormatOnType = __decorate([__param(1, ILanguageFeaturesService), __param(2, IEditorWorkerService)], FormatOnType);\nexport { FormatOnType };\nlet FormatOnPaste = class FormatOnPaste {\n  constructor(editor, _languageFeaturesService, _instantiationService) {\n    this.editor = editor;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._instantiationService = _instantiationService;\n    this._callOnDispose = new DisposableStore();\n    this._callOnModel = new DisposableStore();\n    this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n    this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n    this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n    this._callOnDispose.add(_languageFeaturesService.documentRangeFormattingEditProvider.onDidChange(this._update, this));\n  }\n  dispose() {\n    this._callOnDispose.dispose();\n    this._callOnModel.dispose();\n  }\n  _update() {\n    // clean up\n    this._callOnModel.clear();\n    // we are disabled\n    if (!this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n      return;\n    }\n    // no model\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    // no formatter\n    if (!this._languageFeaturesService.documentRangeFormattingEditProvider.has(this.editor.getModel())) {\n      return;\n    }\n    this._callOnModel.add(this.editor.onDidPaste(({\n      range\n    }) => this._trigger(range)));\n  }\n  _trigger(range) {\n    if (!this.editor.hasModel()) {\n      return;\n    }\n    if (this.editor.getSelections().length > 1) {\n      return;\n    }\n    this._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, 2 /* FormattingMode.Silent */, Progress.None, CancellationToken.None).catch(onUnexpectedError);\n  }\n};\nFormatOnPaste.ID = 'editor.contrib.formatOnPaste';\nFormatOnPaste = __decorate([__param(1, ILanguageFeaturesService), __param(2, IInstantiationService)], FormatOnPaste);\nclass FormatDocumentAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.formatDocument',\n      label: nls.localize('formatDocument.label', \"Format Document\"),\n      alias: 'Format Document',\n      precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 36 /* KeyCode.KeyF */,\n        linux: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 39 /* KeyCode.KeyI */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 1.3\n      }\n    });\n  }\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (editor.hasModel()) {\n        const instaService = accessor.get(IInstantiationService);\n        const progressService = accessor.get(IEditorProgressService);\n        yield progressService.showWhile(instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1 /* FormattingMode.Explicit */, Progress.None, CancellationToken.None), 250);\n      }\n    });\n  }\n}\nclass FormatSelectionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.formatSelection',\n      label: nls.localize('formatSelection.label', \"Format Selection\"),\n      alias: 'Format Selection',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 36 /* KeyCode.KeyF */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n\n      contextMenuOpts: {\n        when: EditorContextKeys.hasNonEmptySelection,\n        group: '1_modification',\n        order: 1.31\n      }\n    });\n  }\n  run(accessor, editor) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!editor.hasModel()) {\n        return;\n      }\n      const instaService = accessor.get(IInstantiationService);\n      const model = editor.getModel();\n      const ranges = editor.getSelections().map(range => {\n        return range.isEmpty() ? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber)) : range;\n      });\n      const progressService = accessor.get(IEditorProgressService);\n      yield progressService.showWhile(instaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, 1 /* FormattingMode.Explicit */, Progress.None, CancellationToken.None), 250);\n    });\n  }\n}\nregisterEditorContribution(FormatOnType.ID, FormatOnType, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction);\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\nCommandsRegistry.registerCommand('editor.action.format', accessor => __awaiter(void 0, void 0, void 0, function* () {\n  const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n  if (!editor || !editor.hasModel()) {\n    return;\n  }\n  const commandService = accessor.get(ICommandService);\n  if (editor.getSelection().isEmpty()) {\n    yield commandService.executeCommand('editor.action.formatDocument');\n  } else {\n    yield commandService.executeCommand('editor.action.formatSelection');\n  }\n}));","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isNonEmptyArray","CancellationToken","CancellationTokenSource","onUnexpectedError","KeyChord","DisposableStore","EditorAction","registerEditorAction","registerEditorContribution","ICodeEditorService","CharacterSet","Range","EditorContextKeys","IEditorWorkerService","ILanguageFeaturesService","alertFormattingEdits","formatDocumentRangesWithSelectedProvider","formatDocumentWithSelectedProvider","getOnTypeFormattingEdits","FormattingEdit","nls","CommandsRegistry","ICommandService","ContextKeyExpr","IInstantiationService","IEditorProgressService","Progress","FormatOnType","constructor","_editor","_languageFeaturesService","_workerService","_disposables","_sessionDisposables","add","onTypeFormattingEditProvider","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","hasChanged","dispose","clear","getOption","hasModel","model","getModel","support","ordered","autoFormatTriggerCharacters","triggerChars","ch","charCodeAt","onDidType","text","lastCharCode","has","_trigger","String","fromCharCode","getSelections","getSelection","isEmpty","position","getPosition","cts","unbind","onDidChangeModelContent","isFlush","cancel","len","changes","change","range","endLineNumber","lineNumber","getFormattingOptions","token","edits","isCancellationRequested","execute","finally","ID","FormatOnPaste","editor","_instantiationService","_callOnDispose","_callOnModel","documentRangeFormattingEditProvider","onDidPaste","invokeFunction","None","catch","FormatDocumentAction","id","label","localize","alias","precondition","and","notInCompositeEditor","writable","hasDocumentFormattingProvider","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","contextMenuOpts","group","order","run","accessor","instaService","get","progressService","showWhile","FormatSelectionAction","hasDocumentSelectionFormattingProvider","when","hasNonEmptySelection","ranges","map","startLineNumber","getLineMaxColumn","registerCommand","getFocusedCodeEditor","commandService","executeCommand"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/formatActions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { CharacterSet } from '../../../common/core/characterClassifier.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { alertFormattingEdits, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider, getOnTypeFormattingEdits } from './format.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nlet FormatOnType = class FormatOnType {\n    constructor(_editor, _languageFeaturesService, _workerService) {\n        this._editor = _editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._workerService = _workerService;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._disposables.add(_languageFeaturesService.onTypeFormattingEditProvider.onDidChange(this._update, this));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(56 /* EditorOption.formatOnType */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        this._disposables.dispose();\n        this._sessionDisposables.dispose();\n    }\n    _update() {\n        // clean up\n        this._sessionDisposables.clear();\n        // we are disabled\n        if (!this._editor.getOption(56 /* EditorOption.formatOnType */)) {\n            return;\n        }\n        // no model\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        // no support\n        const [support] = this._languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n        if (!support || !support.autoFormatTriggerCharacters) {\n            return;\n        }\n        // register typing listeners that will trigger the format\n        const triggerChars = new CharacterSet();\n        for (const ch of support.autoFormatTriggerCharacters) {\n            triggerChars.add(ch.charCodeAt(0));\n        }\n        this._sessionDisposables.add(this._editor.onDidType((text) => {\n            const lastCharCode = text.charCodeAt(text.length - 1);\n            if (triggerChars.has(lastCharCode)) {\n                this._trigger(String.fromCharCode(lastCharCode));\n            }\n        }));\n    }\n    _trigger(ch) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const position = this._editor.getPosition();\n        const cts = new CancellationTokenSource();\n        // install a listener that checks if edits happens before the\n        // position on which we format right now. If so, we won't\n        // apply the format edits\n        const unbind = this._editor.onDidChangeModelContent((e) => {\n            if (e.isFlush) {\n                // a model.setValue() was called\n                // cancel only once\n                cts.cancel();\n                unbind.dispose();\n                return;\n            }\n            for (let i = 0, len = e.changes.length; i < len; i++) {\n                const change = e.changes[i];\n                if (change.range.endLineNumber <= position.lineNumber) {\n                    // cancel only once\n                    cts.cancel();\n                    unbind.dispose();\n                    return;\n                }\n            }\n        });\n        getOnTypeFormattingEdits(this._workerService, this._languageFeaturesService, model, position, ch, model.getFormattingOptions(), cts.token).then(edits => {\n            if (cts.token.isCancellationRequested) {\n                return;\n            }\n            if (isNonEmptyArray(edits)) {\n                FormattingEdit.execute(this._editor, edits, true);\n                alertFormattingEdits(edits);\n            }\n        }).finally(() => {\n            unbind.dispose();\n        });\n    }\n};\nFormatOnType.ID = 'editor.contrib.autoFormat';\nFormatOnType = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, IEditorWorkerService)\n], FormatOnType);\nexport { FormatOnType };\nlet FormatOnPaste = class FormatOnPaste {\n    constructor(editor, _languageFeaturesService, _instantiationService) {\n        this.editor = editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._instantiationService = _instantiationService;\n        this._callOnDispose = new DisposableStore();\n        this._callOnModel = new DisposableStore();\n        this._callOnDispose.add(editor.onDidChangeConfiguration(() => this._update()));\n        this._callOnDispose.add(editor.onDidChangeModel(() => this._update()));\n        this._callOnDispose.add(editor.onDidChangeModelLanguage(() => this._update()));\n        this._callOnDispose.add(_languageFeaturesService.documentRangeFormattingEditProvider.onDidChange(this._update, this));\n    }\n    dispose() {\n        this._callOnDispose.dispose();\n        this._callOnModel.dispose();\n    }\n    _update() {\n        // clean up\n        this._callOnModel.clear();\n        // we are disabled\n        if (!this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        // no formatter\n        if (!this._languageFeaturesService.documentRangeFormattingEditProvider.has(this.editor.getModel())) {\n            return;\n        }\n        this._callOnModel.add(this.editor.onDidPaste(({ range }) => this._trigger(range)));\n    }\n    _trigger(range) {\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        if (this.editor.getSelections().length > 1) {\n            return;\n        }\n        this._instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, this.editor, range, 2 /* FormattingMode.Silent */, Progress.None, CancellationToken.None).catch(onUnexpectedError);\n    }\n};\nFormatOnPaste.ID = 'editor.contrib.formatOnPaste';\nFormatOnPaste = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, IInstantiationService)\n], FormatOnPaste);\nclass FormatDocumentAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.formatDocument',\n            label: nls.localize('formatDocument.label', \"Format Document\"),\n            alias: 'Format Document',\n            precondition: ContextKeyExpr.and(EditorContextKeys.notInCompositeEditor, EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 36 /* KeyCode.KeyF */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 39 /* KeyCode.KeyI */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 1.3\n            }\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (editor.hasModel()) {\n                const instaService = accessor.get(IInstantiationService);\n                const progressService = accessor.get(IEditorProgressService);\n                yield progressService.showWhile(instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1 /* FormattingMode.Explicit */, Progress.None, CancellationToken.None), 250);\n            }\n        });\n    }\n}\nclass FormatSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.formatSelection',\n            label: nls.localize('formatSelection.label', \"Format Selection\"),\n            alias: 'Format Selection',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 36 /* KeyCode.KeyF */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            contextMenuOpts: {\n                when: EditorContextKeys.hasNonEmptySelection,\n                group: '1_modification',\n                order: 1.31\n            }\n        });\n    }\n    run(accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const instaService = accessor.get(IInstantiationService);\n            const model = editor.getModel();\n            const ranges = editor.getSelections().map(range => {\n                return range.isEmpty()\n                    ? new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber))\n                    : range;\n            });\n            const progressService = accessor.get(IEditorProgressService);\n            yield progressService.showWhile(instaService.invokeFunction(formatDocumentRangesWithSelectedProvider, editor, ranges, 1 /* FormattingMode.Explicit */, Progress.None, CancellationToken.None), 250);\n        });\n    }\n}\nregisterEditorContribution(FormatOnType.ID, FormatOnType, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorContribution(FormatOnPaste.ID, FormatOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction);\n// this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\nCommandsRegistry.registerCommand('editor.action.format', (accessor) => __awaiter(void 0, void 0, void 0, function* () {\n    const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (!editor || !editor.hasModel()) {\n        return;\n    }\n    const commandService = accessor.get(ICommandService);\n    if (editor.getSelection().isEmpty()) {\n        yield commandService.executeCommand('editor.action.formatDocument');\n    }\n    else {\n        yield commandService.executeCommand('editor.action.formatSelection');\n    }\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}