{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nconst fallback = {\n  getInitialState: () => NullState,\n  tokenizeEncoded: (buffer, hasEOL, state) => nullTokenizeEncoded(0 /* LanguageId.Null */, state)\n};\nexport function tokenizeToString(languageService, text, languageId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!languageId) {\n      return _tokenizeToString(text, languageService.languageIdCodec, fallback);\n    }\n    const tokenizationSupport = yield TokenizationRegistry.getOrCreate(languageId);\n    return _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n  });\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n  let result = `<div>`;\n  let charIndex = startOffset;\n  let tabsCharDelta = 0;\n  let prevIsSpace = true;\n  for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n    const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n    if (tokenEndIndex <= startOffset) {\n      continue;\n    }\n    let partContent = '';\n    for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n      const charCode = text.charCodeAt(charIndex);\n      switch (charCode) {\n        case 9 /* CharCode.Tab */:\n          {\n            let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n            tabsCharDelta += insertSpacesCount - 1;\n            while (insertSpacesCount > 0) {\n              if (useNbsp && prevIsSpace) {\n                partContent += '&#160;';\n                prevIsSpace = false;\n              } else {\n                partContent += ' ';\n                prevIsSpace = true;\n              }\n              insertSpacesCount--;\n            }\n            break;\n          }\n        case 60 /* CharCode.LessThan */:\n          partContent += '&lt;';\n          prevIsSpace = false;\n          break;\n        case 62 /* CharCode.GreaterThan */:\n          partContent += '&gt;';\n          prevIsSpace = false;\n          break;\n        case 38 /* CharCode.Ampersand */:\n          partContent += '&amp;';\n          prevIsSpace = false;\n          break;\n        case 0 /* CharCode.Null */:\n          partContent += '&#00;';\n          prevIsSpace = false;\n          break;\n        case 65279 /* CharCode.UTF8_BOM */:\n        case 8232 /* CharCode.LINE_SEPARATOR */:\n        case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n        case 133 /* CharCode.NEXT_LINE */:\n          partContent += '\\ufffd';\n          prevIsSpace = false;\n          break;\n        case 13 /* CharCode.CarriageReturn */:\n          // zero width space, because carriage return would introduce a line break\n          partContent += '&#8203';\n          prevIsSpace = false;\n          break;\n        case 32 /* CharCode.Space */:\n          if (useNbsp && prevIsSpace) {\n            partContent += '&#160;';\n            prevIsSpace = false;\n          } else {\n            partContent += ' ';\n            prevIsSpace = true;\n          }\n          break;\n        default:\n          partContent += String.fromCharCode(charCode);\n          prevIsSpace = false;\n      }\n    }\n    result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n    if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n      break;\n    }\n  }\n  result += `</div>`;\n  return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n  let result = `<div class=\"monaco-tokenized-source\">`;\n  const lines = strings.splitLines(text);\n  let currentState = tokenizationSupport.getInitialState();\n  for (let i = 0, len = lines.length; i < len; i++) {\n    const line = lines[i];\n    if (i > 0) {\n      result += `<br/>`;\n    }\n    const tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n    LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n    const lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n    const viewLineTokens = lineTokens.inflate();\n    let startOffset = 0;\n    for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n      const type = viewLineTokens.getClassName(j);\n      const endIndex = viewLineTokens.getEndOffset(j);\n      result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n      startOffset = endIndex;\n    }\n    currentState = tokenizationResult.endState;\n  }\n  result += `</div>`;\n  return result;\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","strings","LineTokens","TokenizationRegistry","NullState","nullTokenizeEncoded","fallback","getInitialState","tokenizeEncoded","buffer","hasEOL","state","tokenizeToString","languageService","text","languageId","_tokenizeToString","languageIdCodec","tokenizationSupport","getOrCreate","tokenizeLineToHTML","viewLineTokens","colorMap","startOffset","endOffset","tabSize","useNbsp","charIndex","tabsCharDelta","prevIsSpace","tokenIndex","tokenCount","getCount","tokenEndIndex","getEndOffset","partContent","charCode","charCodeAt","insertSpacesCount","String","fromCharCode","getInlineStyle","lines","splitLines","currentState","i","len","length","line","tokenizationResult","convertToEndOffset","tokens","lineTokens","inflate","j","lenJ","type","getClassName","endIndex","escape","substring","endState"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/common/languages/textToHtmlTokenizer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nconst fallback = {\n    getInitialState: () => NullState,\n    tokenizeEncoded: (buffer, hasEOL, state) => nullTokenizeEncoded(0 /* LanguageId.Null */, state)\n};\nexport function tokenizeToString(languageService, text, languageId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!languageId) {\n            return _tokenizeToString(text, languageService.languageIdCodec, fallback);\n        }\n        const tokenizationSupport = yield TokenizationRegistry.getOrCreate(languageId);\n        return _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n    });\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n    let result = `<div>`;\n    let charIndex = startOffset;\n    let tabsCharDelta = 0;\n    let prevIsSpace = true;\n    for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n        const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n        if (tokenEndIndex <= startOffset) {\n            continue;\n        }\n        let partContent = '';\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n            const charCode = text.charCodeAt(charIndex);\n            switch (charCode) {\n                case 9 /* CharCode.Tab */: {\n                    let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    while (insertSpacesCount > 0) {\n                        if (useNbsp && prevIsSpace) {\n                            partContent += '&#160;';\n                            prevIsSpace = false;\n                        }\n                        else {\n                            partContent += ' ';\n                            prevIsSpace = true;\n                        }\n                        insertSpacesCount--;\n                    }\n                    break;\n                }\n                case 60 /* CharCode.LessThan */:\n                    partContent += '&lt;';\n                    prevIsSpace = false;\n                    break;\n                case 62 /* CharCode.GreaterThan */:\n                    partContent += '&gt;';\n                    prevIsSpace = false;\n                    break;\n                case 38 /* CharCode.Ampersand */:\n                    partContent += '&amp;';\n                    prevIsSpace = false;\n                    break;\n                case 0 /* CharCode.Null */:\n                    partContent += '&#00;';\n                    prevIsSpace = false;\n                    break;\n                case 65279 /* CharCode.UTF8_BOM */:\n                case 8232 /* CharCode.LINE_SEPARATOR */:\n                case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                case 133 /* CharCode.NEXT_LINE */:\n                    partContent += '\\ufffd';\n                    prevIsSpace = false;\n                    break;\n                case 13 /* CharCode.CarriageReturn */:\n                    // zero width space, because carriage return would introduce a line break\n                    partContent += '&#8203';\n                    prevIsSpace = false;\n                    break;\n                case 32 /* CharCode.Space */:\n                    if (useNbsp && prevIsSpace) {\n                        partContent += '&#160;';\n                        prevIsSpace = false;\n                    }\n                    else {\n                        partContent += ' ';\n                        prevIsSpace = true;\n                    }\n                    break;\n                default:\n                    partContent += String.fromCharCode(charCode);\n                    prevIsSpace = false;\n            }\n        }\n        result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n            break;\n        }\n    }\n    result += `</div>`;\n    return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n    let result = `<div class=\"monaco-tokenized-source\">`;\n    const lines = strings.splitLines(text);\n    let currentState = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        if (i > 0) {\n            result += `<br/>`;\n        }\n        const tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n        const viewLineTokens = lineTokens.inflate();\n        let startOffset = 0;\n        for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n            const type = viewLineTokens.getClassName(j);\n            const endIndex = viewLineTokens.getEndOffset(j);\n            result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n            startOffset = endIndex;\n        }\n        currentState = tokenizationResult.endState;\n    }\n    result += `</div>`;\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}