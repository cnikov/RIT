{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IModelService } from '../common/services/model.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuId, MenuRegistry, Action2 } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { assertType } from '../../base/common/types.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\nexport class Command {\n  constructor(opts) {\n    this.id = opts.id;\n    this.precondition = opts.precondition;\n    this._kbOpts = opts.kbOpts;\n    this._menuOpts = opts.menuOpts;\n    this._description = opts.description;\n  }\n  register() {\n    if (Array.isArray(this._menuOpts)) {\n      this._menuOpts.forEach(this._registerMenuItem, this);\n    } else if (this._menuOpts) {\n      this._registerMenuItem(this._menuOpts);\n    }\n    if (this._kbOpts) {\n      const kbOptsArr = Array.isArray(this._kbOpts) ? this._kbOpts : [this._kbOpts];\n      for (const kbOpts of kbOptsArr) {\n        let kbWhen = kbOpts.kbExpr;\n        if (this.precondition) {\n          if (kbWhen) {\n            kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n          } else {\n            kbWhen = this.precondition;\n          }\n        }\n        const desc = {\n          id: this.id,\n          weight: kbOpts.weight,\n          args: kbOpts.args,\n          when: kbWhen,\n          primary: kbOpts.primary,\n          secondary: kbOpts.secondary,\n          win: kbOpts.win,\n          linux: kbOpts.linux,\n          mac: kbOpts.mac\n        };\n        KeybindingsRegistry.registerKeybindingRule(desc);\n      }\n    }\n    CommandsRegistry.registerCommand({\n      id: this.id,\n      handler: (accessor, args) => this.runCommand(accessor, args),\n      description: this._description\n    });\n  }\n  _registerMenuItem(item) {\n    MenuRegistry.appendMenuItem(item.menuId, {\n      group: item.group,\n      command: {\n        id: this.id,\n        title: item.title,\n        icon: item.icon,\n        precondition: this.precondition\n      },\n      when: item.when,\n      order: item.order\n    });\n  }\n}\nexport class MultiCommand extends Command {\n  constructor() {\n    super(...arguments);\n    this._implementations = [];\n  }\n  /**\n   * A higher priority gets to be looked at first\n   */\n  addImplementation(priority, name, implementation, when) {\n    this._implementations.push({\n      priority,\n      name,\n      implementation,\n      when\n    });\n    this._implementations.sort((a, b) => b.priority - a.priority);\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._implementations.length; i++) {\n          if (this._implementations[i].implementation === implementation) {\n            this._implementations.splice(i, 1);\n            return;\n          }\n        }\n      }\n    };\n  }\n  runCommand(accessor, args) {\n    const logService = accessor.get(ILogService);\n    const contextKeyService = accessor.get(IContextKeyService);\n    logService.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);\n    for (const impl of this._implementations) {\n      if (impl.when) {\n        const context = contextKeyService.getContext(getActiveElement());\n        const value = impl.when.evaluate(context);\n        if (!value) {\n          continue;\n        }\n      }\n      const result = impl.implementation(accessor, args);\n      if (result) {\n        logService.trace(`Command '${this.id}' was handled by '${impl.name}'.`);\n        if (typeof result === 'boolean') {\n          return;\n        }\n        return result;\n      }\n    }\n    logService.trace(`The Command '${this.id}' was not handled by any implementation.`);\n  }\n}\n//#endregion\n/**\n * A command that delegates to another command's implementation.\n *\n * This lets different commands be registered but share the same implementation\n */\nexport class ProxyCommand extends Command {\n  constructor(command, opts) {\n    super(opts);\n    this.command = command;\n  }\n  runCommand(accessor, args) {\n    return this.command.runCommand(accessor, args);\n  }\n}\nexport class EditorCommand extends Command {\n  /**\n   * Create a command class that is bound to a certain editor contribution.\n   */\n  static bindToContribution(controllerGetter) {\n    return class EditorControllerCommandImpl extends EditorCommand {\n      constructor(opts) {\n        super(opts);\n        this._callback = opts.handler;\n      }\n      runEditorCommand(accessor, editor, args) {\n        const controller = controllerGetter(editor);\n        if (controller) {\n          this._callback(controller, args);\n        }\n      }\n    };\n  }\n  static runEditorCommand(accessor, args, precondition, runner) {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    // Find the editor with text focus or active\n    const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n    if (!editor) {\n      // well, at least we tried...\n      return;\n    }\n    return editor.invokeWithinContext(editorAccessor => {\n      const kbService = editorAccessor.get(IContextKeyService);\n      if (!kbService.contextMatchesRules(precondition !== null && precondition !== void 0 ? precondition : undefined)) {\n        // precondition does not hold\n        return;\n      }\n      return runner(editorAccessor, editor, args);\n    });\n  }\n  runCommand(accessor, args) {\n    return EditorCommand.runEditorCommand(accessor, args, this.precondition, (accessor, editor, args) => this.runEditorCommand(accessor, editor, args));\n  }\n}\nexport class EditorAction extends EditorCommand {\n  static convertOptions(opts) {\n    let menuOpts;\n    if (Array.isArray(opts.menuOpts)) {\n      menuOpts = opts.menuOpts;\n    } else if (opts.menuOpts) {\n      menuOpts = [opts.menuOpts];\n    } else {\n      menuOpts = [];\n    }\n    function withDefaults(item) {\n      if (!item.menuId) {\n        item.menuId = MenuId.EditorContext;\n      }\n      if (!item.title) {\n        item.title = opts.label;\n      }\n      item.when = ContextKeyExpr.and(opts.precondition, item.when);\n      return item;\n    }\n    if (Array.isArray(opts.contextMenuOpts)) {\n      menuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n    } else if (opts.contextMenuOpts) {\n      menuOpts.push(withDefaults(opts.contextMenuOpts));\n    }\n    opts.menuOpts = menuOpts;\n    return opts;\n  }\n  constructor(opts) {\n    super(EditorAction.convertOptions(opts));\n    this.label = opts.label;\n    this.alias = opts.alias;\n  }\n  runEditorCommand(accessor, editor, args) {\n    this.reportTelemetry(accessor, editor);\n    return this.run(accessor, editor, args || {});\n  }\n  reportTelemetry(accessor, editor) {\n    accessor.get(ITelemetryService).publicLog2('editorActionInvoked', {\n      name: this.label,\n      id: this.id\n    });\n  }\n}\nexport class MultiEditorAction extends EditorAction {\n  constructor() {\n    super(...arguments);\n    this._implementations = [];\n  }\n  /**\n   * A higher priority gets to be looked at first\n   */\n  addImplementation(priority, implementation) {\n    this._implementations.push([priority, implementation]);\n    this._implementations.sort((a, b) => b[0] - a[0]);\n    return {\n      dispose: () => {\n        for (let i = 0; i < this._implementations.length; i++) {\n          if (this._implementations[i][1] === implementation) {\n            this._implementations.splice(i, 1);\n            return;\n          }\n        }\n      }\n    };\n  }\n  run(accessor, editor, args) {\n    for (const impl of this._implementations) {\n      const result = impl[1](accessor, editor, args);\n      if (result) {\n        if (typeof result === 'boolean') {\n          return;\n        }\n        return result;\n      }\n    }\n  }\n}\n//#endregion EditorAction\n//#region EditorAction2\nexport class EditorAction2 extends Action2 {\n  run(accessor, ...args) {\n    // Find the editor with text focus or active\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n    if (!editor) {\n      // well, at least we tried...\n      return;\n    }\n    // precondition does hold\n    return editor.invokeWithinContext(editorAccessor => {\n      var _a, _b;\n      const kbService = editorAccessor.get(IContextKeyService);\n      const logService = editorAccessor.get(ILogService);\n      const enabled = kbService.contextMatchesRules((_a = this.desc.precondition) !== null && _a !== void 0 ? _a : undefined);\n      if (!enabled) {\n        logService.debug(`[EditorAction2] NOT running command because its precondition is FALSE`, this.desc.id, (_b = this.desc.precondition) === null || _b === void 0 ? void 0 : _b.serialize());\n        return;\n      }\n      return this.runEditorCommand(editorAccessor, editor, ...args);\n    });\n  }\n}\n//#endregion\n// --- Registration of commands and actions\nexport function registerModelAndPositionCommand(id, handler) {\n  CommandsRegistry.registerCommand(id, function (accessor, ...args) {\n    const instaService = accessor.get(IInstantiationService);\n    const [resource, position] = args;\n    assertType(URI.isUri(resource));\n    assertType(Position.isIPosition(position));\n    const model = accessor.get(IModelService).getModel(resource);\n    if (model) {\n      const editorPosition = Position.lift(position);\n      return instaService.invokeFunction(handler, model, editorPosition, ...args.slice(2));\n    }\n    return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n      return new Promise((resolve, reject) => {\n        try {\n          const result = instaService.invokeFunction(handler, reference.object.textEditorModel, Position.lift(position), args.slice(2));\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      }).finally(() => {\n        reference.dispose();\n      });\n    });\n  });\n}\nexport function registerEditorCommand(editorCommand) {\n  EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n  return editorCommand;\n}\nexport function registerEditorAction(ctor) {\n  const action = new ctor();\n  EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n  return action;\n}\nexport function registerMultiEditorAction(action) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n  return action;\n}\nexport function registerInstantiatedEditorAction(editorAction) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\n/**\n * Registers an editor contribution. Editor contributions have a lifecycle which is bound\n * to a specific code editor instance.\n */\nexport function registerEditorContribution(id, ctor, instantiation) {\n  EditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor, instantiation);\n}\nexport var EditorExtensionsRegistry;\n(function (EditorExtensionsRegistry) {\n  function getEditorCommand(commandId) {\n    return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n  }\n  EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n  function getEditorActions() {\n    return EditorContributionRegistry.INSTANCE.getEditorActions();\n  }\n  EditorExtensionsRegistry.getEditorActions = getEditorActions;\n  function getEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions();\n  }\n  EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n  function getSomeEditorContributions(ids) {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\n  }\n  EditorExtensionsRegistry.getSomeEditorContributions = getSomeEditorContributions;\n  function getDiffEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n  }\n  EditorExtensionsRegistry.getDiffEditorContributions = getDiffEditorContributions;\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {}));\n// Editor extension points\nconst Extensions = {\n  EditorCommonContributions: 'editor.contributions'\n};\nclass EditorContributionRegistry {\n  constructor() {\n    this.editorContributions = [];\n    this.diffEditorContributions = [];\n    this.editorActions = [];\n    this.editorCommands = Object.create(null);\n  }\n  registerEditorContribution(id, ctor, instantiation) {\n    this.editorContributions.push({\n      id,\n      ctor: ctor,\n      instantiation\n    });\n  }\n  getEditorContributions() {\n    return this.editorContributions.slice(0);\n  }\n  getDiffEditorContributions() {\n    return this.diffEditorContributions.slice(0);\n  }\n  registerEditorAction(action) {\n    action.register();\n    this.editorActions.push(action);\n  }\n  getEditorActions() {\n    return this.editorActions;\n  }\n  registerEditorCommand(editorCommand) {\n    editorCommand.register();\n    this.editorCommands[editorCommand.id] = editorCommand;\n  }\n  getEditorCommand(commandId) {\n    return this.editorCommands[commandId] || null;\n  }\n}\nEditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport const UndoCommand = registerCommand(new MultiCommand({\n  id: 'undo',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0 /* KeybindingWeight.EditorCore */,\n    primary: 2048 /* KeyMod.CtrlCmd */ | 56 /* KeyCode.KeyZ */\n  },\n\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miUndo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Undo\"),\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('undo', \"Undo\"),\n    order: 1\n  }]\n}));\nregisterCommand(new ProxyCommand(UndoCommand, {\n  id: 'default:undo',\n  precondition: undefined\n}));\nexport const RedoCommand = registerCommand(new MultiCommand({\n  id: 'redo',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0 /* KeybindingWeight.EditorCore */,\n    primary: 2048 /* KeyMod.CtrlCmd */ | 55 /* KeyCode.KeyY */,\n    secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 56 /* KeyCode.KeyZ */],\n    mac: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 56 /* KeyCode.KeyZ */\n    }\n  },\n\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miRedo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Redo\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('redo', \"Redo\"),\n    order: 1\n  }]\n}));\nregisterCommand(new ProxyCommand(RedoCommand, {\n  id: 'default:redo',\n  precondition: undefined\n}));\nexport const SelectAllCommand = registerCommand(new MultiCommand({\n  id: 'editor.action.selectAll',\n  precondition: undefined,\n  kbOpts: {\n    weight: 0 /* KeybindingWeight.EditorCore */,\n    kbExpr: null,\n    primary: 2048 /* KeyMod.CtrlCmd */ | 31 /* KeyCode.KeyA */\n  },\n\n  menuOpts: [{\n    menuId: MenuId.MenubarSelectionMenu,\n    group: '1_basic',\n    title: nls.localize({\n      key: 'miSelectAll',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Select All\"),\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('selectAll', \"Select All\"),\n    order: 1\n  }]\n}));","map":{"version":3,"names":["nls","URI","ICodeEditorService","Position","IModelService","ITextModelService","MenuId","MenuRegistry","Action2","CommandsRegistry","ContextKeyExpr","IContextKeyService","IInstantiationService","KeybindingsRegistry","Registry","ITelemetryService","assertType","ILogService","getActiveElement","Command","constructor","opts","id","precondition","_kbOpts","kbOpts","_menuOpts","menuOpts","_description","description","register","Array","isArray","forEach","_registerMenuItem","kbOptsArr","kbWhen","kbExpr","and","desc","weight","args","when","primary","secondary","win","linux","mac","registerKeybindingRule","registerCommand","handler","accessor","runCommand","item","appendMenuItem","menuId","group","command","title","icon","order","MultiCommand","arguments","_implementations","addImplementation","priority","name","implementation","push","sort","a","b","dispose","i","length","splice","logService","get","contextKeyService","trace","impl","context","getContext","value","evaluate","result","ProxyCommand","EditorCommand","bindToContribution","controllerGetter","EditorControllerCommandImpl","_callback","runEditorCommand","editor","controller","runner","codeEditorService","getFocusedCodeEditor","getActiveCodeEditor","invokeWithinContext","editorAccessor","kbService","contextMatchesRules","undefined","EditorAction","convertOptions","withDefaults","EditorContext","label","contextMenuOpts","map","alias","reportTelemetry","run","publicLog2","MultiEditorAction","EditorAction2","_a","_b","enabled","debug","serialize","registerModelAndPositionCommand","instaService","resource","position","isUri","isIPosition","model","getModel","editorPosition","lift","invokeFunction","slice","createModelReference","then","reference","Promise","resolve","reject","object","textEditorModel","err","finally","registerEditorCommand","editorCommand","EditorContributionRegistry","INSTANCE","registerEditorAction","ctor","action","registerMultiEditorAction","registerInstantiatedEditorAction","editorAction","registerEditorContribution","instantiation","EditorExtensionsRegistry","getEditorCommand","commandId","getEditorActions","getEditorContributions","getSomeEditorContributions","ids","filter","c","indexOf","getDiffEditorContributions","Extensions","EditorCommonContributions","editorContributions","diffEditorContributions","editorActions","editorCommands","Object","create","add","UndoCommand","MenubarEditMenu","localize","key","comment","CommandPalette","RedoCommand","SelectAllCommand","MenubarSelectionMenu"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/browser/editorExtensions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IModelService } from '../common/services/model.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuId, MenuRegistry, Action2 } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { assertType } from '../../base/common/types.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\nexport class Command {\n    constructor(opts) {\n        this.id = opts.id;\n        this.precondition = opts.precondition;\n        this._kbOpts = opts.kbOpts;\n        this._menuOpts = opts.menuOpts;\n        this._description = opts.description;\n    }\n    register() {\n        if (Array.isArray(this._menuOpts)) {\n            this._menuOpts.forEach(this._registerMenuItem, this);\n        }\n        else if (this._menuOpts) {\n            this._registerMenuItem(this._menuOpts);\n        }\n        if (this._kbOpts) {\n            const kbOptsArr = Array.isArray(this._kbOpts) ? this._kbOpts : [this._kbOpts];\n            for (const kbOpts of kbOptsArr) {\n                let kbWhen = kbOpts.kbExpr;\n                if (this.precondition) {\n                    if (kbWhen) {\n                        kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n                    }\n                    else {\n                        kbWhen = this.precondition;\n                    }\n                }\n                const desc = {\n                    id: this.id,\n                    weight: kbOpts.weight,\n                    args: kbOpts.args,\n                    when: kbWhen,\n                    primary: kbOpts.primary,\n                    secondary: kbOpts.secondary,\n                    win: kbOpts.win,\n                    linux: kbOpts.linux,\n                    mac: kbOpts.mac,\n                };\n                KeybindingsRegistry.registerKeybindingRule(desc);\n            }\n        }\n        CommandsRegistry.registerCommand({\n            id: this.id,\n            handler: (accessor, args) => this.runCommand(accessor, args),\n            description: this._description\n        });\n    }\n    _registerMenuItem(item) {\n        MenuRegistry.appendMenuItem(item.menuId, {\n            group: item.group,\n            command: {\n                id: this.id,\n                title: item.title,\n                icon: item.icon,\n                precondition: this.precondition\n            },\n            when: item.when,\n            order: item.order\n        });\n    }\n}\nexport class MultiCommand extends Command {\n    constructor() {\n        super(...arguments);\n        this._implementations = [];\n    }\n    /**\n     * A higher priority gets to be looked at first\n     */\n    addImplementation(priority, name, implementation, when) {\n        this._implementations.push({ priority, name, implementation, when });\n        this._implementations.sort((a, b) => b.priority - a.priority);\n        return {\n            dispose: () => {\n                for (let i = 0; i < this._implementations.length; i++) {\n                    if (this._implementations[i].implementation === implementation) {\n                        this._implementations.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    runCommand(accessor, args) {\n        const logService = accessor.get(ILogService);\n        const contextKeyService = accessor.get(IContextKeyService);\n        logService.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);\n        for (const impl of this._implementations) {\n            if (impl.when) {\n                const context = contextKeyService.getContext(getActiveElement());\n                const value = impl.when.evaluate(context);\n                if (!value) {\n                    continue;\n                }\n            }\n            const result = impl.implementation(accessor, args);\n            if (result) {\n                logService.trace(`Command '${this.id}' was handled by '${impl.name}'.`);\n                if (typeof result === 'boolean') {\n                    return;\n                }\n                return result;\n            }\n        }\n        logService.trace(`The Command '${this.id}' was not handled by any implementation.`);\n    }\n}\n//#endregion\n/**\n * A command that delegates to another command's implementation.\n *\n * This lets different commands be registered but share the same implementation\n */\nexport class ProxyCommand extends Command {\n    constructor(command, opts) {\n        super(opts);\n        this.command = command;\n    }\n    runCommand(accessor, args) {\n        return this.command.runCommand(accessor, args);\n    }\n}\nexport class EditorCommand extends Command {\n    /**\n     * Create a command class that is bound to a certain editor contribution.\n     */\n    static bindToContribution(controllerGetter) {\n        return class EditorControllerCommandImpl extends EditorCommand {\n            constructor(opts) {\n                super(opts);\n                this._callback = opts.handler;\n            }\n            runEditorCommand(accessor, editor, args) {\n                const controller = controllerGetter(editor);\n                if (controller) {\n                    this._callback(controller, args);\n                }\n            }\n        };\n    }\n    static runEditorCommand(accessor, args, precondition, runner) {\n        const codeEditorService = accessor.get(ICodeEditorService);\n        // Find the editor with text focus or active\n        const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n        if (!editor) {\n            // well, at least we tried...\n            return;\n        }\n        return editor.invokeWithinContext((editorAccessor) => {\n            const kbService = editorAccessor.get(IContextKeyService);\n            if (!kbService.contextMatchesRules(precondition !== null && precondition !== void 0 ? precondition : undefined)) {\n                // precondition does not hold\n                return;\n            }\n            return runner(editorAccessor, editor, args);\n        });\n    }\n    runCommand(accessor, args) {\n        return EditorCommand.runEditorCommand(accessor, args, this.precondition, (accessor, editor, args) => this.runEditorCommand(accessor, editor, args));\n    }\n}\nexport class EditorAction extends EditorCommand {\n    static convertOptions(opts) {\n        let menuOpts;\n        if (Array.isArray(opts.menuOpts)) {\n            menuOpts = opts.menuOpts;\n        }\n        else if (opts.menuOpts) {\n            menuOpts = [opts.menuOpts];\n        }\n        else {\n            menuOpts = [];\n        }\n        function withDefaults(item) {\n            if (!item.menuId) {\n                item.menuId = MenuId.EditorContext;\n            }\n            if (!item.title) {\n                item.title = opts.label;\n            }\n            item.when = ContextKeyExpr.and(opts.precondition, item.when);\n            return item;\n        }\n        if (Array.isArray(opts.contextMenuOpts)) {\n            menuOpts.push(...opts.contextMenuOpts.map(withDefaults));\n        }\n        else if (opts.contextMenuOpts) {\n            menuOpts.push(withDefaults(opts.contextMenuOpts));\n        }\n        opts.menuOpts = menuOpts;\n        return opts;\n    }\n    constructor(opts) {\n        super(EditorAction.convertOptions(opts));\n        this.label = opts.label;\n        this.alias = opts.alias;\n    }\n    runEditorCommand(accessor, editor, args) {\n        this.reportTelemetry(accessor, editor);\n        return this.run(accessor, editor, args || {});\n    }\n    reportTelemetry(accessor, editor) {\n        accessor.get(ITelemetryService).publicLog2('editorActionInvoked', { name: this.label, id: this.id });\n    }\n}\nexport class MultiEditorAction extends EditorAction {\n    constructor() {\n        super(...arguments);\n        this._implementations = [];\n    }\n    /**\n     * A higher priority gets to be looked at first\n     */\n    addImplementation(priority, implementation) {\n        this._implementations.push([priority, implementation]);\n        this._implementations.sort((a, b) => b[0] - a[0]);\n        return {\n            dispose: () => {\n                for (let i = 0; i < this._implementations.length; i++) {\n                    if (this._implementations[i][1] === implementation) {\n                        this._implementations.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    run(accessor, editor, args) {\n        for (const impl of this._implementations) {\n            const result = impl[1](accessor, editor, args);\n            if (result) {\n                if (typeof result === 'boolean') {\n                    return;\n                }\n                return result;\n            }\n        }\n    }\n}\n//#endregion EditorAction\n//#region EditorAction2\nexport class EditorAction2 extends Action2 {\n    run(accessor, ...args) {\n        // Find the editor with text focus or active\n        const codeEditorService = accessor.get(ICodeEditorService);\n        const editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n        if (!editor) {\n            // well, at least we tried...\n            return;\n        }\n        // precondition does hold\n        return editor.invokeWithinContext((editorAccessor) => {\n            var _a, _b;\n            const kbService = editorAccessor.get(IContextKeyService);\n            const logService = editorAccessor.get(ILogService);\n            const enabled = kbService.contextMatchesRules((_a = this.desc.precondition) !== null && _a !== void 0 ? _a : undefined);\n            if (!enabled) {\n                logService.debug(`[EditorAction2] NOT running command because its precondition is FALSE`, this.desc.id, (_b = this.desc.precondition) === null || _b === void 0 ? void 0 : _b.serialize());\n                return;\n            }\n            return this.runEditorCommand(editorAccessor, editor, ...args);\n        });\n    }\n}\n//#endregion\n// --- Registration of commands and actions\nexport function registerModelAndPositionCommand(id, handler) {\n    CommandsRegistry.registerCommand(id, function (accessor, ...args) {\n        const instaService = accessor.get(IInstantiationService);\n        const [resource, position] = args;\n        assertType(URI.isUri(resource));\n        assertType(Position.isIPosition(position));\n        const model = accessor.get(IModelService).getModel(resource);\n        if (model) {\n            const editorPosition = Position.lift(position);\n            return instaService.invokeFunction(handler, model, editorPosition, ...args.slice(2));\n        }\n        return accessor.get(ITextModelService).createModelReference(resource).then(reference => {\n            return new Promise((resolve, reject) => {\n                try {\n                    const result = instaService.invokeFunction(handler, reference.object.textEditorModel, Position.lift(position), args.slice(2));\n                    resolve(result);\n                }\n                catch (err) {\n                    reject(err);\n                }\n            }).finally(() => {\n                reference.dispose();\n            });\n        });\n    });\n}\nexport function registerEditorCommand(editorCommand) {\n    EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n    return editorCommand;\n}\nexport function registerEditorAction(ctor) {\n    const action = new ctor();\n    EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n    return action;\n}\nexport function registerMultiEditorAction(action) {\n    EditorContributionRegistry.INSTANCE.registerEditorAction(action);\n    return action;\n}\nexport function registerInstantiatedEditorAction(editorAction) {\n    EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\n/**\n * Registers an editor contribution. Editor contributions have a lifecycle which is bound\n * to a specific code editor instance.\n */\nexport function registerEditorContribution(id, ctor, instantiation) {\n    EditorContributionRegistry.INSTANCE.registerEditorContribution(id, ctor, instantiation);\n}\nexport var EditorExtensionsRegistry;\n(function (EditorExtensionsRegistry) {\n    function getEditorCommand(commandId) {\n        return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n    }\n    EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n    function getEditorActions() {\n        return EditorContributionRegistry.INSTANCE.getEditorActions();\n    }\n    EditorExtensionsRegistry.getEditorActions = getEditorActions;\n    function getEditorContributions() {\n        return EditorContributionRegistry.INSTANCE.getEditorContributions();\n    }\n    EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n    function getSomeEditorContributions(ids) {\n        return EditorContributionRegistry.INSTANCE.getEditorContributions().filter(c => ids.indexOf(c.id) >= 0);\n    }\n    EditorExtensionsRegistry.getSomeEditorContributions = getSomeEditorContributions;\n    function getDiffEditorContributions() {\n        return EditorContributionRegistry.INSTANCE.getDiffEditorContributions();\n    }\n    EditorExtensionsRegistry.getDiffEditorContributions = getDiffEditorContributions;\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {}));\n// Editor extension points\nconst Extensions = {\n    EditorCommonContributions: 'editor.contributions'\n};\nclass EditorContributionRegistry {\n    constructor() {\n        this.editorContributions = [];\n        this.diffEditorContributions = [];\n        this.editorActions = [];\n        this.editorCommands = Object.create(null);\n    }\n    registerEditorContribution(id, ctor, instantiation) {\n        this.editorContributions.push({ id, ctor: ctor, instantiation });\n    }\n    getEditorContributions() {\n        return this.editorContributions.slice(0);\n    }\n    getDiffEditorContributions() {\n        return this.diffEditorContributions.slice(0);\n    }\n    registerEditorAction(action) {\n        action.register();\n        this.editorActions.push(action);\n    }\n    getEditorActions() {\n        return this.editorActions;\n    }\n    registerEditorCommand(editorCommand) {\n        editorCommand.register();\n        this.editorCommands[editorCommand.id] = editorCommand;\n    }\n    getEditorCommand(commandId) {\n        return (this.editorCommands[commandId] || null);\n    }\n}\nEditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport const UndoCommand = registerCommand(new MultiCommand({\n    id: 'undo',\n    precondition: undefined,\n    kbOpts: {\n        weight: 0 /* KeybindingWeight.EditorCore */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 56 /* KeyCode.KeyZ */\n    },\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '1_do',\n            title: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, \"&&Undo\"),\n            order: 1\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('undo', \"Undo\"),\n            order: 1\n        }]\n}));\nregisterCommand(new ProxyCommand(UndoCommand, { id: 'default:undo', precondition: undefined }));\nexport const RedoCommand = registerCommand(new MultiCommand({\n    id: 'redo',\n    precondition: undefined,\n    kbOpts: {\n        weight: 0 /* KeybindingWeight.EditorCore */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 55 /* KeyCode.KeyY */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 56 /* KeyCode.KeyZ */],\n        mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 56 /* KeyCode.KeyZ */ }\n    },\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '1_do',\n            title: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, \"&&Redo\"),\n            order: 2\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('redo', \"Redo\"),\n            order: 1\n        }]\n}));\nregisterCommand(new ProxyCommand(RedoCommand, { id: 'default:redo', precondition: undefined }));\nexport const SelectAllCommand = registerCommand(new MultiCommand({\n    id: 'editor.action.selectAll',\n    precondition: undefined,\n    kbOpts: {\n        weight: 0 /* KeybindingWeight.EditorCore */,\n        kbExpr: null,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 31 /* KeyCode.KeyA */\n    },\n    menuOpts: [{\n            menuId: MenuId.MenubarSelectionMenu,\n            group: '1_basic',\n            title: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, \"&&Select All\"),\n            order: 1\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('selectAll', \"Select All\"),\n            order: 1\n        }]\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}