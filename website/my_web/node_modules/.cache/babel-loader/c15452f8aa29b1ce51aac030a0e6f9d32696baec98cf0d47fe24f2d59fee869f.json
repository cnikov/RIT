{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../core/range.js';\n/**\n * Represents a non-negative length in terms of line and column count.\n * Prefer using {@link Length} for performance reasons.\n*/\nexport class LengthObj {\n  constructor(lineCount, columnCount) {\n    this.lineCount = lineCount;\n    this.columnCount = columnCount;\n  }\n  toString() {\n    return `${this.lineCount},${this.columnCount}`;\n  }\n}\nLengthObj.zero = new LengthObj(0, 0);\n/**\n * The end must be greater than or equal to the start.\n*/\nexport function lengthDiff(startLineCount, startColumnCount, endLineCount, endColumnCount) {\n  return startLineCount !== endLineCount ? toLength(endLineCount - startLineCount, endColumnCount) : toLength(0, endColumnCount - startColumnCount);\n}\nexport const lengthZero = 0;\nexport function lengthIsZero(length) {\n  return length === 0;\n}\n/*\n * We have 52 bits available in a JS number.\n * We use the upper 26 bits to store the line and the lower 26 bits to store the column.\n */\n///*\nconst factor = Math.pow(2, 26);\n/*/\nconst factor = 1000000;\n// */\nexport function toLength(lineCount, columnCount) {\n  // llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)\n  //       line count (26 bits)    column count (26 bits)\n  // If there is no overflow (all values/sums below 2^26 = 67108864),\n  // we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.\n  return lineCount * factor + columnCount;\n}\nexport function lengthToObj(length) {\n  const l = length;\n  const lineCount = Math.floor(l / factor);\n  const columnCount = l - lineCount * factor;\n  return new LengthObj(lineCount, columnCount);\n}\nexport function lengthGetLineCount(length) {\n  return Math.floor(length / factor);\n}\n/**\n * Returns the amount of columns of the given length, assuming that it does not span any line.\n*/\nexport function lengthGetColumnCountIfZeroLineCount(length) {\n  return length;\n}\nexport function lengthAdd(l1, l2) {\n  let r = l1 + l2;\n  if (l2 >= factor) {\n    r = r - l1 % factor;\n  }\n  return r;\n}\nexport function sumLengths(items, lengthFn) {\n  return items.reduce((a, b) => lengthAdd(a, lengthFn(b)), lengthZero);\n}\nexport function lengthEquals(length1, length2) {\n  return length1 === length2;\n}\n/**\n * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.\n */\nexport function lengthDiffNonNegative(length1, length2) {\n  const l1 = length1;\n  const l2 = length2;\n  const diff = l2 - l1;\n  if (diff <= 0) {\n    // line-count of length1 is higher than line-count of length2\n    // or they are equal and column-count of length1 is higher than column-count of length2\n    return lengthZero;\n  }\n  const lineCount1 = Math.floor(l1 / factor);\n  const lineCount2 = Math.floor(l2 / factor);\n  const colCount2 = l2 - lineCount2 * factor;\n  if (lineCount1 === lineCount2) {\n    const colCount1 = l1 - lineCount1 * factor;\n    return toLength(0, colCount2 - colCount1);\n  } else {\n    return toLength(lineCount2 - lineCount1, colCount2);\n  }\n}\nexport function lengthLessThan(length1, length2) {\n  // First, compare line counts, then column counts.\n  return length1 < length2;\n}\nexport function lengthLessThanEqual(length1, length2) {\n  return length1 <= length2;\n}\nexport function lengthGreaterThanEqual(length1, length2) {\n  return length1 >= length2;\n}\nexport function positionToLength(position) {\n  return toLength(position.lineNumber - 1, position.column - 1);\n}\nexport function lengthsToRange(lengthStart, lengthEnd) {\n  const l = lengthStart;\n  const lineCount = Math.floor(l / factor);\n  const colCount = l - lineCount * factor;\n  const l2 = lengthEnd;\n  const lineCount2 = Math.floor(l2 / factor);\n  const colCount2 = l2 - lineCount2 * factor;\n  return new Range(lineCount + 1, colCount + 1, lineCount2 + 1, colCount2 + 1);\n}\nexport function lengthOfString(str) {\n  const lines = splitLines(str);\n  return toLength(lines.length - 1, lines[lines.length - 1].length);\n}","map":{"version":3,"names":["splitLines","Range","LengthObj","constructor","lineCount","columnCount","toString","zero","lengthDiff","startLineCount","startColumnCount","endLineCount","endColumnCount","toLength","lengthZero","lengthIsZero","length","factor","Math","pow","lengthToObj","l","floor","lengthGetLineCount","lengthGetColumnCountIfZeroLineCount","lengthAdd","l1","l2","r","sumLengths","items","lengthFn","reduce","a","b","lengthEquals","length1","length2","lengthDiffNonNegative","diff","lineCount1","lineCount2","colCount2","colCount1","lengthLessThan","lengthLessThanEqual","lengthGreaterThanEqual","positionToLength","position","lineNumber","column","lengthsToRange","lengthStart","lengthEnd","colCount","lengthOfString","str","lines"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../core/range.js';\n/**\n * Represents a non-negative length in terms of line and column count.\n * Prefer using {@link Length} for performance reasons.\n*/\nexport class LengthObj {\n    constructor(lineCount, columnCount) {\n        this.lineCount = lineCount;\n        this.columnCount = columnCount;\n    }\n    toString() {\n        return `${this.lineCount},${this.columnCount}`;\n    }\n}\nLengthObj.zero = new LengthObj(0, 0);\n/**\n * The end must be greater than or equal to the start.\n*/\nexport function lengthDiff(startLineCount, startColumnCount, endLineCount, endColumnCount) {\n    return (startLineCount !== endLineCount)\n        ? toLength(endLineCount - startLineCount, endColumnCount)\n        : toLength(0, endColumnCount - startColumnCount);\n}\nexport const lengthZero = 0;\nexport function lengthIsZero(length) {\n    return length === 0;\n}\n/*\n * We have 52 bits available in a JS number.\n * We use the upper 26 bits to store the line and the lower 26 bits to store the column.\n */\n///*\nconst factor = Math.pow(2, 26);\n/*/\nconst factor = 1000000;\n// */\nexport function toLength(lineCount, columnCount) {\n    // llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)\n    //       line count (26 bits)    column count (26 bits)\n    // If there is no overflow (all values/sums below 2^26 = 67108864),\n    // we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.\n    return (lineCount * factor + columnCount);\n}\nexport function lengthToObj(length) {\n    const l = length;\n    const lineCount = Math.floor(l / factor);\n    const columnCount = l - lineCount * factor;\n    return new LengthObj(lineCount, columnCount);\n}\nexport function lengthGetLineCount(length) {\n    return Math.floor(length / factor);\n}\n/**\n * Returns the amount of columns of the given length, assuming that it does not span any line.\n*/\nexport function lengthGetColumnCountIfZeroLineCount(length) {\n    return length;\n}\nexport function lengthAdd(l1, l2) {\n    let r = l1 + l2;\n    if (l2 >= factor) {\n        r = r - (l1 % factor);\n    }\n    return r;\n}\nexport function sumLengths(items, lengthFn) {\n    return items.reduce((a, b) => lengthAdd(a, lengthFn(b)), lengthZero);\n}\nexport function lengthEquals(length1, length2) {\n    return length1 === length2;\n}\n/**\n * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.\n */\nexport function lengthDiffNonNegative(length1, length2) {\n    const l1 = length1;\n    const l2 = length2;\n    const diff = l2 - l1;\n    if (diff <= 0) {\n        // line-count of length1 is higher than line-count of length2\n        // or they are equal and column-count of length1 is higher than column-count of length2\n        return lengthZero;\n    }\n    const lineCount1 = Math.floor(l1 / factor);\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    if (lineCount1 === lineCount2) {\n        const colCount1 = l1 - lineCount1 * factor;\n        return toLength(0, colCount2 - colCount1);\n    }\n    else {\n        return toLength(lineCount2 - lineCount1, colCount2);\n    }\n}\nexport function lengthLessThan(length1, length2) {\n    // First, compare line counts, then column counts.\n    return length1 < length2;\n}\nexport function lengthLessThanEqual(length1, length2) {\n    return length1 <= length2;\n}\nexport function lengthGreaterThanEqual(length1, length2) {\n    return length1 >= length2;\n}\nexport function positionToLength(position) {\n    return toLength(position.lineNumber - 1, position.column - 1);\n}\nexport function lengthsToRange(lengthStart, lengthEnd) {\n    const l = lengthStart;\n    const lineCount = Math.floor(l / factor);\n    const colCount = l - lineCount * factor;\n    const l2 = lengthEnd;\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    return new Range(lineCount + 1, colCount + 1, lineCount2 + 1, colCount2 + 1);\n}\nexport function lengthOfString(str) {\n    const lines = splitLines(str);\n    return toLength(lines.length - 1, lines[lines.length - 1].length);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,uCAAuC;AAClE,SAASC,KAAK,QAAQ,wBAAwB;AAC9C;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,CAAC;EACnBC,WAAWA,CAACC,SAAS,EAAEC,WAAW,EAAE;IAChC,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACAC,QAAQA,CAAA,EAAG;IACP,OAAQ,GAAE,IAAI,CAACF,SAAU,IAAG,IAAI,CAACC,WAAY,EAAC;EAClD;AACJ;AACAH,SAAS,CAACK,IAAI,GAAG,IAAIL,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;AACpC;AACA;AACA;AACA,OAAO,SAASM,UAAUA,CAACC,cAAc,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,cAAc,EAAE;EACvF,OAAQH,cAAc,KAAKE,YAAY,GACjCE,QAAQ,CAACF,YAAY,GAAGF,cAAc,EAAEG,cAAc,CAAC,GACvDC,QAAQ,CAAC,CAAC,EAAED,cAAc,GAAGF,gBAAgB,CAAC;AACxD;AACA,OAAO,MAAMI,UAAU,GAAG,CAAC;AAC3B,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAE;EACjC,OAAOA,MAAM,KAAK,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;AAC9B;AACA;AACA;AACA,OAAO,SAASN,QAAQA,CAACT,SAAS,EAAEC,WAAW,EAAE;EAC7C;EACA;EACA;EACA;EACA,OAAQD,SAAS,GAAGa,MAAM,GAAGZ,WAAW;AAC5C;AACA,OAAO,SAASe,WAAWA,CAACJ,MAAM,EAAE;EAChC,MAAMK,CAAC,GAAGL,MAAM;EAChB,MAAMZ,SAAS,GAAGc,IAAI,CAACI,KAAK,CAACD,CAAC,GAAGJ,MAAM,CAAC;EACxC,MAAMZ,WAAW,GAAGgB,CAAC,GAAGjB,SAAS,GAAGa,MAAM;EAC1C,OAAO,IAAIf,SAAS,CAACE,SAAS,EAAEC,WAAW,CAAC;AAChD;AACA,OAAO,SAASkB,kBAAkBA,CAACP,MAAM,EAAE;EACvC,OAAOE,IAAI,CAACI,KAAK,CAACN,MAAM,GAAGC,MAAM,CAAC;AACtC;AACA;AACA;AACA;AACA,OAAO,SAASO,mCAAmCA,CAACR,MAAM,EAAE;EACxD,OAAOA,MAAM;AACjB;AACA,OAAO,SAASS,SAASA,CAACC,EAAE,EAAEC,EAAE,EAAE;EAC9B,IAAIC,CAAC,GAAGF,EAAE,GAAGC,EAAE;EACf,IAAIA,EAAE,IAAIV,MAAM,EAAE;IACdW,CAAC,GAAGA,CAAC,GAAIF,EAAE,GAAGT,MAAO;EACzB;EACA,OAAOW,CAAC;AACZ;AACA,OAAO,SAASC,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACxC,OAAOD,KAAK,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKT,SAAS,CAACQ,CAAC,EAAEF,QAAQ,CAACG,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAAC;AACxE;AACA,OAAO,SAASqB,YAAYA,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC3C,OAAOD,OAAO,KAAKC,OAAO;AAC9B;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACF,OAAO,EAAEC,OAAO,EAAE;EACpD,MAAMX,EAAE,GAAGU,OAAO;EAClB,MAAMT,EAAE,GAAGU,OAAO;EAClB,MAAME,IAAI,GAAGZ,EAAE,GAAGD,EAAE;EACpB,IAAIa,IAAI,IAAI,CAAC,EAAE;IACX;IACA;IACA,OAAOzB,UAAU;EACrB;EACA,MAAM0B,UAAU,GAAGtB,IAAI,CAACI,KAAK,CAACI,EAAE,GAAGT,MAAM,CAAC;EAC1C,MAAMwB,UAAU,GAAGvB,IAAI,CAACI,KAAK,CAACK,EAAE,GAAGV,MAAM,CAAC;EAC1C,MAAMyB,SAAS,GAAGf,EAAE,GAAGc,UAAU,GAAGxB,MAAM;EAC1C,IAAIuB,UAAU,KAAKC,UAAU,EAAE;IAC3B,MAAME,SAAS,GAAGjB,EAAE,GAAGc,UAAU,GAAGvB,MAAM;IAC1C,OAAOJ,QAAQ,CAAC,CAAC,EAAE6B,SAAS,GAAGC,SAAS,CAAC;EAC7C,CAAC,MACI;IACD,OAAO9B,QAAQ,CAAC4B,UAAU,GAAGD,UAAU,EAAEE,SAAS,CAAC;EACvD;AACJ;AACA,OAAO,SAASE,cAAcA,CAACR,OAAO,EAAEC,OAAO,EAAE;EAC7C;EACA,OAAOD,OAAO,GAAGC,OAAO;AAC5B;AACA,OAAO,SAASQ,mBAAmBA,CAACT,OAAO,EAAEC,OAAO,EAAE;EAClD,OAAOD,OAAO,IAAIC,OAAO;AAC7B;AACA,OAAO,SAASS,sBAAsBA,CAACV,OAAO,EAAEC,OAAO,EAAE;EACrD,OAAOD,OAAO,IAAIC,OAAO;AAC7B;AACA,OAAO,SAASU,gBAAgBA,CAACC,QAAQ,EAAE;EACvC,OAAOnC,QAAQ,CAACmC,QAAQ,CAACC,UAAU,GAAG,CAAC,EAAED,QAAQ,CAACE,MAAM,GAAG,CAAC,CAAC;AACjE;AACA,OAAO,SAASC,cAAcA,CAACC,WAAW,EAAEC,SAAS,EAAE;EACnD,MAAMhC,CAAC,GAAG+B,WAAW;EACrB,MAAMhD,SAAS,GAAGc,IAAI,CAACI,KAAK,CAACD,CAAC,GAAGJ,MAAM,CAAC;EACxC,MAAMqC,QAAQ,GAAGjC,CAAC,GAAGjB,SAAS,GAAGa,MAAM;EACvC,MAAMU,EAAE,GAAG0B,SAAS;EACpB,MAAMZ,UAAU,GAAGvB,IAAI,CAACI,KAAK,CAACK,EAAE,GAAGV,MAAM,CAAC;EAC1C,MAAMyB,SAAS,GAAGf,EAAE,GAAGc,UAAU,GAAGxB,MAAM;EAC1C,OAAO,IAAIhB,KAAK,CAACG,SAAS,GAAG,CAAC,EAAEkD,QAAQ,GAAG,CAAC,EAAEb,UAAU,GAAG,CAAC,EAAEC,SAAS,GAAG,CAAC,CAAC;AAChF;AACA,OAAO,SAASa,cAAcA,CAACC,GAAG,EAAE;EAChC,MAAMC,KAAK,GAAGzD,UAAU,CAACwD,GAAG,CAAC;EAC7B,OAAO3C,QAAQ,CAAC4C,KAAK,CAACzC,MAAM,GAAG,CAAC,EAAEyC,KAAK,CAACA,KAAK,CAACzC,MAAM,GAAG,CAAC,CAAC,CAACA,MAAM,CAAC;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}