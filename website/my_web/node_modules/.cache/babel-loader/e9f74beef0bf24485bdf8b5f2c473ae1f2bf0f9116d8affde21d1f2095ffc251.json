{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar EditorContribution_1;\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nclass SuggestInlineCompletion {\n  constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n    this.range = range;\n    this.insertText = insertText;\n    this.filterText = filterText;\n    this.additionalTextEdits = additionalTextEdits;\n    this.command = command;\n    this.completion = completion;\n  }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n  constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n    super(completions.disposable);\n    this.model = model;\n    this.line = line;\n    this.word = word;\n    this.completionModel = completionModel;\n    this._suggestMemoryService = _suggestMemoryService;\n  }\n  canBeReused(model, line, word) {\n    return this.model === model // same model\n    && this.line === line && this.word.word.length > 0 && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n    && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n  }\n\n  get items() {\n    var _a;\n    const result = [];\n    // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n    // ranked items are before/after\n    const {\n      items\n    } = this.completionModel;\n    const selectedIndex = this._suggestMemoryService.select(this.model, {\n      lineNumber: this.line,\n      column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta\n    }, items);\n    const first = Iterable.slice(items, selectedIndex);\n    const second = Iterable.slice(items, 0, selectedIndex);\n    let resolveCount = 5;\n    for (const item of Iterable.concat(first, second)) {\n      if (item.score === FuzzyScore.Default) {\n        // skip items that have no overlap\n        continue;\n      }\n      const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n      );\n\n      const insertText = item.completion.insertTextRules && item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */ ? {\n        snippet: item.completion.insertText\n      } : item.completion.insertText;\n      result.push(new SuggestInlineCompletion(range, insertText, (_a = item.filterTextLow) !== null && _a !== void 0 ? _a : item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n      // resolve the first N suggestions eagerly\n      if (resolveCount-- >= 0) {\n        item.resolve(CancellationToken.None);\n      }\n    }\n    return result;\n  }\n};\nInlineCompletionResults = __decorate([__param(5, ISuggestMemoryService)], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions {\n  constructor(_getEditorOption, _languageFeatureService, _clipboardService, _suggestMemoryService) {\n    this._getEditorOption = _getEditorOption;\n    this._languageFeatureService = _languageFeatureService;\n    this._clipboardService = _clipboardService;\n    this._suggestMemoryService = _suggestMemoryService;\n  }\n  provideInlineCompletions(model, position, context, token) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (context.selectedSuggestionInfo) {\n        return;\n      }\n      const config = this._getEditorOption(88 /* EditorOption.quickSuggestions */, model);\n      if (QuickSuggestionsOptions.isAllOff(config)) {\n        // quick suggest is off (for this model/language)\n        return;\n      }\n      model.tokenization.tokenizeIfCheap(position.lineNumber);\n      const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n      const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n      if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n        // quick suggest is off (for this token)\n        return undefined;\n      }\n      // We consider non-empty leading words and trigger characters. The latter only\n      // when no word is being typed (word characters superseed trigger characters)\n      let wordInfo = model.getWordAtPosition(position);\n      let triggerCharacterInfo;\n      if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word)) {\n        triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n      }\n      if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word) && !triggerCharacterInfo) {\n        // not at word, not a trigger character\n        return;\n      }\n      // ensure that we have word information and that we are at the end of a word\n      // otherwise we stop because we don't want to do quick suggestions inside words\n      if (!wordInfo) {\n        wordInfo = model.getWordUntilPosition(position);\n      }\n      if (wordInfo.endColumn !== position.column) {\n        return;\n      }\n      let result;\n      const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n      if (!triggerCharacterInfo && ((_a = this._lastResult) === null || _a === void 0 ? void 0 : _a.canBeReused(model, position.lineNumber, wordInfo))) {\n        // reuse a previous result iff possible, only a refilter is needed\n        // TODO@jrieken this can be improved further and only incomplete results can be updated\n        // console.log(`REUSE with ${wordInfo.word}`);\n        const newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n        this._lastResult.completionModel.lineContext = newLineContext;\n        this._lastResult.acquire();\n        result = this._lastResult;\n      } else {\n        // refesh model is required\n        const completions = yield provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, undefined, triggerCharacterInfo === null || triggerCharacterInfo === void 0 ? void 0 : triggerCharacterInfo.providers), triggerCharacterInfo && {\n          triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n          triggerCharacter: triggerCharacterInfo.ch\n        }, token);\n        let clipboardText;\n        if (completions.needsClipboard) {\n          clipboardText = yield this._clipboardService.readText();\n        }\n        const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, this._getEditorOption(117 /* EditorOption.suggest */, model), this._getEditorOption(111 /* EditorOption.snippetSuggestions */, model), {\n          boostFullMatch: false,\n          firstMatchCanBeWeak: false\n        }, clipboardText);\n        result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n      }\n      this._lastResult = result;\n      return result;\n    });\n  }\n  handleItemDidShow(_completions, item) {\n    item.completion.resolve(CancellationToken.None);\n  }\n  freeInlineCompletions(result) {\n    result.release();\n  }\n  _getTriggerCharacterInfo(model, position) {\n    var _a;\n    const ch = model.getValueInRange(Range.fromPositions({\n      lineNumber: position.lineNumber,\n      column: position.column - 1\n    }, position));\n    const providers = new Set();\n    for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n      if ((_a = provider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(ch)) {\n        providers.add(provider);\n      }\n    }\n    if (providers.size === 0) {\n      return undefined;\n    }\n    return {\n      providers,\n      ch\n    };\n  }\n};\nSuggestInlineCompletions = __decorate([__param(1, ILanguageFeaturesService), __param(2, IClipboardService), __param(3, ISuggestMemoryService)], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nlet EditorContribution = EditorContribution_1 = class EditorContribution {\n  constructor(_editor, languageFeatureService, editorService, instaService) {\n    // HACK - way to contribute something only once\n    if (++EditorContribution_1._counter === 1) {\n      const provider = instaService.createInstance(SuggestInlineCompletions, (id, model) => {\n        var _a;\n        // HACK - reuse the editor options world outside from a \"normal\" contribution\n        const editor = (_a = editorService.listCodeEditors().find(editor => editor.getModel() === model)) !== null && _a !== void 0 ? _a : _editor;\n        return editor.getOption(id);\n      });\n      EditorContribution_1._disposable = languageFeatureService.inlineCompletionsProvider.register('*', provider);\n    }\n  }\n  dispose() {\n    var _a;\n    if (--EditorContribution_1._counter === 0) {\n      (_a = EditorContribution_1._disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n      EditorContribution_1._disposable = undefined;\n    }\n  }\n};\nEditorContribution._counter = 0;\nEditorContribution = EditorContribution_1 = __decorate([__param(1, ILanguageFeaturesService), __param(2, ICodeEditorService), __param(3, IInstantiationService)], EditorContribution);\nregisterEditorContribution('suggest.inlineCompletionsProvider', EditorContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because the contribution is used as a way to ONCE access a service to which a provider is registered","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","EditorContribution_1","CancellationToken","FuzzyScore","Iterable","RefCountedDisposable","registerEditorContribution","ICodeEditorService","Range","ILanguageFeaturesService","CompletionModel","LineContext","CompletionOptions","provideSuggestionItems","QuickSuggestionsOptions","ISuggestMemoryService","WordDistance","IClipboardService","IInstantiationService","SuggestInlineCompletion","constructor","range","insertText","filterText","additionalTextEdits","command","completion","InlineCompletionResults","model","line","word","completionModel","completions","_suggestMemoryService","disposable","canBeReused","startColumn","endColumn","getIncompleteProvider","size","items","_a","selectedIndex","select","lineNumber","column","lineContext","characterCountDelta","first","slice","second","resolveCount","item","concat","score","Default","editStart","editInsertEnd","insertTextRules","snippet","push","filterTextLow","labelLow","None","SuggestInlineCompletions","_getEditorOption","_languageFeatureService","_clipboardService","provideInlineCompletions","position","context","token","selectedSuggestionInfo","config","isAllOff","tokenization","tokenizeIfCheap","lineTokens","getLineTokens","tokenType","getStandardTokenType","findTokenIndexAtOffset","Math","max","valueFor","undefined","wordInfo","getWordAtPosition","triggerCharacterInfo","_getTriggerCharacterInfo","getWordUntilPosition","leadingLineContents","getValueInRange","_lastResult","newLineContext","acquire","completionProvider","providers","triggerKind","triggerCharacter","ch","clipboardText","needsClipboard","readText","boostFullMatch","firstMatchCanBeWeak","handleItemDidShow","_completions","freeInlineCompletions","release","fromPositions","Set","provider","all","triggerCharacters","includes","add","EditorContribution","_editor","languageFeatureService","editorService","instaService","_counter","createInstance","id","editor","listCodeEditors","find","getModel","getOption","_disposable","inlineCompletionsProvider","register","dispose"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestInlineCompletions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar EditorContribution_1;\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nclass SuggestInlineCompletion {\n    constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n        this.range = range;\n        this.insertText = insertText;\n        this.filterText = filterText;\n        this.additionalTextEdits = additionalTextEdits;\n        this.command = command;\n        this.completion = completion;\n    }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n    constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n        super(completions.disposable);\n        this.model = model;\n        this.line = line;\n        this.word = word;\n        this.completionModel = completionModel;\n        this._suggestMemoryService = _suggestMemoryService;\n    }\n    canBeReused(model, line, word) {\n        return this.model === model // same model\n            && this.line === line\n            && this.word.word.length > 0\n            && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n            && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n    }\n    get items() {\n        var _a;\n        const result = [];\n        // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n        // ranked items are before/after\n        const { items } = this.completionModel;\n        const selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n        const first = Iterable.slice(items, selectedIndex);\n        const second = Iterable.slice(items, 0, selectedIndex);\n        let resolveCount = 5;\n        for (const item of Iterable.concat(first, second)) {\n            if (item.score === FuzzyScore.Default) {\n                // skip items that have no overlap\n                continue;\n            }\n            const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n            );\n            const insertText = item.completion.insertTextRules && (item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */)\n                ? { snippet: item.completion.insertText }\n                : item.completion.insertText;\n            result.push(new SuggestInlineCompletion(range, insertText, (_a = item.filterTextLow) !== null && _a !== void 0 ? _a : item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n            // resolve the first N suggestions eagerly\n            if (resolveCount-- >= 0) {\n                item.resolve(CancellationToken.None);\n            }\n        }\n        return result;\n    }\n};\nInlineCompletionResults = __decorate([\n    __param(5, ISuggestMemoryService)\n], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions {\n    constructor(_getEditorOption, _languageFeatureService, _clipboardService, _suggestMemoryService) {\n        this._getEditorOption = _getEditorOption;\n        this._languageFeatureService = _languageFeatureService;\n        this._clipboardService = _clipboardService;\n        this._suggestMemoryService = _suggestMemoryService;\n    }\n    provideInlineCompletions(model, position, context, token) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (context.selectedSuggestionInfo) {\n                return;\n            }\n            const config = this._getEditorOption(88 /* EditorOption.quickSuggestions */, model);\n            if (QuickSuggestionsOptions.isAllOff(config)) {\n                // quick suggest is off (for this model/language)\n                return;\n            }\n            model.tokenization.tokenizeIfCheap(position.lineNumber);\n            const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n            const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n            if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n                // quick suggest is off (for this token)\n                return undefined;\n            }\n            // We consider non-empty leading words and trigger characters. The latter only\n            // when no word is being typed (word characters superseed trigger characters)\n            let wordInfo = model.getWordAtPosition(position);\n            let triggerCharacterInfo;\n            if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word)) {\n                triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n            }\n            if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word) && !triggerCharacterInfo) {\n                // not at word, not a trigger character\n                return;\n            }\n            // ensure that we have word information and that we are at the end of a word\n            // otherwise we stop because we don't want to do quick suggestions inside words\n            if (!wordInfo) {\n                wordInfo = model.getWordUntilPosition(position);\n            }\n            if (wordInfo.endColumn !== position.column) {\n                return;\n            }\n            let result;\n            const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n            if (!triggerCharacterInfo && ((_a = this._lastResult) === null || _a === void 0 ? void 0 : _a.canBeReused(model, position.lineNumber, wordInfo))) {\n                // reuse a previous result iff possible, only a refilter is needed\n                // TODO@jrieken this can be improved further and only incomplete results can be updated\n                // console.log(`REUSE with ${wordInfo.word}`);\n                const newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n                this._lastResult.completionModel.lineContext = newLineContext;\n                this._lastResult.acquire();\n                result = this._lastResult;\n            }\n            else {\n                // refesh model is required\n                const completions = yield provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, undefined, triggerCharacterInfo === null || triggerCharacterInfo === void 0 ? void 0 : triggerCharacterInfo.providers), triggerCharacterInfo && { triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */, triggerCharacter: triggerCharacterInfo.ch }, token);\n                let clipboardText;\n                if (completions.needsClipboard) {\n                    clipboardText = yield this._clipboardService.readText();\n                }\n                const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, this._getEditorOption(117 /* EditorOption.suggest */, model), this._getEditorOption(111 /* EditorOption.snippetSuggestions */, model), { boostFullMatch: false, firstMatchCanBeWeak: false }, clipboardText);\n                result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n            }\n            this._lastResult = result;\n            return result;\n        });\n    }\n    handleItemDidShow(_completions, item) {\n        item.completion.resolve(CancellationToken.None);\n    }\n    freeInlineCompletions(result) {\n        result.release();\n    }\n    _getTriggerCharacterInfo(model, position) {\n        var _a;\n        const ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n        const providers = new Set();\n        for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n            if ((_a = provider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(ch)) {\n                providers.add(provider);\n            }\n        }\n        if (providers.size === 0) {\n            return undefined;\n        }\n        return { providers, ch };\n    }\n};\nSuggestInlineCompletions = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, IClipboardService),\n    __param(3, ISuggestMemoryService)\n], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nlet EditorContribution = EditorContribution_1 = class EditorContribution {\n    constructor(_editor, languageFeatureService, editorService, instaService) {\n        // HACK - way to contribute something only once\n        if (++EditorContribution_1._counter === 1) {\n            const provider = instaService.createInstance(SuggestInlineCompletions, (id, model) => {\n                var _a;\n                // HACK - reuse the editor options world outside from a \"normal\" contribution\n                const editor = (_a = editorService.listCodeEditors().find(editor => editor.getModel() === model)) !== null && _a !== void 0 ? _a : _editor;\n                return editor.getOption(id);\n            });\n            EditorContribution_1._disposable = languageFeatureService.inlineCompletionsProvider.register('*', provider);\n        }\n    }\n    dispose() {\n        var _a;\n        if (--EditorContribution_1._counter === 0) {\n            (_a = EditorContribution_1._disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n            EditorContribution_1._disposable = undefined;\n        }\n    }\n};\nEditorContribution._counter = 0;\nEditorContribution = EditorContribution_1 = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, ICodeEditorService),\n    __param(3, IInstantiationService)\n], EditorContribution);\nregisterEditorContribution('suggest.inlineCompletionsProvider', EditorContribution, 0 /* EditorContributionInstantiation.Eager */); // eager because the contribution is used as a way to ONCE access a service to which a provider is registered\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}