{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n  return Object.assign(Object.assign({}, props), {\n    children: [],\n    refreshPromise: undefined,\n    stale: true,\n    slow: false,\n    collapsedByDefault: undefined\n  });\n}\nfunction isAncestor(ancestor, descendant) {\n  if (!descendant.parent) {\n    return false;\n  } else if (descendant.parent === ancestor) {\n    return true;\n  } else {\n    return isAncestor(ancestor, descendant.parent);\n  }\n}\nfunction intersects(node, other) {\n  return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n  get element() {\n    return this.node.element.element;\n  }\n  get children() {\n    return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n  constructor(node) {\n    this.node = node;\n  }\n}\nclass AsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return true;\n    } else {\n      twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n  }\n}\nfunction asTreeEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    elements: e.elements.map(e => e.element)\n  };\n}\nfunction asTreeMouseEvent(e) {\n  return {\n    browserEvent: e.browserEvent,\n    element: e.element && e.element.element,\n    target: e.target\n  };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n  constructor(data) {\n    super(data.elements.map(node => node.element));\n    this.data = data;\n  }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n  if (data instanceof ElementsDragAndDropData) {\n    return new AsyncDataTreeElementsDragAndDropData(data);\n  }\n  return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n  constructor(dnd) {\n    this.dnd = dnd;\n  }\n  getDragURI(node) {\n    return this.dnd.getDragURI(node.element);\n  }\n  getDragLabel(nodes, originalEvent) {\n    if (this.dnd.getDragLabel) {\n      return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n    }\n    return undefined;\n  }\n  onDragStart(data, originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n  }\n  onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n    return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  drop(data, targetNode, targetIndex, originalEvent) {\n    this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n  }\n  onDragEnd(originalEvent) {\n    var _a, _b;\n    (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n  }\n  dispose() {\n    this.dnd.dispose();\n  }\n}\nfunction asObjectTreeOptions(options) {\n  return options && Object.assign(Object.assign({}, options), {\n    collapseByDefault: true,\n    identityProvider: options.identityProvider && {\n      getId(el) {\n        return options.identityProvider.getId(el.element);\n      }\n    },\n    dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd),\n    multipleSelectionController: options.multipleSelectionController && {\n      isSelectionSingleChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      },\n      isSelectionRangeChangeEvent(e) {\n        return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), {\n          element: e.element\n        }));\n      }\n    },\n    accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), {\n      getPosInSet: undefined,\n      getSetSize: undefined,\n      getRole: options.accessibilityProvider.getRole ? el => {\n        return options.accessibilityProvider.getRole(el.element);\n      } : () => 'treeitem',\n      isChecked: options.accessibilityProvider.isChecked ? e => {\n        var _a;\n        return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n      } : undefined,\n      getAriaLabel(e) {\n        return options.accessibilityProvider.getAriaLabel(e.element);\n      },\n      getWidgetAriaLabel() {\n        return options.accessibilityProvider.getWidgetAriaLabel();\n      },\n      getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree',\n      getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n        return options.accessibilityProvider.getAriaLevel(node.element);\n      }),\n      getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n        return options.accessibilityProvider.getActiveDescendantId(node.element);\n      })\n    }),\n    filter: options.filter && {\n      filter(e, parentVisibility) {\n        return options.filter.filter(e.element, parentVisibility);\n      }\n    },\n    keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), {\n      getKeyboardNavigationLabel(e) {\n        return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n      }\n    }),\n    sorter: undefined,\n    expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : e => options.expandOnlyOnTwistieClick(e.element),\n    defaultFindVisibility: e => {\n      if (e.hasChildren && e.stale) {\n        return 1 /* TreeVisibility.Visible */;\n      } else if (typeof options.defaultFindVisibility === 'number') {\n        return options.defaultFindVisibility;\n      } else if (typeof options.defaultFindVisibility === 'undefined') {\n        return 2 /* TreeVisibility.Recurse */;\n      } else {\n        return options.defaultFindVisibility(e.element);\n      }\n    }\n  });\n}\nfunction dfs(node, fn) {\n  fn(node);\n  node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n  get onDidScroll() {\n    return this.tree.onDidScroll;\n  }\n  get onDidChangeFocus() {\n    return Event.map(this.tree.onDidChangeFocus, asTreeEvent);\n  }\n  get onDidChangeSelection() {\n    return Event.map(this.tree.onDidChangeSelection, asTreeEvent);\n  }\n  get onMouseDblClick() {\n    return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent);\n  }\n  get onPointer() {\n    return Event.map(this.tree.onPointer, asTreeMouseEvent);\n  }\n  get onDidFocus() {\n    return this.tree.onDidFocus;\n  }\n  /**\n   * To be used internally only!\n   * @deprecated\n   */\n  get onDidChangeModel() {\n    return this.tree.onDidChangeModel;\n  }\n  get onDidChangeCollapseState() {\n    return this.tree.onDidChangeCollapseState;\n  }\n  get onDidChangeFindOpenState() {\n    return this.tree.onDidChangeFindOpenState;\n  }\n  get onDidDispose() {\n    return this.tree.onDidDispose;\n  }\n  constructor(user, container, delegate, renderers, dataSource, options = {}) {\n    this.user = user;\n    this.dataSource = dataSource;\n    this.nodes = new Map();\n    this.subTreeRefreshPromises = new Map();\n    this.refreshPromises = new Map();\n    this._onDidRender = new Emitter();\n    this._onDidChangeNodeSlowState = new Emitter();\n    this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n    this.disposables = new DisposableStore();\n    this.identityProvider = options.identityProvider;\n    this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n    this.sorter = options.sorter;\n    this.collapseByDefault = options.collapseByDefault;\n    this.tree = this.createTree(user, container, delegate, renderers, options);\n    this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n    this.root = createAsyncDataTreeNode({\n      element: undefined,\n      parent: null,\n      hasChildren: true\n    });\n    if (this.identityProvider) {\n      this.root = Object.assign(Object.assign({}, this.root), {\n        id: null\n      });\n    }\n    this.nodes.set(null, this.root);\n    this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asObjectTreeOptions(options) || {};\n    return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  updateOptions(options = {}) {\n    this.tree.updateOptions(options);\n  }\n  // Widget\n  getHTMLElement() {\n    return this.tree.getHTMLElement();\n  }\n  get scrollTop() {\n    return this.tree.scrollTop;\n  }\n  set scrollTop(scrollTop) {\n    this.tree.scrollTop = scrollTop;\n  }\n  get scrollHeight() {\n    return this.tree.scrollHeight;\n  }\n  get renderHeight() {\n    return this.tree.renderHeight;\n  }\n  domFocus() {\n    this.tree.domFocus();\n  }\n  layout(height, width) {\n    this.tree.layout(height, width);\n  }\n  style(styles) {\n    this.tree.style(styles);\n  }\n  // Model\n  getInput() {\n    return this.root.element;\n  }\n  setInput(input, viewState) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.refreshPromises.forEach(promise => promise.cancel());\n      this.refreshPromises.clear();\n      this.root.element = input;\n      const viewStateContext = viewState && {\n        viewState,\n        focus: [],\n        selection: []\n      };\n      yield this._updateChildren(input, true, false, viewStateContext);\n      if (viewStateContext) {\n        this.tree.setFocus(viewStateContext.focus);\n        this.tree.setSelection(viewStateContext.selection);\n      }\n      if (viewState && typeof viewState.scrollTop === 'number') {\n        this.scrollTop = viewState.scrollTop;\n      }\n    });\n  }\n  _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.root.element === 'undefined') {\n        throw new TreeError(this.user, 'Tree input not set');\n      }\n      if (this.root.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      const node = this.getDataNode(element);\n      yield this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n      if (rerender) {\n        try {\n          this.tree.rerender(node);\n        } catch (_a) {\n          // missing nodes are fine, this could've resulted from\n          // parallel refresh calls, removing `node` altogether\n        }\n      }\n    });\n  }\n  // View\n  rerender(element) {\n    if (element === undefined || element === this.root.element) {\n      this.tree.rerender();\n      return;\n    }\n    const node = this.getDataNode(element);\n    this.tree.rerender(node);\n  }\n  // Tree\n  getNode(element = this.root.element) {\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n    return this.nodeMapper.map(node);\n  }\n  collapse(element, recursive = false) {\n    const node = this.getDataNode(element);\n    return this.tree.collapse(node === this.root ? null : node, recursive);\n  }\n  expand(element, recursive = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.root.element === 'undefined') {\n        throw new TreeError(this.user, 'Tree input not set');\n      }\n      if (this.root.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      const node = this.getDataNode(element);\n      if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n        return false;\n      }\n      if (node.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n        return false;\n      }\n      const result = this.tree.expand(node === this.root ? null : node, recursive);\n      if (node.refreshPromise) {\n        yield this.root.refreshPromise;\n        yield Event.toPromise(this._onDidRender.event);\n      }\n      return result;\n    });\n  }\n  setSelection(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setSelection(nodes, browserEvent);\n  }\n  getSelection() {\n    const nodes = this.tree.getSelection();\n    return nodes.map(n => n.element);\n  }\n  setFocus(elements, browserEvent) {\n    const nodes = elements.map(e => this.getDataNode(e));\n    this.tree.setFocus(nodes, browserEvent);\n  }\n  getFocus() {\n    const nodes = this.tree.getFocus();\n    return nodes.map(n => n.element);\n  }\n  reveal(element, relativeTop) {\n    this.tree.reveal(this.getDataNode(element), relativeTop);\n  }\n  // Tree navigation\n  getParentElement(element) {\n    const node = this.tree.getParentElement(this.getDataNode(element));\n    return node && node.element;\n  }\n  getFirstElementChild(element = this.root.element) {\n    const dataNode = this.getDataNode(element);\n    const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n    return node && node.element;\n  }\n  // Implementation\n  getDataNode(element) {\n    const node = this.nodes.get(element === this.root.element ? null : element);\n    if (!node) {\n      throw new TreeError(this.user, `Data tree node not found: ${element}`);\n    }\n    return node;\n  }\n  refreshAndRenderNode(node, recursive, viewStateContext, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.refreshNode(node, recursive, viewStateContext);\n      this.render(node, viewStateContext, options);\n    });\n  }\n  refreshNode(node, recursive, viewStateContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n        if (!result && intersects(refreshNode, node)) {\n          result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n        }\n      });\n      if (result) {\n        return result;\n      }\n      if (node !== this.root) {\n        const treeNode = this.tree.getNode(node);\n        if (treeNode.collapsed) {\n          node.hasChildren = !!this.dataSource.hasChildren(node.element);\n          node.stale = true;\n          return;\n        }\n      }\n      return this.doRefreshSubTree(node, recursive, viewStateContext);\n    });\n  }\n  doRefreshSubTree(node, recursive, viewStateContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let done;\n      node.refreshPromise = new Promise(c => done = c);\n      this.subTreeRefreshPromises.set(node, node.refreshPromise);\n      node.refreshPromise.finally(() => {\n        node.refreshPromise = undefined;\n        this.subTreeRefreshPromises.delete(node);\n      });\n      try {\n        const childrenToRefresh = yield this.doRefreshNode(node, recursive, viewStateContext);\n        node.stale = false;\n        yield Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n      } finally {\n        done();\n      }\n    });\n  }\n  doRefreshNode(node, recursive, viewStateContext) {\n    return __awaiter(this, void 0, void 0, function* () {\n      node.hasChildren = !!this.dataSource.hasChildren(node.element);\n      let childrenPromise;\n      if (!node.hasChildren) {\n        childrenPromise = Promise.resolve(Iterable.empty());\n      } else {\n        const children = this.doGetChildren(node);\n        if (isIterable(children)) {\n          childrenPromise = Promise.resolve(children);\n        } else {\n          const slowTimeout = timeout(800);\n          slowTimeout.then(() => {\n            node.slow = true;\n            this._onDidChangeNodeSlowState.fire(node);\n          }, _ => null);\n          childrenPromise = children.finally(() => slowTimeout.cancel());\n        }\n      }\n      try {\n        const children = yield childrenPromise;\n        return this.setChildren(node, children, recursive, viewStateContext);\n      } catch (err) {\n        if (node !== this.root && this.tree.hasElement(node)) {\n          this.tree.collapse(node);\n        }\n        if (isCancellationError(err)) {\n          return [];\n        }\n        throw err;\n      } finally {\n        if (node.slow) {\n          node.slow = false;\n          this._onDidChangeNodeSlowState.fire(node);\n        }\n      }\n    });\n  }\n  doGetChildren(node) {\n    let result = this.refreshPromises.get(node);\n    if (result) {\n      return result;\n    }\n    const children = this.dataSource.getChildren(node.element);\n    if (isIterable(children)) {\n      return this.processChildren(children);\n    } else {\n      result = createCancelablePromise(() => __awaiter(this, void 0, void 0, function* () {\n        return this.processChildren(yield children);\n      }));\n      this.refreshPromises.set(node, result);\n      return result.finally(() => {\n        this.refreshPromises.delete(node);\n      });\n    }\n  }\n  _onDidChangeCollapseState({\n    node,\n    deep\n  }) {\n    if (node.element === null) {\n      return;\n    }\n    if (!node.collapsed && node.element.stale) {\n      if (deep) {\n        this.collapse(node.element.element);\n      } else {\n        this.refreshAndRenderNode(node.element, false).catch(onUnexpectedError);\n      }\n    }\n  }\n  setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n    const childrenElements = [...childrenElementsIterable];\n    // perf: if the node was and still is a leaf, avoid all this hassle\n    if (node.children.length === 0 && childrenElements.length === 0) {\n      return [];\n    }\n    const nodesToForget = new Map();\n    const childrenTreeNodesById = new Map();\n    for (const child of node.children) {\n      nodesToForget.set(child.element, child);\n      if (this.identityProvider) {\n        const collapsed = this.tree.isCollapsed(child);\n        childrenTreeNodesById.set(child.id, {\n          node: child,\n          collapsed\n        });\n      }\n    }\n    const childrenToRefresh = [];\n    const children = childrenElements.map(element => {\n      const hasChildren = !!this.dataSource.hasChildren(element);\n      if (!this.identityProvider) {\n        const asyncDataTreeNode = createAsyncDataTreeNode({\n          element,\n          parent: node,\n          hasChildren\n        });\n        if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n          asyncDataTreeNode.collapsedByDefault = false;\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const id = this.identityProvider.getId(element).toString();\n      const result = childrenTreeNodesById.get(id);\n      if (result) {\n        const asyncDataTreeNode = result.node;\n        nodesToForget.delete(asyncDataTreeNode.element);\n        this.nodes.delete(asyncDataTreeNode.element);\n        this.nodes.set(element, asyncDataTreeNode);\n        asyncDataTreeNode.element = element;\n        asyncDataTreeNode.hasChildren = hasChildren;\n        if (recursive) {\n          if (result.collapsed) {\n            asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n            asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n            asyncDataTreeNode.stale = true;\n          } else {\n            childrenToRefresh.push(asyncDataTreeNode);\n          }\n        } else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n          asyncDataTreeNode.collapsedByDefault = false;\n          childrenToRefresh.push(asyncDataTreeNode);\n        }\n        return asyncDataTreeNode;\n      }\n      const childAsyncDataTreeNode = createAsyncDataTreeNode({\n        element,\n        parent: node,\n        id,\n        hasChildren\n      });\n      if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n        viewStateContext.focus.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n        viewStateContext.selection.push(childAsyncDataTreeNode);\n      }\n      if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      } else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n        childAsyncDataTreeNode.collapsedByDefault = false;\n        childrenToRefresh.push(childAsyncDataTreeNode);\n      }\n      return childAsyncDataTreeNode;\n    });\n    for (const node of nodesToForget.values()) {\n      dfs(node, node => this.nodes.delete(node.element));\n    }\n    for (const child of children) {\n      this.nodes.set(child.element, child);\n    }\n    node.children.splice(0, node.children.length, ...children);\n    // TODO@joao this doesn't take filter into account\n    if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n      children[0].collapsedByDefault = false;\n      childrenToRefresh.push(children[0]);\n    }\n    return childrenToRefresh;\n  }\n  render(node, viewStateContext, options) {\n    const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n    const objectTreeOptions = options && Object.assign(Object.assign({}, options), {\n      diffIdentityProvider: options.diffIdentityProvider && {\n        getId(node) {\n          return options.diffIdentityProvider.getId(node.element);\n        }\n      }\n    });\n    this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n    if (node !== this.root) {\n      this.tree.setCollapsible(node, node.hasChildren);\n    }\n    this._onDidRender.fire();\n  }\n  asTreeElement(node, viewStateContext) {\n    if (node.stale) {\n      return {\n        element: node,\n        collapsible: node.hasChildren,\n        collapsed: true\n      };\n    }\n    let collapsed;\n    if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n      collapsed = false;\n    } else {\n      collapsed = node.collapsedByDefault;\n    }\n    node.collapsedByDefault = undefined;\n    return {\n      element: node,\n      children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n      collapsible: node.hasChildren,\n      collapsed\n    };\n  }\n  processChildren(children) {\n    if (this.sorter) {\n      children = [...children].sort(this.sorter.compare.bind(this.sorter));\n    }\n    return children;\n  }\n  dispose() {\n    this.disposables.dispose();\n    this.tree.dispose();\n  }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n  get element() {\n    return {\n      elements: this.node.element.elements.map(e => e.element),\n      incompressible: this.node.element.incompressible\n    };\n  }\n  get children() {\n    return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n  }\n  get depth() {\n    return this.node.depth;\n  }\n  get visibleChildrenCount() {\n    return this.node.visibleChildrenCount;\n  }\n  get visibleChildIndex() {\n    return this.node.visibleChildIndex;\n  }\n  get collapsible() {\n    return this.node.collapsible;\n  }\n  get collapsed() {\n    return this.node.collapsed;\n  }\n  get visible() {\n    return this.node.visible;\n  }\n  get filterData() {\n    return this.node.filterData;\n  }\n  constructor(node) {\n    this.node = node;\n  }\n}\nclass CompressibleAsyncDataTreeRenderer {\n  constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n    this.renderer = renderer;\n    this.nodeMapper = nodeMapper;\n    this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n    this.onDidChangeTwistieState = onDidChangeTwistieState;\n    this.renderedNodes = new Map();\n    this.disposables = [];\n    this.templateId = renderer.templateId;\n  }\n  renderTemplate(container) {\n    const templateData = this.renderer.renderTemplate(container);\n    return {\n      templateData\n    };\n  }\n  renderElement(node, index, templateData, height) {\n    this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  renderCompressedElements(node, index, templateData, height) {\n    this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  renderTwistie(element, twistieElement) {\n    if (element.slow) {\n      twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return true;\n    } else {\n      twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n      return false;\n    }\n  }\n  disposeElement(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n  }\n  disposeCompressedElements(node, index, templateData, height) {\n    var _a, _b;\n    (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n  }\n  disposeTemplate(templateData) {\n    this.renderer.disposeTemplate(templateData.templateData);\n  }\n  dispose() {\n    this.renderedNodes.clear();\n    this.disposables = dispose(this.disposables);\n  }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n  const objectTreeOptions = options && asObjectTreeOptions(options);\n  return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), {\n    keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), {\n      getCompressedNodeKeyboardNavigationLabel(els) {\n        return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n      }\n    })\n  });\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n    super(user, container, virtualDelegate, renderers, dataSource, options);\n    this.compressionDelegate = compressionDelegate;\n    this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n    this.filter = options.filter;\n  }\n  createTree(user, container, delegate, renderers, options) {\n    const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n    const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n    const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n    return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n  }\n  asTreeElement(node, viewStateContext) {\n    return Object.assign({\n      incompressible: this.compressionDelegate.isIncompressible(node.element)\n    }, super.asTreeElement(node, viewStateContext));\n  }\n  updateOptions(options = {}) {\n    this.tree.updateOptions(options);\n  }\n  render(node, viewStateContext) {\n    if (!this.identityProvider) {\n      return super.render(node, viewStateContext);\n    }\n    // Preserve traits across compressions. Hacky but does the trick.\n    // This is hard to fix properly since it requires rewriting the traits\n    // across trees and lists. Let's just keep it this way for now.\n    const getId = element => this.identityProvider.getId(element).toString();\n    const getUncompressedIds = nodes => {\n      const result = new Set();\n      for (const node of nodes) {\n        const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n        if (!compressedNode.element) {\n          continue;\n        }\n        for (const node of compressedNode.element.elements) {\n          result.add(getId(node.element));\n        }\n      }\n      return result;\n    };\n    const oldSelection = getUncompressedIds(this.tree.getSelection());\n    const oldFocus = getUncompressedIds(this.tree.getFocus());\n    super.render(node, viewStateContext);\n    const selection = this.getSelection();\n    let didChangeSelection = false;\n    const focus = this.getFocus();\n    let didChangeFocus = false;\n    const visit = node => {\n      const compressedNode = node.element;\n      if (compressedNode) {\n        for (let i = 0; i < compressedNode.elements.length; i++) {\n          const id = getId(compressedNode.elements[i].element);\n          const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n          // github.com/microsoft/vscode/issues/85938\n          if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n            selection.push(element);\n            didChangeSelection = true;\n          }\n          if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n            focus.push(element);\n            didChangeFocus = true;\n          }\n        }\n      }\n      node.children.forEach(visit);\n    };\n    visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n    if (didChangeSelection) {\n      this.setSelection(selection);\n    }\n    if (didChangeFocus) {\n      this.setFocus(focus);\n    }\n  }\n  // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n  // and we have to filter everything beforehand\n  // Related to #85193 and #85835\n  processChildren(children) {\n    if (this.filter) {\n      children = Iterable.filter(children, e => {\n        const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n        const visibility = getVisibility(result);\n        if (visibility === 2 /* TreeVisibility.Recurse */) {\n          throw new Error('Recursive tree visibility not supported in async data compressed trees');\n        }\n        return visibility === 1 /* TreeVisibility.Visible */;\n      });\n    }\n\n    return super.processChildren(children);\n  }\n}\nfunction getVisibility(filterResult) {\n  if (typeof filterResult === 'boolean') {\n    return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n  } else if (isFilterResult(filterResult)) {\n    return getVisibleState(filterResult.visibility);\n  } else {\n    return getVisibleState(filterResult);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ElementsDragAndDropData","ComposedTreeDelegate","getVisibleState","isFilterResult","CompressibleObjectTree","ObjectTree","TreeError","WeakMapper","createCancelablePromise","Promises","timeout","Codicon","ThemeIcon","isCancellationError","onUnexpectedError","Emitter","Event","Iterable","DisposableStore","dispose","isIterable","createAsyncDataTreeNode","props","Object","assign","children","refreshPromise","undefined","stale","slow","collapsedByDefault","isAncestor","ancestor","descendant","parent","intersects","node","other","AsyncDataTreeNodeWrapper","element","map","depth","visibleChildrenCount","visibleChildIndex","collapsible","collapsed","visible","filterData","constructor","AsyncDataTreeRenderer","renderer","nodeMapper","onDidChangeTwistieState","renderedNodes","Map","templateId","renderTemplate","container","templateData","renderElement","index","height","renderTwistie","twistieElement","classList","add","asClassNameArray","treeItemLoading","remove","disposeElement","_a","_b","call","disposeTemplate","clear","asTreeEvent","browserEvent","elements","asTreeMouseEvent","target","AsyncDataTreeElementsDragAndDropData","data","asAsyncDataTreeDragAndDropData","AsyncDataTreeNodeListDragAndDrop","dnd","getDragURI","getDragLabel","nodes","originalEvent","onDragStart","onDragOver","targetNode","targetIndex","raw","drop","onDragEnd","asObjectTreeOptions","options","collapseByDefault","identityProvider","getId","el","multipleSelectionController","isSelectionSingleChangeEvent","isSelectionRangeChangeEvent","accessibilityProvider","getPosInSet","getSetSize","getRole","isChecked","getAriaLabel","getWidgetAriaLabel","getWidgetRole","getAriaLevel","getActiveDescendantId","filter","parentVisibility","keyboardNavigationLabelProvider","getKeyboardNavigationLabel","sorter","expandOnlyOnTwistieClick","defaultFindVisibility","hasChildren","dfs","fn","forEach","child","AsyncDataTree","onDidScroll","tree","onDidChangeFocus","onDidChangeSelection","onMouseDblClick","onPointer","onDidFocus","onDidChangeModel","onDidChangeCollapseState","onDidChangeFindOpenState","onDidDispose","user","delegate","renderers","dataSource","subTreeRefreshPromises","refreshPromises","_onDidRender","_onDidChangeNodeSlowState","disposables","autoExpandSingleChildren","createTree","onDidChangeFindMode","root","id","set","_onDidChangeCollapseState","objectTreeDelegate","objectTreeRenderers","r","event","objectTreeOptions","updateOptions","getHTMLElement","scrollTop","scrollHeight","renderHeight","domFocus","layout","width","style","styles","getInput","setInput","input","viewState","promise","cancel","viewStateContext","focus","selection","_updateChildren","setFocus","setSelection","recursive","rerender","toPromise","getDataNode","refreshAndRenderNode","getNode","dataNode","collapse","expand","hasElement","isCollapsible","isCollapsed","getSelection","n","getFocus","reveal","relativeTop","getParentElement","getFirstElementChild","get","refreshNode","render","treeNode","doRefreshSubTree","c","finally","delete","childrenToRefresh","doRefreshNode","settled","childrenPromise","empty","doGetChildren","slowTimeout","fire","_","setChildren","err","getChildren","processChildren","deep","catch","childrenElementsIterable","childrenElements","length","nodesToForget","childrenTreeNodesById","asyncDataTreeNode","push","toString","splice","childAsyncDataTreeNode","indexOf","expanded","values","asTreeElement","diffIdentityProvider","setCollapsible","sort","compare","bind","CompressibleAsyncDataTreeNodeWrapper","incompressible","CompressibleAsyncDataTreeRenderer","compressibleNodeMapperProvider","renderCompressedElements","disposeCompressedElements","asCompressibleObjectTreeOptions","getCompressedNodeKeyboardNavigationLabel","els","CompressibleAsyncDataTree","virtualDelegate","compressionDelegate","compressibleNodeMapper","isIncompressible","getUncompressedIds","Set","compressedNode","getCompressedTreeNode","oldSelection","oldFocus","didChangeSelection","didChangeFocus","visit","i","has","visibility","getVisibility","Error","filterResult"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/asyncDataTree.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ElementsDragAndDropData } from '../list/listView.js';\nimport { ComposedTreeDelegate } from './abstractTree.js';\nimport { getVisibleState, isFilterResult } from './indexTreeModel.js';\nimport { CompressibleObjectTree, ObjectTree } from './objectTree.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { createCancelablePromise, Promises, timeout } from '../../../common/async.js';\nimport { Codicon } from '../../../common/codicons.js';\nimport { ThemeIcon } from '../../../common/themables.js';\nimport { isCancellationError, onUnexpectedError } from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nimport { DisposableStore, dispose } from '../../../common/lifecycle.js';\nimport { isIterable } from '../../../common/types.js';\nfunction createAsyncDataTreeNode(props) {\n    return Object.assign(Object.assign({}, props), { children: [], refreshPromise: undefined, stale: true, slow: false, collapsedByDefault: undefined });\n}\nfunction isAncestor(ancestor, descendant) {\n    if (!descendant.parent) {\n        return false;\n    }\n    else if (descendant.parent === ancestor) {\n        return true;\n    }\n    else {\n        return isAncestor(ancestor, descendant.parent);\n    }\n}\nfunction intersects(node, other) {\n    return node === other || isAncestor(node, other) || isAncestor(other, node);\n}\nclass AsyncDataTreeNodeWrapper {\n    get element() { return this.node.element.element; }\n    get children() { return this.node.children.map(node => new AsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass AsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n    }\n}\nfunction asTreeEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        elements: e.elements.map(e => e.element)\n    };\n}\nfunction asTreeMouseEvent(e) {\n    return {\n        browserEvent: e.browserEvent,\n        element: e.element && e.element.element,\n        target: e.target\n    };\n}\nclass AsyncDataTreeElementsDragAndDropData extends ElementsDragAndDropData {\n    constructor(data) {\n        super(data.elements.map(node => node.element));\n        this.data = data;\n    }\n}\nfunction asAsyncDataTreeDragAndDropData(data) {\n    if (data instanceof ElementsDragAndDropData) {\n        return new AsyncDataTreeElementsDragAndDropData(data);\n    }\n    return data;\n}\nclass AsyncDataTreeNodeListDragAndDrop {\n    constructor(dnd) {\n        this.dnd = dnd;\n    }\n    getDragURI(node) {\n        return this.dnd.getDragURI(node.element);\n    }\n    getDragLabel(nodes, originalEvent) {\n        if (this.dnd.getDragLabel) {\n            return this.dnd.getDragLabel(nodes.map(node => node.element), originalEvent);\n        }\n        return undefined;\n    }\n    onDragStart(data, originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, asAsyncDataTreeDragAndDropData(data), originalEvent);\n    }\n    onDragOver(data, targetNode, targetIndex, originalEvent, raw = true) {\n        return this.dnd.onDragOver(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    drop(data, targetNode, targetIndex, originalEvent) {\n        this.dnd.drop(asAsyncDataTreeDragAndDropData(data), targetNode && targetNode.element, targetIndex, originalEvent);\n    }\n    onDragEnd(originalEvent) {\n        var _a, _b;\n        (_b = (_a = this.dnd).onDragEnd) === null || _b === void 0 ? void 0 : _b.call(_a, originalEvent);\n    }\n    dispose() {\n        this.dnd.dispose();\n    }\n}\nfunction asObjectTreeOptions(options) {\n    return options && Object.assign(Object.assign({}, options), { collapseByDefault: true, identityProvider: options.identityProvider && {\n            getId(el) {\n                return options.identityProvider.getId(el.element);\n            }\n        }, dnd: options.dnd && new AsyncDataTreeNodeListDragAndDrop(options.dnd), multipleSelectionController: options.multipleSelectionController && {\n            isSelectionSingleChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionSingleChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            },\n            isSelectionRangeChangeEvent(e) {\n                return options.multipleSelectionController.isSelectionRangeChangeEvent(Object.assign(Object.assign({}, e), { element: e.element }));\n            }\n        }, accessibilityProvider: options.accessibilityProvider && Object.assign(Object.assign({}, options.accessibilityProvider), { getPosInSet: undefined, getSetSize: undefined, getRole: options.accessibilityProvider.getRole ? (el) => {\n                return options.accessibilityProvider.getRole(el.element);\n            } : () => 'treeitem', isChecked: options.accessibilityProvider.isChecked ? (e) => {\n                var _a;\n                return !!((_a = options.accessibilityProvider) === null || _a === void 0 ? void 0 : _a.isChecked(e.element));\n            } : undefined, getAriaLabel(e) {\n                return options.accessibilityProvider.getAriaLabel(e.element);\n            },\n            getWidgetAriaLabel() {\n                return options.accessibilityProvider.getWidgetAriaLabel();\n            }, getWidgetRole: options.accessibilityProvider.getWidgetRole ? () => options.accessibilityProvider.getWidgetRole() : () => 'tree', getAriaLevel: options.accessibilityProvider.getAriaLevel && (node => {\n                return options.accessibilityProvider.getAriaLevel(node.element);\n            }), getActiveDescendantId: options.accessibilityProvider.getActiveDescendantId && (node => {\n                return options.accessibilityProvider.getActiveDescendantId(node.element);\n            }) }), filter: options.filter && {\n            filter(e, parentVisibility) {\n                return options.filter.filter(e.element, parentVisibility);\n            }\n        }, keyboardNavigationLabelProvider: options.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, options.keyboardNavigationLabelProvider), { getKeyboardNavigationLabel(e) {\n                return options.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e.element);\n            } }), sorter: undefined, expandOnlyOnTwistieClick: typeof options.expandOnlyOnTwistieClick === 'undefined' ? undefined : (typeof options.expandOnlyOnTwistieClick !== 'function' ? options.expandOnlyOnTwistieClick : (e => options.expandOnlyOnTwistieClick(e.element))), defaultFindVisibility: e => {\n            if (e.hasChildren && e.stale) {\n                return 1 /* TreeVisibility.Visible */;\n            }\n            else if (typeof options.defaultFindVisibility === 'number') {\n                return options.defaultFindVisibility;\n            }\n            else if (typeof options.defaultFindVisibility === 'undefined') {\n                return 2 /* TreeVisibility.Recurse */;\n            }\n            else {\n                return options.defaultFindVisibility(e.element);\n            }\n        } });\n}\nfunction dfs(node, fn) {\n    fn(node);\n    node.children.forEach(child => dfs(child, fn));\n}\nexport class AsyncDataTree {\n    get onDidScroll() { return this.tree.onDidScroll; }\n    get onDidChangeFocus() { return Event.map(this.tree.onDidChangeFocus, asTreeEvent); }\n    get onDidChangeSelection() { return Event.map(this.tree.onDidChangeSelection, asTreeEvent); }\n    get onMouseDblClick() { return Event.map(this.tree.onMouseDblClick, asTreeMouseEvent); }\n    get onPointer() { return Event.map(this.tree.onPointer, asTreeMouseEvent); }\n    get onDidFocus() { return this.tree.onDidFocus; }\n    /**\n     * To be used internally only!\n     * @deprecated\n     */\n    get onDidChangeModel() { return this.tree.onDidChangeModel; }\n    get onDidChangeCollapseState() { return this.tree.onDidChangeCollapseState; }\n    get onDidChangeFindOpenState() { return this.tree.onDidChangeFindOpenState; }\n    get onDidDispose() { return this.tree.onDidDispose; }\n    constructor(user, container, delegate, renderers, dataSource, options = {}) {\n        this.user = user;\n        this.dataSource = dataSource;\n        this.nodes = new Map();\n        this.subTreeRefreshPromises = new Map();\n        this.refreshPromises = new Map();\n        this._onDidRender = new Emitter();\n        this._onDidChangeNodeSlowState = new Emitter();\n        this.nodeMapper = new WeakMapper(node => new AsyncDataTreeNodeWrapper(node));\n        this.disposables = new DisposableStore();\n        this.identityProvider = options.identityProvider;\n        this.autoExpandSingleChildren = typeof options.autoExpandSingleChildren === 'undefined' ? false : options.autoExpandSingleChildren;\n        this.sorter = options.sorter;\n        this.collapseByDefault = options.collapseByDefault;\n        this.tree = this.createTree(user, container, delegate, renderers, options);\n        this.onDidChangeFindMode = this.tree.onDidChangeFindMode;\n        this.root = createAsyncDataTreeNode({\n            element: undefined,\n            parent: null,\n            hasChildren: true\n        });\n        if (this.identityProvider) {\n            this.root = Object.assign(Object.assign({}, this.root), { id: null });\n        }\n        this.nodes.set(null, this.root);\n        this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new AsyncDataTreeRenderer(r, this.nodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asObjectTreeOptions(options) || {};\n        return new ObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    // Widget\n    getHTMLElement() {\n        return this.tree.getHTMLElement();\n    }\n    get scrollTop() {\n        return this.tree.scrollTop;\n    }\n    set scrollTop(scrollTop) {\n        this.tree.scrollTop = scrollTop;\n    }\n    get scrollHeight() {\n        return this.tree.scrollHeight;\n    }\n    get renderHeight() {\n        return this.tree.renderHeight;\n    }\n    domFocus() {\n        this.tree.domFocus();\n    }\n    layout(height, width) {\n        this.tree.layout(height, width);\n    }\n    style(styles) {\n        this.tree.style(styles);\n    }\n    // Model\n    getInput() {\n        return this.root.element;\n    }\n    setInput(input, viewState) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.refreshPromises.forEach(promise => promise.cancel());\n            this.refreshPromises.clear();\n            this.root.element = input;\n            const viewStateContext = viewState && { viewState, focus: [], selection: [] };\n            yield this._updateChildren(input, true, false, viewStateContext);\n            if (viewStateContext) {\n                this.tree.setFocus(viewStateContext.focus);\n                this.tree.setSelection(viewStateContext.selection);\n            }\n            if (viewState && typeof viewState.scrollTop === 'number') {\n                this.scrollTop = viewState.scrollTop;\n            }\n        });\n    }\n    _updateChildren(element = this.root.element, recursive = true, rerender = false, viewStateContext, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.root.element === 'undefined') {\n                throw new TreeError(this.user, 'Tree input not set');\n            }\n            if (this.root.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            const node = this.getDataNode(element);\n            yield this.refreshAndRenderNode(node, recursive, viewStateContext, options);\n            if (rerender) {\n                try {\n                    this.tree.rerender(node);\n                }\n                catch (_a) {\n                    // missing nodes are fine, this could've resulted from\n                    // parallel refresh calls, removing `node` altogether\n                }\n            }\n        });\n    }\n    // View\n    rerender(element) {\n        if (element === undefined || element === this.root.element) {\n            this.tree.rerender();\n            return;\n        }\n        const node = this.getDataNode(element);\n        this.tree.rerender(node);\n    }\n    // Tree\n    getNode(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getNode(dataNode === this.root ? null : dataNode);\n        return this.nodeMapper.map(node);\n    }\n    collapse(element, recursive = false) {\n        const node = this.getDataNode(element);\n        return this.tree.collapse(node === this.root ? null : node, recursive);\n    }\n    expand(element, recursive = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.root.element === 'undefined') {\n                throw new TreeError(this.user, 'Tree input not set');\n            }\n            if (this.root.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            const node = this.getDataNode(element);\n            if (this.tree.hasElement(node) && !this.tree.isCollapsible(node)) {\n                return false;\n            }\n            if (node.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            if (node !== this.root && !node.refreshPromise && !this.tree.isCollapsed(node)) {\n                return false;\n            }\n            const result = this.tree.expand(node === this.root ? null : node, recursive);\n            if (node.refreshPromise) {\n                yield this.root.refreshPromise;\n                yield Event.toPromise(this._onDidRender.event);\n            }\n            return result;\n        });\n    }\n    setSelection(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setSelection(nodes, browserEvent);\n    }\n    getSelection() {\n        const nodes = this.tree.getSelection();\n        return nodes.map(n => n.element);\n    }\n    setFocus(elements, browserEvent) {\n        const nodes = elements.map(e => this.getDataNode(e));\n        this.tree.setFocus(nodes, browserEvent);\n    }\n    getFocus() {\n        const nodes = this.tree.getFocus();\n        return nodes.map(n => n.element);\n    }\n    reveal(element, relativeTop) {\n        this.tree.reveal(this.getDataNode(element), relativeTop);\n    }\n    // Tree navigation\n    getParentElement(element) {\n        const node = this.tree.getParentElement(this.getDataNode(element));\n        return (node && node.element);\n    }\n    getFirstElementChild(element = this.root.element) {\n        const dataNode = this.getDataNode(element);\n        const node = this.tree.getFirstElementChild(dataNode === this.root ? null : dataNode);\n        return (node && node.element);\n    }\n    // Implementation\n    getDataNode(element) {\n        const node = this.nodes.get((element === this.root.element ? null : element));\n        if (!node) {\n            throw new TreeError(this.user, `Data tree node not found: ${element}`);\n        }\n        return node;\n    }\n    refreshAndRenderNode(node, recursive, viewStateContext, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.refreshNode(node, recursive, viewStateContext);\n            this.render(node, viewStateContext, options);\n        });\n    }\n    refreshNode(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result;\n            this.subTreeRefreshPromises.forEach((refreshPromise, refreshNode) => {\n                if (!result && intersects(refreshNode, node)) {\n                    result = refreshPromise.then(() => this.refreshNode(node, recursive, viewStateContext));\n                }\n            });\n            if (result) {\n                return result;\n            }\n            if (node !== this.root) {\n                const treeNode = this.tree.getNode(node);\n                if (treeNode.collapsed) {\n                    node.hasChildren = !!this.dataSource.hasChildren(node.element);\n                    node.stale = true;\n                    return;\n                }\n            }\n            return this.doRefreshSubTree(node, recursive, viewStateContext);\n        });\n    }\n    doRefreshSubTree(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let done;\n            node.refreshPromise = new Promise(c => done = c);\n            this.subTreeRefreshPromises.set(node, node.refreshPromise);\n            node.refreshPromise.finally(() => {\n                node.refreshPromise = undefined;\n                this.subTreeRefreshPromises.delete(node);\n            });\n            try {\n                const childrenToRefresh = yield this.doRefreshNode(node, recursive, viewStateContext);\n                node.stale = false;\n                yield Promises.settled(childrenToRefresh.map(child => this.doRefreshSubTree(child, recursive, viewStateContext)));\n            }\n            finally {\n                done();\n            }\n        });\n    }\n    doRefreshNode(node, recursive, viewStateContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            node.hasChildren = !!this.dataSource.hasChildren(node.element);\n            let childrenPromise;\n            if (!node.hasChildren) {\n                childrenPromise = Promise.resolve(Iterable.empty());\n            }\n            else {\n                const children = this.doGetChildren(node);\n                if (isIterable(children)) {\n                    childrenPromise = Promise.resolve(children);\n                }\n                else {\n                    const slowTimeout = timeout(800);\n                    slowTimeout.then(() => {\n                        node.slow = true;\n                        this._onDidChangeNodeSlowState.fire(node);\n                    }, _ => null);\n                    childrenPromise = children.finally(() => slowTimeout.cancel());\n                }\n            }\n            try {\n                const children = yield childrenPromise;\n                return this.setChildren(node, children, recursive, viewStateContext);\n            }\n            catch (err) {\n                if (node !== this.root && this.tree.hasElement(node)) {\n                    this.tree.collapse(node);\n                }\n                if (isCancellationError(err)) {\n                    return [];\n                }\n                throw err;\n            }\n            finally {\n                if (node.slow) {\n                    node.slow = false;\n                    this._onDidChangeNodeSlowState.fire(node);\n                }\n            }\n        });\n    }\n    doGetChildren(node) {\n        let result = this.refreshPromises.get(node);\n        if (result) {\n            return result;\n        }\n        const children = this.dataSource.getChildren(node.element);\n        if (isIterable(children)) {\n            return this.processChildren(children);\n        }\n        else {\n            result = createCancelablePromise(() => __awaiter(this, void 0, void 0, function* () { return this.processChildren(yield children); }));\n            this.refreshPromises.set(node, result);\n            return result.finally(() => { this.refreshPromises.delete(node); });\n        }\n    }\n    _onDidChangeCollapseState({ node, deep }) {\n        if (node.element === null) {\n            return;\n        }\n        if (!node.collapsed && node.element.stale) {\n            if (deep) {\n                this.collapse(node.element.element);\n            }\n            else {\n                this.refreshAndRenderNode(node.element, false)\n                    .catch(onUnexpectedError);\n            }\n        }\n    }\n    setChildren(node, childrenElementsIterable, recursive, viewStateContext) {\n        const childrenElements = [...childrenElementsIterable];\n        // perf: if the node was and still is a leaf, avoid all this hassle\n        if (node.children.length === 0 && childrenElements.length === 0) {\n            return [];\n        }\n        const nodesToForget = new Map();\n        const childrenTreeNodesById = new Map();\n        for (const child of node.children) {\n            nodesToForget.set(child.element, child);\n            if (this.identityProvider) {\n                const collapsed = this.tree.isCollapsed(child);\n                childrenTreeNodesById.set(child.id, { node: child, collapsed });\n            }\n        }\n        const childrenToRefresh = [];\n        const children = childrenElements.map(element => {\n            const hasChildren = !!this.dataSource.hasChildren(element);\n            if (!this.identityProvider) {\n                const asyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, hasChildren });\n                if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                    asyncDataTreeNode.collapsedByDefault = false;\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const id = this.identityProvider.getId(element).toString();\n            const result = childrenTreeNodesById.get(id);\n            if (result) {\n                const asyncDataTreeNode = result.node;\n                nodesToForget.delete(asyncDataTreeNode.element);\n                this.nodes.delete(asyncDataTreeNode.element);\n                this.nodes.set(element, asyncDataTreeNode);\n                asyncDataTreeNode.element = element;\n                asyncDataTreeNode.hasChildren = hasChildren;\n                if (recursive) {\n                    if (result.collapsed) {\n                        asyncDataTreeNode.children.forEach(node => dfs(node, node => this.nodes.delete(node.element)));\n                        asyncDataTreeNode.children.splice(0, asyncDataTreeNode.children.length);\n                        asyncDataTreeNode.stale = true;\n                    }\n                    else {\n                        childrenToRefresh.push(asyncDataTreeNode);\n                    }\n                }\n                else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                    asyncDataTreeNode.collapsedByDefault = false;\n                    childrenToRefresh.push(asyncDataTreeNode);\n                }\n                return asyncDataTreeNode;\n            }\n            const childAsyncDataTreeNode = createAsyncDataTreeNode({ element, parent: node, id, hasChildren });\n            if (viewStateContext && viewStateContext.viewState.focus && viewStateContext.viewState.focus.indexOf(id) > -1) {\n                viewStateContext.focus.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.selection && viewStateContext.viewState.selection.indexOf(id) > -1) {\n                viewStateContext.selection.push(childAsyncDataTreeNode);\n            }\n            if (viewStateContext && viewStateContext.viewState.expanded && viewStateContext.viewState.expanded.indexOf(id) > -1) {\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            else if (hasChildren && this.collapseByDefault && !this.collapseByDefault(element)) {\n                childAsyncDataTreeNode.collapsedByDefault = false;\n                childrenToRefresh.push(childAsyncDataTreeNode);\n            }\n            return childAsyncDataTreeNode;\n        });\n        for (const node of nodesToForget.values()) {\n            dfs(node, node => this.nodes.delete(node.element));\n        }\n        for (const child of children) {\n            this.nodes.set(child.element, child);\n        }\n        node.children.splice(0, node.children.length, ...children);\n        // TODO@joao this doesn't take filter into account\n        if (node !== this.root && this.autoExpandSingleChildren && children.length === 1 && childrenToRefresh.length === 0) {\n            children[0].collapsedByDefault = false;\n            childrenToRefresh.push(children[0]);\n        }\n        return childrenToRefresh;\n    }\n    render(node, viewStateContext, options) {\n        const children = node.children.map(node => this.asTreeElement(node, viewStateContext));\n        const objectTreeOptions = options && Object.assign(Object.assign({}, options), { diffIdentityProvider: options.diffIdentityProvider && {\n                getId(node) {\n                    return options.diffIdentityProvider.getId(node.element);\n                }\n            } });\n        this.tree.setChildren(node === this.root ? null : node, children, objectTreeOptions);\n        if (node !== this.root) {\n            this.tree.setCollapsible(node, node.hasChildren);\n        }\n        this._onDidRender.fire();\n    }\n    asTreeElement(node, viewStateContext) {\n        if (node.stale) {\n            return {\n                element: node,\n                collapsible: node.hasChildren,\n                collapsed: true\n            };\n        }\n        let collapsed;\n        if (viewStateContext && viewStateContext.viewState.expanded && node.id && viewStateContext.viewState.expanded.indexOf(node.id) > -1) {\n            collapsed = false;\n        }\n        else {\n            collapsed = node.collapsedByDefault;\n        }\n        node.collapsedByDefault = undefined;\n        return {\n            element: node,\n            children: node.hasChildren ? Iterable.map(node.children, child => this.asTreeElement(child, viewStateContext)) : [],\n            collapsible: node.hasChildren,\n            collapsed\n        };\n    }\n    processChildren(children) {\n        if (this.sorter) {\n            children = [...children].sort(this.sorter.compare.bind(this.sorter));\n        }\n        return children;\n    }\n    dispose() {\n        this.disposables.dispose();\n        this.tree.dispose();\n    }\n}\nclass CompressibleAsyncDataTreeNodeWrapper {\n    get element() {\n        return {\n            elements: this.node.element.elements.map(e => e.element),\n            incompressible: this.node.element.incompressible\n        };\n    }\n    get children() { return this.node.children.map(node => new CompressibleAsyncDataTreeNodeWrapper(node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(node) {\n        this.node = node;\n    }\n}\nclass CompressibleAsyncDataTreeRenderer {\n    constructor(renderer, nodeMapper, compressibleNodeMapperProvider, onDidChangeTwistieState) {\n        this.renderer = renderer;\n        this.nodeMapper = nodeMapper;\n        this.compressibleNodeMapperProvider = compressibleNodeMapperProvider;\n        this.onDidChangeTwistieState = onDidChangeTwistieState;\n        this.renderedNodes = new Map();\n        this.disposables = [];\n        this.templateId = renderer.templateId;\n    }\n    renderTemplate(container) {\n        const templateData = this.renderer.renderTemplate(container);\n        return { templateData };\n    }\n    renderElement(node, index, templateData, height) {\n        this.renderer.renderElement(this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    renderCompressedElements(node, index, templateData, height) {\n        this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    renderTwistie(element, twistieElement) {\n        if (element.slow) {\n            twistieElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return true;\n        }\n        else {\n            twistieElement.classList.remove(...ThemeIcon.asClassNameArray(Codicon.treeItemLoading));\n            return false;\n        }\n    }\n    disposeElement(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeElement) === null || _b === void 0 ? void 0 : _b.call(_a, this.nodeMapper.map(node), index, templateData.templateData, height);\n    }\n    disposeCompressedElements(node, index, templateData, height) {\n        var _a, _b;\n        (_b = (_a = this.renderer).disposeCompressedElements) === null || _b === void 0 ? void 0 : _b.call(_a, this.compressibleNodeMapperProvider().map(node), index, templateData.templateData, height);\n    }\n    disposeTemplate(templateData) {\n        this.renderer.disposeTemplate(templateData.templateData);\n    }\n    dispose() {\n        this.renderedNodes.clear();\n        this.disposables = dispose(this.disposables);\n    }\n}\nfunction asCompressibleObjectTreeOptions(options) {\n    const objectTreeOptions = options && asObjectTreeOptions(options);\n    return objectTreeOptions && Object.assign(Object.assign({}, objectTreeOptions), { keyboardNavigationLabelProvider: objectTreeOptions.keyboardNavigationLabelProvider && Object.assign(Object.assign({}, objectTreeOptions.keyboardNavigationLabelProvider), { getCompressedNodeKeyboardNavigationLabel(els) {\n                return options.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(els.map(e => e.element));\n            } }) });\n}\nexport class CompressibleAsyncDataTree extends AsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options = {}) {\n        super(user, container, virtualDelegate, renderers, dataSource, options);\n        this.compressionDelegate = compressionDelegate;\n        this.compressibleNodeMapper = new WeakMapper(node => new CompressibleAsyncDataTreeNodeWrapper(node));\n        this.filter = options.filter;\n    }\n    createTree(user, container, delegate, renderers, options) {\n        const objectTreeDelegate = new ComposedTreeDelegate(delegate);\n        const objectTreeRenderers = renderers.map(r => new CompressibleAsyncDataTreeRenderer(r, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event));\n        const objectTreeOptions = asCompressibleObjectTreeOptions(options) || {};\n        return new CompressibleObjectTree(user, container, objectTreeDelegate, objectTreeRenderers, objectTreeOptions);\n    }\n    asTreeElement(node, viewStateContext) {\n        return Object.assign({ incompressible: this.compressionDelegate.isIncompressible(node.element) }, super.asTreeElement(node, viewStateContext));\n    }\n    updateOptions(options = {}) {\n        this.tree.updateOptions(options);\n    }\n    render(node, viewStateContext) {\n        if (!this.identityProvider) {\n            return super.render(node, viewStateContext);\n        }\n        // Preserve traits across compressions. Hacky but does the trick.\n        // This is hard to fix properly since it requires rewriting the traits\n        // across trees and lists. Let's just keep it this way for now.\n        const getId = (element) => this.identityProvider.getId(element).toString();\n        const getUncompressedIds = (nodes) => {\n            const result = new Set();\n            for (const node of nodes) {\n                const compressedNode = this.tree.getCompressedTreeNode(node === this.root ? null : node);\n                if (!compressedNode.element) {\n                    continue;\n                }\n                for (const node of compressedNode.element.elements) {\n                    result.add(getId(node.element));\n                }\n            }\n            return result;\n        };\n        const oldSelection = getUncompressedIds(this.tree.getSelection());\n        const oldFocus = getUncompressedIds(this.tree.getFocus());\n        super.render(node, viewStateContext);\n        const selection = this.getSelection();\n        let didChangeSelection = false;\n        const focus = this.getFocus();\n        let didChangeFocus = false;\n        const visit = (node) => {\n            const compressedNode = node.element;\n            if (compressedNode) {\n                for (let i = 0; i < compressedNode.elements.length; i++) {\n                    const id = getId(compressedNode.elements[i].element);\n                    const element = compressedNode.elements[compressedNode.elements.length - 1].element;\n                    // github.com/microsoft/vscode/issues/85938\n                    if (oldSelection.has(id) && selection.indexOf(element) === -1) {\n                        selection.push(element);\n                        didChangeSelection = true;\n                    }\n                    if (oldFocus.has(id) && focus.indexOf(element) === -1) {\n                        focus.push(element);\n                        didChangeFocus = true;\n                    }\n                }\n            }\n            node.children.forEach(visit);\n        };\n        visit(this.tree.getCompressedTreeNode(node === this.root ? null : node));\n        if (didChangeSelection) {\n            this.setSelection(selection);\n        }\n        if (didChangeFocus) {\n            this.setFocus(focus);\n        }\n    }\n    // For compressed async data trees, `TreeVisibility.Recurse` doesn't currently work\n    // and we have to filter everything beforehand\n    // Related to #85193 and #85835\n    processChildren(children) {\n        if (this.filter) {\n            children = Iterable.filter(children, e => {\n                const result = this.filter.filter(e, 1 /* TreeVisibility.Visible */);\n                const visibility = getVisibility(result);\n                if (visibility === 2 /* TreeVisibility.Recurse */) {\n                    throw new Error('Recursive tree visibility not supported in async data compressed trees');\n                }\n                return visibility === 1 /* TreeVisibility.Visible */;\n            });\n        }\n        return super.processChildren(children);\n    }\n}\nfunction getVisibility(filterResult) {\n    if (typeof filterResult === 'boolean') {\n        return filterResult ? 1 /* TreeVisibility.Visible */ : 0 /* TreeVisibility.Hidden */;\n    }\n    else if (isFilterResult(filterResult)) {\n        return getVisibleState(filterResult.visibility);\n    }\n    else {\n        return getVisibleState(filterResult);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}