{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { DisposableStore, isDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { historyNavigationVisible } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';\nexport const Context = {\n  Visible: historyNavigationVisible,\n  HasFocusedSuggestion: new RawContextKey('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', \"Whether any suggestion is focused\")),\n  DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', \"Whether suggestion details are visible\")),\n  MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', \"Whether there are multiple suggestions to pick from\")),\n  MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', \"Whether inserting the current suggestion yields in a change or has everything already been typed\")),\n  AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', \"Whether suggestions are inserted when pressing Enter\")),\n  HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', \"Whether the current suggestion has insert and replace behaviour\")),\n  InsertMode: new RawContextKey('suggestionInsertMode', undefined, {\n    type: 'string',\n    description: localize('suggestionInsertMode', \"Whether the default behaviour is to insert or replace\")\n  }),\n  CanResolve: new RawContextKey('suggestionCanResolve', false, localize('suggestionCanResolve', \"Whether the current suggestion supports to resolve further details\"))\n};\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\nexport class CompletionItem {\n  constructor(position, completion, container, provider) {\n    var _a;\n    this.position = position;\n    this.completion = completion;\n    this.container = container;\n    this.provider = provider;\n    // validation\n    this.isInvalid = false;\n    // sorting, filtering\n    this.score = FuzzyScore.Default;\n    this.distance = 0;\n    this.textLabel = typeof completion.label === 'string' ? completion.label : (_a = completion.label) === null || _a === void 0 ? void 0 : _a.label;\n    // ensure lower-variants (perf)\n    this.labelLow = this.textLabel.toLowerCase();\n    // validate label\n    this.isInvalid = !this.textLabel;\n    this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n    this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n    this.extensionId = completion.extensionId;\n    // normalize ranges\n    if (Range.isIRange(completion.range)) {\n      this.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\n      this.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n      this.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n      // validate range\n      this.isInvalid = this.isInvalid || Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\n    } else {\n      this.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\n      this.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\n      this.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\n      // validate ranges\n      this.isInvalid = this.isInvalid || Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace) || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber || completion.range.insert.startColumn !== completion.range.replace.startColumn;\n    }\n    // create the suggestion resolver\n    if (typeof provider.resolveCompletionItem !== 'function') {\n      this._resolveCache = Promise.resolve();\n      this._resolveDuration = 0;\n    }\n  }\n  // ---- resolving\n  get isResolved() {\n    return this._resolveDuration !== undefined;\n  }\n  get resolveDuration() {\n    return this._resolveDuration !== undefined ? this._resolveDuration : -1;\n  }\n  resolve(token) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._resolveCache) {\n        const sub = token.onCancellationRequested(() => {\n          this._resolveCache = undefined;\n          this._resolveDuration = undefined;\n        });\n        const sw = new StopWatch(true);\n        this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then(value => {\n          Object.assign(this.completion, value);\n          this._resolveDuration = sw.elapsed();\n        }, err => {\n          if (isCancellationError(err)) {\n            // the IPC queue will reject the request with the\n            // cancellation error -> reset cached\n            this._resolveCache = undefined;\n            this._resolveDuration = undefined;\n          }\n        }).finally(() => {\n          sub.dispose();\n        });\n      }\n      return this._resolveCache;\n    });\n  }\n}\nexport class CompletionOptions {\n  constructor(snippetSortOrder = 2 /* SnippetSortOrder.Bottom */, kindFilter = new Set(), providerFilter = new Set(), providerItemsToReuse = new Map(), showDeprecated = true) {\n    this.snippetSortOrder = snippetSortOrder;\n    this.kindFilter = kindFilter;\n    this.providerFilter = providerFilter;\n    this.providerItemsToReuse = providerItemsToReuse;\n    this.showDeprecated = showDeprecated;\n  }\n}\nCompletionOptions.default = new CompletionOptions();\nlet _snippetSuggestSupport;\nexport function getSnippetSuggestSupport() {\n  return _snippetSuggestSupport;\n}\nexport class CompletionItemModel {\n  constructor(items, needsClipboard, durations, disposable) {\n    this.items = items;\n    this.needsClipboard = needsClipboard;\n    this.durations = durations;\n    this.disposable = disposable;\n  }\n}\nexport function provideSuggestionItems(registry, model, position, options = CompletionOptions.default, context = {\n  triggerKind: 0 /* languages.CompletionTriggerKind.Invoke */\n}, token = CancellationToken.None) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const sw = new StopWatch();\n    position = position.clone();\n    const word = model.getWordAtPosition(position);\n    const defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\n    const defaultRange = {\n      replace: defaultReplaceRange,\n      insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column)\n    };\n    const result = [];\n    const disposables = new DisposableStore();\n    const durations = [];\n    let needsClipboard = false;\n    const onCompletionList = (provider, container, sw) => {\n      var _a, _b, _c;\n      let didAddResult = false;\n      if (!container) {\n        return didAddResult;\n      }\n      for (const suggestion of container.suggestions) {\n        if (!options.kindFilter.has(suggestion.kind)) {\n          // skip if not showing deprecated suggestions\n          if (!options.showDeprecated && ((_a = suggestion === null || suggestion === void 0 ? void 0 : suggestion.tags) === null || _a === void 0 ? void 0 : _a.includes(1 /* languages.CompletionItemTag.Deprecated */))) {\n            continue;\n          }\n          // fill in default range when missing\n          if (!suggestion.range) {\n            suggestion.range = defaultRange;\n          }\n          // fill in default sortText when missing\n          if (!suggestion.sortText) {\n            suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.label;\n          }\n          if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* languages.CompletionItemInsertTextRule.InsertAsSnippet */) {\n            needsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\n          }\n          result.push(new CompletionItem(position, suggestion, container, provider));\n          didAddResult = true;\n        }\n      }\n      if (isDisposable(container)) {\n        disposables.add(container);\n      }\n      durations.push({\n        providerName: (_b = provider._debugDisplayName) !== null && _b !== void 0 ? _b : 'unknown_provider',\n        elapsedProvider: (_c = container.duration) !== null && _c !== void 0 ? _c : -1,\n        elapsedOverall: sw.elapsed()\n      });\n      return didAddResult;\n    };\n    // ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\n    // do so - no snippet filter, no special-providers-only request\n    const snippetCompletions = (() => __awaiter(this, void 0, void 0, function* () {\n      if (!_snippetSuggestSupport || options.kindFilter.has(27 /* languages.CompletionItemKind.Snippet */)) {\n        return;\n      }\n      // we have items from a previous session that we can reuse\n      const reuseItems = options.providerItemsToReuse.get(_snippetSuggestSupport);\n      if (reuseItems) {\n        reuseItems.forEach(item => result.push(item));\n        return;\n      }\n      if (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\n        return;\n      }\n      const sw = new StopWatch();\n      const list = yield _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\n      onCompletionList(_snippetSuggestSupport, list, sw);\n    }))();\n    // add suggestions from contributed providers - providers are ordered in groups of\n    // equal score and once a group produces a result the process stops\n    // get provider groups, always add snippet suggestion provider\n    for (const providerGroup of registry.orderedGroups(model)) {\n      // for each support in the group ask for suggestions\n      let didAddResult = false;\n      yield Promise.all(providerGroup.map(provider => __awaiter(this, void 0, void 0, function* () {\n        // we have items from a previous session that we can reuse\n        if (options.providerItemsToReuse.has(provider)) {\n          const items = options.providerItemsToReuse.get(provider);\n          items.forEach(item => result.push(item));\n          didAddResult = didAddResult || items.length > 0;\n          return;\n        }\n        // check if this provider is filtered out\n        if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n          return;\n        }\n        try {\n          const sw = new StopWatch();\n          const list = yield provider.provideCompletionItems(model, position, context, token);\n          didAddResult = onCompletionList(provider, list, sw) || didAddResult;\n        } catch (err) {\n          onUnexpectedExternalError(err);\n        }\n      })));\n      if (didAddResult || token.isCancellationRequested) {\n        break;\n      }\n    }\n    yield snippetCompletions;\n    if (token.isCancellationRequested) {\n      disposables.dispose();\n      return Promise.reject(new CancellationError());\n    }\n    return new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, {\n      entries: durations,\n      elapsed: sw.elapsed()\n    }, disposables);\n  });\n}\nfunction defaultComparator(a, b) {\n  // check with 'sortText'\n  if (a.sortTextLow && b.sortTextLow) {\n    if (a.sortTextLow < b.sortTextLow) {\n      return -1;\n    } else if (a.sortTextLow > b.sortTextLow) {\n      return 1;\n    }\n  }\n  // check with 'label'\n  if (a.textLabel < b.textLabel) {\n    return -1;\n  } else if (a.textLabel > b.textLabel) {\n    return 1;\n  }\n  // check with 'type'\n  return a.completion.kind - b.completion.kind;\n}\nfunction snippetUpComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return -1;\n    } else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return 1;\n    }\n  }\n  return defaultComparator(a, b);\n}\nfunction snippetDownComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return 1;\n    } else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n      return -1;\n    }\n  }\n  return defaultComparator(a, b);\n}\nconst _snippetComparators = new Map();\n_snippetComparators.set(0 /* SnippetSortOrder.Top */, snippetUpComparator);\n_snippetComparators.set(2 /* SnippetSortOrder.Bottom */, snippetDownComparator);\n_snippetComparators.set(1 /* SnippetSortOrder.Inline */, defaultComparator);\nexport function getSuggestionComparator(snippetConfig) {\n  return _snippetComparators.get(snippetConfig);\n}\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n  const [uri, position, triggerCharacter, maxItemsToResolve] = args;\n  assertType(URI.isUri(uri));\n  assertType(Position.isIPosition(position));\n  assertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n  assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\n  const {\n    completionProvider\n  } = accessor.get(ILanguageFeaturesService);\n  const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n  try {\n    const result = {\n      incomplete: false,\n      suggestions: []\n    };\n    const resolving = [];\n    const actualPosition = ref.object.textEditorModel.validatePosition(position);\n    const completions = yield provideSuggestionItems(completionProvider, ref.object.textEditorModel, actualPosition, undefined, {\n      triggerCharacter: triggerCharacter !== null && triggerCharacter !== void 0 ? triggerCharacter : undefined,\n      triggerKind: triggerCharacter ? 1 /* languages.CompletionTriggerKind.TriggerCharacter */ : 0 /* languages.CompletionTriggerKind.Invoke */\n    });\n    for (const item of completions.items) {\n      if (resolving.length < (maxItemsToResolve !== null && maxItemsToResolve !== void 0 ? maxItemsToResolve : 0)) {\n        resolving.push(item.resolve(CancellationToken.None));\n      }\n      result.incomplete = result.incomplete || item.container.incomplete;\n      result.suggestions.push(item.completion);\n    }\n    try {\n      yield Promise.all(resolving);\n      return result;\n    } finally {\n      setTimeout(() => completions.disposable.dispose(), 100);\n    }\n  } finally {\n    ref.dispose();\n  }\n}));\nexport function showSimpleSuggestions(editor, provider) {\n  var _a;\n  (_a = editor.getContribution('editor.contrib.suggestController')) === null || _a === void 0 ? void 0 : _a.triggerSuggest(new Set().add(provider), undefined, true);\n}\nexport class QuickSuggestionsOptions {\n  static isAllOff(config) {\n    return config.other === 'off' && config.comments === 'off' && config.strings === 'off';\n  }\n  static isAllOn(config) {\n    return config.other === 'on' && config.comments === 'on' && config.strings === 'on';\n  }\n  static valueFor(config, tokenType) {\n    switch (tokenType) {\n      case 1 /* StandardTokenType.Comment */:\n        return config.comments;\n      case 2 /* StandardTokenType.String */:\n        return config.strings;\n      default:\n        return config.other;\n    }\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","CancellationToken","CancellationError","isCancellationError","onUnexpectedExternalError","FuzzyScore","DisposableStore","isDisposable","StopWatch","assertType","URI","Position","Range","ITextModelService","SnippetParser","localize","MenuId","CommandsRegistry","RawContextKey","ILanguageFeaturesService","historyNavigationVisible","Context","Visible","HasFocusedSuggestion","DetailsVisible","MultipleSuggestions","MakesTextEdit","AcceptSuggestionsOnEnter","HasInsertAndReplaceRange","InsertMode","undefined","type","description","CanResolve","suggestWidgetStatusbarMenu","CompletionItem","constructor","position","completion","container","provider","_a","isInvalid","score","Default","distance","textLabel","label","labelLow","toLowerCase","sortTextLow","sortText","filterTextLow","filterText","extensionId","isIRange","range","editStart","startLineNumber","startColumn","editInsertEnd","endLineNumber","endColumn","editReplaceEnd","spansMultipleLines","lineNumber","insert","replace","resolveCompletionItem","_resolveCache","_resolveDuration","isResolved","resolveDuration","token","sub","onCancellationRequested","sw","Object","assign","elapsed","err","finally","dispose","CompletionOptions","snippetSortOrder","kindFilter","Set","providerFilter","providerItemsToReuse","Map","showDeprecated","default","_snippetSuggestSupport","getSnippetSuggestSupport","CompletionItemModel","items","needsClipboard","durations","disposable","provideSuggestionItems","registry","model","options","context","triggerKind","None","clone","word","getWordAtPosition","defaultReplaceRange","fromPositions","defaultRange","setEndPosition","column","disposables","onCompletionList","_b","_c","didAddResult","suggestion","suggestions","has","kind","tags","includes","insertTextRules","guessNeedsClipboard","insertText","push","add","providerName","_debugDisplayName","elapsedProvider","duration","elapsedOverall","snippetCompletions","reuseItems","get","forEach","item","size","list","provideCompletionItems","providerGroup","orderedGroups","all","map","length","isCancellationRequested","sort","getSuggestionComparator","entries","defaultComparator","a","b","snippetUpComparator","snippetDownComparator","_snippetComparators","set","snippetConfig","registerCommand","accessor","args","uri","triggerCharacter","maxItemsToResolve","isUri","isIPosition","completionProvider","ref","createModelReference","incomplete","resolving","actualPosition","object","textEditorModel","validatePosition","completions","setTimeout","showSimpleSuggestions","editor","getContribution","triggerSuggest","QuickSuggestionsOptions","isAllOff","config","other","comments","strings","isAllOn","valueFor","tokenType"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggest.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError, isCancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { DisposableStore, isDisposable } from '../../../../base/common/lifecycle.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { historyNavigationVisible } from '../../../../platform/history/browser/contextScopedHistoryWidget.js';\nexport const Context = {\n    Visible: historyNavigationVisible,\n    HasFocusedSuggestion: new RawContextKey('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', \"Whether any suggestion is focused\")),\n    DetailsVisible: new RawContextKey('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', \"Whether suggestion details are visible\")),\n    MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', \"Whether there are multiple suggestions to pick from\")),\n    MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', \"Whether inserting the current suggestion yields in a change or has everything already been typed\")),\n    AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', \"Whether suggestions are inserted when pressing Enter\")),\n    HasInsertAndReplaceRange: new RawContextKey('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', \"Whether the current suggestion has insert and replace behaviour\")),\n    InsertMode: new RawContextKey('suggestionInsertMode', undefined, { type: 'string', description: localize('suggestionInsertMode', \"Whether the default behaviour is to insert or replace\") }),\n    CanResolve: new RawContextKey('suggestionCanResolve', false, localize('suggestionCanResolve', \"Whether the current suggestion supports to resolve further details\")),\n};\nexport const suggestWidgetStatusbarMenu = new MenuId('suggestWidgetStatusBar');\nexport class CompletionItem {\n    constructor(position, completion, container, provider) {\n        var _a;\n        this.position = position;\n        this.completion = completion;\n        this.container = container;\n        this.provider = provider;\n        // validation\n        this.isInvalid = false;\n        // sorting, filtering\n        this.score = FuzzyScore.Default;\n        this.distance = 0;\n        this.textLabel = typeof completion.label === 'string'\n            ? completion.label\n            : (_a = completion.label) === null || _a === void 0 ? void 0 : _a.label;\n        // ensure lower-variants (perf)\n        this.labelLow = this.textLabel.toLowerCase();\n        // validate label\n        this.isInvalid = !this.textLabel;\n        this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n        this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n        this.extensionId = completion.extensionId;\n        // normalize ranges\n        if (Range.isIRange(completion.range)) {\n            this.editStart = new Position(completion.range.startLineNumber, completion.range.startColumn);\n            this.editInsertEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n            this.editReplaceEnd = new Position(completion.range.endLineNumber, completion.range.endColumn);\n            // validate range\n            this.isInvalid = this.isInvalid\n                || Range.spansMultipleLines(completion.range) || completion.range.startLineNumber !== position.lineNumber;\n        }\n        else {\n            this.editStart = new Position(completion.range.insert.startLineNumber, completion.range.insert.startColumn);\n            this.editInsertEnd = new Position(completion.range.insert.endLineNumber, completion.range.insert.endColumn);\n            this.editReplaceEnd = new Position(completion.range.replace.endLineNumber, completion.range.replace.endColumn);\n            // validate ranges\n            this.isInvalid = this.isInvalid\n                || Range.spansMultipleLines(completion.range.insert) || Range.spansMultipleLines(completion.range.replace)\n                || completion.range.insert.startLineNumber !== position.lineNumber || completion.range.replace.startLineNumber !== position.lineNumber\n                || completion.range.insert.startColumn !== completion.range.replace.startColumn;\n        }\n        // create the suggestion resolver\n        if (typeof provider.resolveCompletionItem !== 'function') {\n            this._resolveCache = Promise.resolve();\n            this._resolveDuration = 0;\n        }\n    }\n    // ---- resolving\n    get isResolved() {\n        return this._resolveDuration !== undefined;\n    }\n    get resolveDuration() {\n        return this._resolveDuration !== undefined ? this._resolveDuration : -1;\n    }\n    resolve(token) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolveCache) {\n                const sub = token.onCancellationRequested(() => {\n                    this._resolveCache = undefined;\n                    this._resolveDuration = undefined;\n                });\n                const sw = new StopWatch(true);\n                this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, token)).then(value => {\n                    Object.assign(this.completion, value);\n                    this._resolveDuration = sw.elapsed();\n                }, err => {\n                    if (isCancellationError(err)) {\n                        // the IPC queue will reject the request with the\n                        // cancellation error -> reset cached\n                        this._resolveCache = undefined;\n                        this._resolveDuration = undefined;\n                    }\n                }).finally(() => {\n                    sub.dispose();\n                });\n            }\n            return this._resolveCache;\n        });\n    }\n}\nexport class CompletionOptions {\n    constructor(snippetSortOrder = 2 /* SnippetSortOrder.Bottom */, kindFilter = new Set(), providerFilter = new Set(), providerItemsToReuse = new Map(), showDeprecated = true) {\n        this.snippetSortOrder = snippetSortOrder;\n        this.kindFilter = kindFilter;\n        this.providerFilter = providerFilter;\n        this.providerItemsToReuse = providerItemsToReuse;\n        this.showDeprecated = showDeprecated;\n    }\n}\nCompletionOptions.default = new CompletionOptions();\nlet _snippetSuggestSupport;\nexport function getSnippetSuggestSupport() {\n    return _snippetSuggestSupport;\n}\nexport class CompletionItemModel {\n    constructor(items, needsClipboard, durations, disposable) {\n        this.items = items;\n        this.needsClipboard = needsClipboard;\n        this.durations = durations;\n        this.disposable = disposable;\n    }\n}\nexport function provideSuggestionItems(registry, model, position, options = CompletionOptions.default, context = { triggerKind: 0 /* languages.CompletionTriggerKind.Invoke */ }, token = CancellationToken.None) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sw = new StopWatch();\n        position = position.clone();\n        const word = model.getWordAtPosition(position);\n        const defaultReplaceRange = word ? new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn) : Range.fromPositions(position);\n        const defaultRange = { replace: defaultReplaceRange, insert: defaultReplaceRange.setEndPosition(position.lineNumber, position.column) };\n        const result = [];\n        const disposables = new DisposableStore();\n        const durations = [];\n        let needsClipboard = false;\n        const onCompletionList = (provider, container, sw) => {\n            var _a, _b, _c;\n            let didAddResult = false;\n            if (!container) {\n                return didAddResult;\n            }\n            for (const suggestion of container.suggestions) {\n                if (!options.kindFilter.has(suggestion.kind)) {\n                    // skip if not showing deprecated suggestions\n                    if (!options.showDeprecated && ((_a = suggestion === null || suggestion === void 0 ? void 0 : suggestion.tags) === null || _a === void 0 ? void 0 : _a.includes(1 /* languages.CompletionItemTag.Deprecated */))) {\n                        continue;\n                    }\n                    // fill in default range when missing\n                    if (!suggestion.range) {\n                        suggestion.range = defaultRange;\n                    }\n                    // fill in default sortText when missing\n                    if (!suggestion.sortText) {\n                        suggestion.sortText = typeof suggestion.label === 'string' ? suggestion.label : suggestion.label.label;\n                    }\n                    if (!needsClipboard && suggestion.insertTextRules && suggestion.insertTextRules & 4 /* languages.CompletionItemInsertTextRule.InsertAsSnippet */) {\n                        needsClipboard = SnippetParser.guessNeedsClipboard(suggestion.insertText);\n                    }\n                    result.push(new CompletionItem(position, suggestion, container, provider));\n                    didAddResult = true;\n                }\n            }\n            if (isDisposable(container)) {\n                disposables.add(container);\n            }\n            durations.push({\n                providerName: (_b = provider._debugDisplayName) !== null && _b !== void 0 ? _b : 'unknown_provider', elapsedProvider: (_c = container.duration) !== null && _c !== void 0 ? _c : -1, elapsedOverall: sw.elapsed()\n            });\n            return didAddResult;\n        };\n        // ask for snippets in parallel to asking \"real\" providers. Only do something if configured to\n        // do so - no snippet filter, no special-providers-only request\n        const snippetCompletions = (() => __awaiter(this, void 0, void 0, function* () {\n            if (!_snippetSuggestSupport || options.kindFilter.has(27 /* languages.CompletionItemKind.Snippet */)) {\n                return;\n            }\n            // we have items from a previous session that we can reuse\n            const reuseItems = options.providerItemsToReuse.get(_snippetSuggestSupport);\n            if (reuseItems) {\n                reuseItems.forEach(item => result.push(item));\n                return;\n            }\n            if (options.providerFilter.size > 0 && !options.providerFilter.has(_snippetSuggestSupport)) {\n                return;\n            }\n            const sw = new StopWatch();\n            const list = yield _snippetSuggestSupport.provideCompletionItems(model, position, context, token);\n            onCompletionList(_snippetSuggestSupport, list, sw);\n        }))();\n        // add suggestions from contributed providers - providers are ordered in groups of\n        // equal score and once a group produces a result the process stops\n        // get provider groups, always add snippet suggestion provider\n        for (const providerGroup of registry.orderedGroups(model)) {\n            // for each support in the group ask for suggestions\n            let didAddResult = false;\n            yield Promise.all(providerGroup.map((provider) => __awaiter(this, void 0, void 0, function* () {\n                // we have items from a previous session that we can reuse\n                if (options.providerItemsToReuse.has(provider)) {\n                    const items = options.providerItemsToReuse.get(provider);\n                    items.forEach(item => result.push(item));\n                    didAddResult = didAddResult || items.length > 0;\n                    return;\n                }\n                // check if this provider is filtered out\n                if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n                    return;\n                }\n                try {\n                    const sw = new StopWatch();\n                    const list = yield provider.provideCompletionItems(model, position, context, token);\n                    didAddResult = onCompletionList(provider, list, sw) || didAddResult;\n                }\n                catch (err) {\n                    onUnexpectedExternalError(err);\n                }\n            })));\n            if (didAddResult || token.isCancellationRequested) {\n                break;\n            }\n        }\n        yield snippetCompletions;\n        if (token.isCancellationRequested) {\n            disposables.dispose();\n            return Promise.reject(new CancellationError());\n        }\n        return new CompletionItemModel(result.sort(getSuggestionComparator(options.snippetSortOrder)), needsClipboard, { entries: durations, elapsed: sw.elapsed() }, disposables);\n    });\n}\nfunction defaultComparator(a, b) {\n    // check with 'sortText'\n    if (a.sortTextLow && b.sortTextLow) {\n        if (a.sortTextLow < b.sortTextLow) {\n            return -1;\n        }\n        else if (a.sortTextLow > b.sortTextLow) {\n            return 1;\n        }\n    }\n    // check with 'label'\n    if (a.textLabel < b.textLabel) {\n        return -1;\n    }\n    else if (a.textLabel > b.textLabel) {\n        return 1;\n    }\n    // check with 'type'\n    return a.completion.kind - b.completion.kind;\n}\nfunction snippetUpComparator(a, b) {\n    if (a.completion.kind !== b.completion.kind) {\n        if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return -1;\n        }\n        else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return 1;\n        }\n    }\n    return defaultComparator(a, b);\n}\nfunction snippetDownComparator(a, b) {\n    if (a.completion.kind !== b.completion.kind) {\n        if (a.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return 1;\n        }\n        else if (b.completion.kind === 27 /* languages.CompletionItemKind.Snippet */) {\n            return -1;\n        }\n    }\n    return defaultComparator(a, b);\n}\nconst _snippetComparators = new Map();\n_snippetComparators.set(0 /* SnippetSortOrder.Top */, snippetUpComparator);\n_snippetComparators.set(2 /* SnippetSortOrder.Bottom */, snippetDownComparator);\n_snippetComparators.set(1 /* SnippetSortOrder.Inline */, defaultComparator);\nexport function getSuggestionComparator(snippetConfig) {\n    return _snippetComparators.get(snippetConfig);\n}\nCommandsRegistry.registerCommand('_executeCompletionItemProvider', (accessor, ...args) => __awaiter(void 0, void 0, void 0, function* () {\n    const [uri, position, triggerCharacter, maxItemsToResolve] = args;\n    assertType(URI.isUri(uri));\n    assertType(Position.isIPosition(position));\n    assertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n    assertType(typeof maxItemsToResolve === 'number' || !maxItemsToResolve);\n    const { completionProvider } = accessor.get(ILanguageFeaturesService);\n    const ref = yield accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const result = {\n            incomplete: false,\n            suggestions: []\n        };\n        const resolving = [];\n        const actualPosition = ref.object.textEditorModel.validatePosition(position);\n        const completions = yield provideSuggestionItems(completionProvider, ref.object.textEditorModel, actualPosition, undefined, { triggerCharacter: triggerCharacter !== null && triggerCharacter !== void 0 ? triggerCharacter : undefined, triggerKind: triggerCharacter ? 1 /* languages.CompletionTriggerKind.TriggerCharacter */ : 0 /* languages.CompletionTriggerKind.Invoke */ });\n        for (const item of completions.items) {\n            if (resolving.length < (maxItemsToResolve !== null && maxItemsToResolve !== void 0 ? maxItemsToResolve : 0)) {\n                resolving.push(item.resolve(CancellationToken.None));\n            }\n            result.incomplete = result.incomplete || item.container.incomplete;\n            result.suggestions.push(item.completion);\n        }\n        try {\n            yield Promise.all(resolving);\n            return result;\n        }\n        finally {\n            setTimeout(() => completions.disposable.dispose(), 100);\n        }\n    }\n    finally {\n        ref.dispose();\n    }\n}));\nexport function showSimpleSuggestions(editor, provider) {\n    var _a;\n    (_a = editor.getContribution('editor.contrib.suggestController')) === null || _a === void 0 ? void 0 : _a.triggerSuggest(new Set().add(provider), undefined, true);\n}\nexport class QuickSuggestionsOptions {\n    static isAllOff(config) {\n        return config.other === 'off' && config.comments === 'off' && config.strings === 'off';\n    }\n    static isAllOn(config) {\n        return config.other === 'on' && config.comments === 'on' && config.strings === 'on';\n    }\n    static valueFor(config, tokenType) {\n        switch (tokenType) {\n            case 1 /* StandardTokenType.Comment */: return config.comments;\n            case 2 /* StandardTokenType.String */: return config.strings;\n            default: return config.other;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}