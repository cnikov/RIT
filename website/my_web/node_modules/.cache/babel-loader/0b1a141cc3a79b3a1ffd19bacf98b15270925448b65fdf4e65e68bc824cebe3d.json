{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport * as browser from '../../../../base/browser/browser.js';\nimport { getActiveDocument } from '../../../../base/browser/dom.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/textAreaInput.js';\nimport { EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nconst supportsCut = platform.isNative || document.queryCommandSupported('cut');\nconst supportsCopy = platform.isNative || document.queryCommandSupported('copy');\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste = typeof navigator.clipboard === 'undefined' || browser.isFirefox ? document.queryCommandSupported('paste') : true;\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCutAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind cut keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */,\n    win: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */,\n      secondary: [1024 /* KeyMod.Shift */ | 20 /* KeyCode.Delete */]\n    },\n    weight: 100 /* KeybindingWeight.EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCut',\n      comment: ['&& denotes a mnemonic']\n    }, \"Cu&&t\"),\n    order: 1\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }]\n})) : undefined;\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCopyAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind copy keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */,\n    win: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */,\n      secondary: [2048 /* KeyMod.CtrlCmd */ | 19 /* KeyCode.Insert */]\n    },\n    weight: 100 /* KeybindingWeight.EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCopy',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }]\n})) : undefined;\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, {\n  submenu: MenuId.MenubarCopy,\n  title: {\n    value: nls.localize('copy as', \"Copy As\"),\n    original: 'Copy As'\n  },\n  group: '2_ccp',\n  order: 3\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n  submenu: MenuId.EditorContextCopy,\n  title: {\n    value: nls.localize('copy as', \"Copy As\"),\n    original: 'Copy As'\n  },\n  group: CLIPBOARD_CONTEXT_MENU_GROUP,\n  order: 3\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n  submenu: MenuId.EditorContextShare,\n  title: {\n    value: nls.localize('share', \"Share\"),\n    original: 'Share'\n  },\n  group: '11_share',\n  order: -1,\n  when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus)\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitleContext, {\n  submenu: MenuId.EditorTitleContextShare,\n  title: {\n    value: nls.localize('share', \"Share\"),\n    original: 'Share'\n  },\n  group: '11_share',\n  order: -1\n});\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n  submenu: MenuId.ExplorerContextShare,\n  title: {\n    value: nls.localize('share', \"Share\"),\n    original: 'Share'\n  },\n  group: '11_share',\n  order: -1\n});\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardPasteAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind paste keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n    win: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n      secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */]\n    },\n    linux: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n      secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */]\n    },\n    weight: 100 /* KeybindingWeight.EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miPaste',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Paste\"),\n    order: 4\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 4\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 4\n  }]\n})) : undefined;\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n\n  run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const emptySelectionClipboard = editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n    CopyOptions.forceCopyWithSyntaxHighlighting = true;\n    editor.focus();\n    editor.getContainerDomNode().ownerDocument.execCommand('copy');\n    CopyOptions.forceCopyWithSyntaxHighlighting = false;\n  }\n}\nfunction registerExecCommandImpl(target, browserCommand) {\n  if (!target) {\n    return;\n  }\n  // 1. handle case when focus is in editor.\n  target.addImplementation(10000, 'code-editor', (accessor, args) => {\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      // Do not execute if there is no selection and empty selection clipboard is off\n      const emptySelectionClipboard = focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n      const selection = focusedEditor.getSelection();\n      if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n        return true;\n      }\n      focusedEditor.getContainerDomNode().ownerDocument.execCommand(browserCommand);\n      return true;\n    }\n    return false;\n  });\n  // 2. (default) handle case when focus is somewhere else.\n  target.addImplementation(0, 'generic-dom', (accessor, args) => {\n    getActiveDocument().execCommand(browserCommand);\n    return true;\n  });\n}\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\nif (PasteAction) {\n  // 1. Paste: handle case when focus is in editor.\n  PasteAction.addImplementation(10000, 'code-editor', (accessor, args) => {\n    const codeEditorService = accessor.get(ICodeEditorService);\n    const clipboardService = accessor.get(IClipboardService);\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    const focusedEditor = codeEditorService.getFocusedCodeEditor();\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      const result = focusedEditor.getContainerDomNode().ownerDocument.execCommand('paste');\n      // Use the clipboard service if document.execCommand('paste') was not successful\n      if (!result && platform.isWeb) {\n        return (() => __awaiter(void 0, void 0, void 0, function* () {\n          const clipboardText = yield clipboardService.readText();\n          if (clipboardText !== '') {\n            const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (metadata) {\n              pasteOnNewLine = focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */) && !!metadata.isFromEmptySelection;\n              multicursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;\n              mode = metadata.mode;\n            }\n            focusedEditor.trigger('keyboard', \"paste\" /* Handler.Paste */, {\n              text: clipboardText,\n              pasteOnNewLine,\n              multicursorText,\n              mode\n            });\n          }\n        }))();\n      }\n      return true;\n    }\n    return false;\n  });\n  // 2. Paste: (default) handle case when focus is somewhere else.\n  PasteAction.addImplementation(0, 'generic-dom', (accessor, args) => {\n    getActiveDocument().execCommand('paste');\n    return true;\n  });\n}\nif (supportsCopy) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","browser","getActiveDocument","platform","CopyOptions","InMemoryClipboardMetadataManager","EditorAction","MultiCommand","registerEditorAction","ICodeEditorService","EditorContextKeys","nls","MenuId","MenuRegistry","IClipboardService","ContextKeyExpr","CLIPBOARD_CONTEXT_MENU_GROUP","supportsCut","isNative","document","queryCommandSupported","supportsCopy","supportsPaste","navigator","clipboard","isFirefox","registerCommand","command","register","CutAction","id","precondition","undefined","kbOpts","primary","win","secondary","weight","menuOpts","menuId","MenubarEditMenu","group","title","localize","key","comment","order","EditorContext","when","writable","CommandPalette","SimpleEditorContext","CopyAction","appendMenuItem","submenu","MenubarCopy","original","EditorContextCopy","EditorContextShare","and","notEquals","editorTextFocus","EditorTitleContext","EditorTitleContextShare","ExplorerContext","ExplorerContextShare","PasteAction","linux","ExecCommandCopyWithSyntaxHighlightingAction","constructor","label","alias","kbExpr","textInputFocus","run","accessor","editor","hasModel","emptySelectionClipboard","getOption","getSelection","isEmpty","forceCopyWithSyntaxHighlighting","focus","getContainerDomNode","ownerDocument","execCommand","registerExecCommandImpl","target","browserCommand","addImplementation","args","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","selection","codeEditorService","clipboardService","isWeb","clipboardText","readText","metadata","INSTANCE","pasteOnNewLine","multicursorText","mode","isFromEmptySelection","trigger","text"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/browser/clipboard.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as browser from '../../../../base/browser/browser.js';\nimport { getActiveDocument } from '../../../../base/browser/dom.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/textAreaInput.js';\nimport { EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nconst supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\nconst supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste = (typeof navigator.clipboard === 'undefined' || browser.isFirefox) ? document.queryCommandSupported('paste') : true;\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardCutAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind cut keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */,\n        win: { primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */, secondary: [1024 /* KeyMod.Shift */ | 20 /* KeyCode.Delete */] },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n            order: 1\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            when: EditorContextKeys.writable,\n            order: 1,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            when: EditorContextKeys.writable,\n            order: 1,\n        }]\n})) : undefined;\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardCopyAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind copy keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */,\n        win: { primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */, secondary: [2048 /* KeyMod.CtrlCmd */ | 19 /* KeyCode.Insert */] },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n            order: 2\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 2,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 2,\n        }]\n})) : undefined;\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: { value: nls.localize('copy as', \"Copy As\"), original: 'Copy As', }, group: '2_ccp', order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: { value: nls.localize('copy as', \"Copy As\"), original: 'Copy As', }, group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextShare, title: { value: nls.localize('share', \"Share\"), original: 'Share', }, group: '11_share', order: -1, when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus) });\nMenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { submenu: MenuId.EditorTitleContextShare, title: { value: nls.localize('share', \"Share\"), original: 'Share', }, group: '11_share', order: -1 });\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, { submenu: MenuId.ExplorerContextShare, title: { value: nls.localize('share', \"Share\"), original: 'Share', }, group: '11_share', order: -1 });\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardPasteAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind paste keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n        win: { primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */, secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */] },\n        linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */, secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */] },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n            order: 4\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            when: EditorContextKeys.writable,\n            order: 4,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            when: EditorContextKeys.writable,\n            order: 4,\n        }]\n})) : undefined;\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n            alias: 'Copy With Syntax Highlighting',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const emptySelectionClipboard = editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n            return;\n        }\n        CopyOptions.forceCopyWithSyntaxHighlighting = true;\n        editor.focus();\n        editor.getContainerDomNode().ownerDocument.execCommand('copy');\n        CopyOptions.forceCopyWithSyntaxHighlighting = false;\n    }\n}\nfunction registerExecCommandImpl(target, browserCommand) {\n    if (!target) {\n        return;\n    }\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, 'code-editor', (accessor, args) => {\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            // Do not execute if there is no selection and empty selection clipboard is off\n            const emptySelectionClipboard = focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n            const selection = focusedEditor.getSelection();\n            if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n                return true;\n            }\n            focusedEditor.getContainerDomNode().ownerDocument.execCommand(browserCommand);\n            return true;\n        }\n        return false;\n    });\n    // 2. (default) handle case when focus is somewhere else.\n    target.addImplementation(0, 'generic-dom', (accessor, args) => {\n        getActiveDocument().execCommand(browserCommand);\n        return true;\n    });\n}\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\nif (PasteAction) {\n    // 1. Paste: handle case when focus is in editor.\n    PasteAction.addImplementation(10000, 'code-editor', (accessor, args) => {\n        const codeEditorService = accessor.get(ICodeEditorService);\n        const clipboardService = accessor.get(IClipboardService);\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        const focusedEditor = codeEditorService.getFocusedCodeEditor();\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            const result = focusedEditor.getContainerDomNode().ownerDocument.execCommand('paste');\n            // Use the clipboard service if document.execCommand('paste') was not successful\n            if (!result && platform.isWeb) {\n                return (() => __awaiter(void 0, void 0, void 0, function* () {\n                    const clipboardText = yield clipboardService.readText();\n                    if (clipboardText !== '') {\n                        const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n                        let pasteOnNewLine = false;\n                        let multicursorText = null;\n                        let mode = null;\n                        if (metadata) {\n                            pasteOnNewLine = (focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */) && !!metadata.isFromEmptySelection);\n                            multicursorText = (typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null);\n                            mode = metadata.mode;\n                        }\n                        focusedEditor.trigger('keyboard', \"paste\" /* Handler.Paste */, {\n                            text: clipboardText,\n                            pasteOnNewLine,\n                            multicursorText,\n                            mode\n                        });\n                    }\n                }))();\n            }\n            return true;\n        }\n        return false;\n    });\n    // 2. Paste: (default) handle case when focus is somewhere else.\n    PasteAction.addImplementation(0, 'generic-dom', (accessor, args) => {\n        getActiveDocument().execCommand('paste');\n        return true;\n    });\n}\nif (supportsCopy) {\n    registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}