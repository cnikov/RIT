{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\nimport { CancellationTokenSource } from './cancellation.js';\nimport { CancellationError } from './errors.js';\nimport { Emitter, Event } from './event.js';\nimport { toDisposable } from './lifecycle.js';\nimport { setTimeout0 } from './platform.js';\nimport { MicrotaskDelay } from './symbols.js';\nexport function isThenable(obj) {\n  return !!obj && typeof obj.then === 'function';\n}\nexport function createCancelablePromise(callback) {\n  const source = new CancellationTokenSource();\n  const thenable = callback(source.token);\n  const promise = new Promise((resolve, reject) => {\n    const subscription = source.token.onCancellationRequested(() => {\n      subscription.dispose();\n      source.dispose();\n      reject(new CancellationError());\n    });\n    Promise.resolve(thenable).then(value => {\n      subscription.dispose();\n      source.dispose();\n      resolve(value);\n    }, err => {\n      subscription.dispose();\n      source.dispose();\n      reject(err);\n    });\n  });\n  return new class {\n    cancel() {\n      source.cancel();\n    }\n    then(resolve, reject) {\n      return promise.then(resolve, reject);\n    }\n    catch(reject) {\n      return this.then(undefined, reject);\n    }\n    finally(onfinally) {\n      return promise.finally(onfinally);\n    }\n  }();\n}\nexport function raceCancellation(promise, token, defaultValue) {\n  return new Promise((resolve, reject) => {\n    const ref = token.onCancellationRequested(() => {\n      ref.dispose();\n      resolve(defaultValue);\n    });\n    promise.then(resolve, reject).finally(() => ref.dispose());\n  });\n}\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tconst throttler = new Throttler();\n * \t\tconst letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n  constructor() {\n    this.isDisposed = false;\n    this.activePromise = null;\n    this.queuedPromise = null;\n    this.queuedPromiseFactory = null;\n  }\n  queue(promiseFactory) {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Throttler is disposed'));\n    }\n    if (this.activePromise) {\n      this.queuedPromiseFactory = promiseFactory;\n      if (!this.queuedPromise) {\n        const onComplete = () => {\n          this.queuedPromise = null;\n          if (this.isDisposed) {\n            return;\n          }\n          const result = this.queue(this.queuedPromiseFactory);\n          this.queuedPromiseFactory = null;\n          return result;\n        };\n        this.queuedPromise = new Promise(resolve => {\n          this.activePromise.then(onComplete, onComplete).then(resolve);\n        });\n      }\n      return new Promise((resolve, reject) => {\n        this.queuedPromise.then(resolve, reject);\n      });\n    }\n    this.activePromise = promiseFactory();\n    return new Promise((resolve, reject) => {\n      this.activePromise.then(result => {\n        this.activePromise = null;\n        resolve(result);\n      }, err => {\n        this.activePromise = null;\n        reject(err);\n      });\n    });\n  }\n  dispose() {\n    this.isDisposed = true;\n  }\n}\nconst timeoutDeferred = (timeout, fn) => {\n  let scheduled = true;\n  const handle = setTimeout(() => {\n    scheduled = false;\n    fn();\n  }, timeout);\n  return {\n    isTriggered: () => scheduled,\n    dispose: () => {\n      clearTimeout(handle);\n      scheduled = false;\n    }\n  };\n};\nconst microtaskDeferred = fn => {\n  let scheduled = true;\n  queueMicrotask(() => {\n    if (scheduled) {\n      scheduled = false;\n      fn();\n    }\n  });\n  return {\n    isTriggered: () => scheduled,\n    dispose: () => {\n      scheduled = false;\n    }\n  };\n};\n/**\n * A helper to delay (debounce) execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer {\n  constructor(defaultDelay) {\n    this.defaultDelay = defaultDelay;\n    this.deferred = null;\n    this.completionPromise = null;\n    this.doResolve = null;\n    this.doReject = null;\n    this.task = null;\n  }\n  trigger(task, delay = this.defaultDelay) {\n    this.task = task;\n    this.cancelTimeout();\n    if (!this.completionPromise) {\n      this.completionPromise = new Promise((resolve, reject) => {\n        this.doResolve = resolve;\n        this.doReject = reject;\n      }).then(() => {\n        this.completionPromise = null;\n        this.doResolve = null;\n        if (this.task) {\n          const task = this.task;\n          this.task = null;\n          return task();\n        }\n        return undefined;\n      });\n    }\n    const fn = () => {\n      var _a;\n      this.deferred = null;\n      (_a = this.doResolve) === null || _a === void 0 ? void 0 : _a.call(this, null);\n    };\n    this.deferred = delay === MicrotaskDelay ? microtaskDeferred(fn) : timeoutDeferred(delay, fn);\n    return this.completionPromise;\n  }\n  isTriggered() {\n    var _a;\n    return !!((_a = this.deferred) === null || _a === void 0 ? void 0 : _a.isTriggered());\n  }\n  cancel() {\n    var _a;\n    this.cancelTimeout();\n    if (this.completionPromise) {\n      (_a = this.doReject) === null || _a === void 0 ? void 0 : _a.call(this, new CancellationError());\n      this.completionPromise = null;\n    }\n  }\n  cancelTimeout() {\n    var _a;\n    (_a = this.deferred) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.deferred = null;\n  }\n  dispose() {\n    this.cancel();\n  }\n}\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * The mail man is clever and waits for a certain amount of time, before going\n * out to deliver letters. While the mail man is going out, more letters arrive\n * and can only be delivered once he is back. Once he is back the mail man will\n * do one more trip to deliver the letters that have accumulated while he was out.\n */\nexport class ThrottledDelayer {\n  constructor(defaultDelay) {\n    this.delayer = new Delayer(defaultDelay);\n    this.throttler = new Throttler();\n  }\n  trigger(promiseFactory, delay) {\n    return this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay);\n  }\n  cancel() {\n    this.delayer.cancel();\n  }\n  dispose() {\n    this.delayer.dispose();\n    this.throttler.dispose();\n  }\n}\nexport function timeout(millis, token) {\n  if (!token) {\n    return createCancelablePromise(token => timeout(millis, token));\n  }\n  return new Promise((resolve, reject) => {\n    const handle = setTimeout(() => {\n      disposable.dispose();\n      resolve();\n    }, millis);\n    const disposable = token.onCancellationRequested(() => {\n      clearTimeout(handle);\n      disposable.dispose();\n      reject(new CancellationError());\n    });\n  });\n}\n/**\n * Creates a timeout that can be disposed using its returned value.\n * @param handler The timeout handler.\n * @param timeout An optional timeout in milliseconds.\n * @param store An optional {@link DisposableStore} that will have the timeout disposable managed automatically.\n *\n * @example\n * const store = new DisposableStore;\n * // Call the timeout after 1000ms at which point it will be automatically\n * // evicted from the store.\n * const timeoutDisposable = disposableTimeout(() => {}, 1000, store);\n *\n * if (foo) {\n *   // Cancel the timeout and evict it from store.\n *   timeoutDisposable.dispose();\n * }\n */\nexport function disposableTimeout(handler, timeout = 0, store) {\n  const timer = setTimeout(() => {\n    handler();\n    if (store) {\n      disposable.dispose();\n    }\n  }, timeout);\n  const disposable = toDisposable(() => {\n    clearTimeout(timer);\n    store === null || store === void 0 ? void 0 : store.deleteAndLeak(disposable);\n  });\n  store === null || store === void 0 ? void 0 : store.add(disposable);\n  return disposable;\n}\nexport function first(promiseFactories, shouldStop = t => !!t, defaultValue = null) {\n  let index = 0;\n  const len = promiseFactories.length;\n  const loop = () => {\n    if (index >= len) {\n      return Promise.resolve(defaultValue);\n    }\n    const factory = promiseFactories[index++];\n    const promise = Promise.resolve(factory());\n    return promise.then(result => {\n      if (shouldStop(result)) {\n        return Promise.resolve(result);\n      }\n      return loop();\n    });\n  };\n  return loop();\n}\nexport class TimeoutTimer {\n  constructor(runner, timeout) {\n    this._token = -1;\n    if (typeof runner === 'function' && typeof timeout === 'number') {\n      this.setIfNotSet(runner, timeout);\n    }\n  }\n  dispose() {\n    this.cancel();\n  }\n  cancel() {\n    if (this._token !== -1) {\n      clearTimeout(this._token);\n      this._token = -1;\n    }\n  }\n  cancelAndSet(runner, timeout) {\n    this.cancel();\n    this._token = setTimeout(() => {\n      this._token = -1;\n      runner();\n    }, timeout);\n  }\n  setIfNotSet(runner, timeout) {\n    if (this._token !== -1) {\n      // timer is already set\n      return;\n    }\n    this._token = setTimeout(() => {\n      this._token = -1;\n      runner();\n    }, timeout);\n  }\n}\nexport class IntervalTimer {\n  constructor() {\n    this._token = -1;\n  }\n  dispose() {\n    this.cancel();\n  }\n  cancel() {\n    if (this._token !== -1) {\n      clearInterval(this._token);\n      this._token = -1;\n    }\n  }\n  cancelAndSet(runner, interval) {\n    this.cancel();\n    this._token = setInterval(() => {\n      runner();\n    }, interval);\n  }\n}\nexport class RunOnceScheduler {\n  constructor(runner, delay) {\n    this.timeoutToken = -1;\n    this.runner = runner;\n    this.timeout = delay;\n    this.timeoutHandler = this.onTimeout.bind(this);\n  }\n  /**\n   * Dispose RunOnceScheduler\n   */\n  dispose() {\n    this.cancel();\n    this.runner = null;\n  }\n  /**\n   * Cancel current scheduled runner (if any).\n   */\n  cancel() {\n    if (this.isScheduled()) {\n      clearTimeout(this.timeoutToken);\n      this.timeoutToken = -1;\n    }\n  }\n  /**\n   * Cancel previous runner (if any) & schedule a new runner.\n   */\n  schedule(delay = this.timeout) {\n    this.cancel();\n    this.timeoutToken = setTimeout(this.timeoutHandler, delay);\n  }\n  get delay() {\n    return this.timeout;\n  }\n  set delay(value) {\n    this.timeout = value;\n  }\n  /**\n   * Returns true if scheduled.\n   */\n  isScheduled() {\n    return this.timeoutToken !== -1;\n  }\n  onTimeout() {\n    this.timeoutToken = -1;\n    if (this.runner) {\n      this.doRun();\n    }\n  }\n  doRun() {\n    var _a;\n    (_a = this.runner) === null || _a === void 0 ? void 0 : _a.call(this);\n  }\n}\n/**\n * Execute the callback the next time the browser is idle, returning an\n * {@link IDisposable} that will cancel the callback when disposed. This wraps\n * [requestIdleCallback] so it will fallback to [setTimeout] if the environment\n * doesn't support it.\n *\n * @param callback The callback to run when idle, this includes an\n * [IdleDeadline] that provides the time alloted for the idle callback by the\n * browser. Not respecting this deadline will result in a degraded user\n * experience.\n * @param timeout A timeout at which point to queue no longer wait for an idle\n * callback but queue it on the regular event loop (like setTimeout). Typically\n * this should not be used.\n *\n * [IdleDeadline]: https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline\n * [requestIdleCallback]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\n * [setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout\n */\nexport let runWhenIdle;\n(function () {\n  if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\n    runWhenIdle = runner => {\n      setTimeout0(() => {\n        if (disposed) {\n          return;\n        }\n        const end = Date.now() + 15; // one frame at 64fps\n        runner(Object.freeze({\n          didTimeout: true,\n          timeRemaining() {\n            return Math.max(0, end - Date.now());\n          }\n        }));\n      });\n      let disposed = false;\n      return {\n        dispose() {\n          if (disposed) {\n            return;\n          }\n          disposed = true;\n        }\n      };\n    };\n  } else {\n    runWhenIdle = (runner, timeout) => {\n      const handle = requestIdleCallback(runner, typeof timeout === 'number' ? {\n        timeout\n      } : undefined);\n      let disposed = false;\n      return {\n        dispose() {\n          if (disposed) {\n            return;\n          }\n          disposed = true;\n          cancelIdleCallback(handle);\n        }\n      };\n    };\n  }\n})();\n/**\n * An implementation of the \"idle-until-urgent\"-strategy as introduced\n * here: https://philipwalton.com/articles/idle-until-urgent/\n */\nexport class IdleValue {\n  constructor(executor) {\n    this._didRun = false;\n    this._executor = () => {\n      try {\n        this._value = executor();\n      } catch (err) {\n        this._error = err;\n      } finally {\n        this._didRun = true;\n      }\n    };\n    this._handle = runWhenIdle(() => this._executor());\n  }\n  dispose() {\n    this._handle.dispose();\n  }\n  get value() {\n    if (!this._didRun) {\n      this._handle.dispose();\n      this._executor();\n    }\n    if (this._error) {\n      throw this._error;\n    }\n    return this._value;\n  }\n  get isInitialized() {\n    return this._didRun;\n  }\n}\n/**\n * Creates a promise whose resolution or rejection can be controlled imperatively.\n */\nexport class DeferredPromise {\n  get isRejected() {\n    var _a;\n    return ((_a = this.outcome) === null || _a === void 0 ? void 0 : _a.outcome) === 1 /* DeferredOutcome.Rejected */;\n  }\n\n  get isSettled() {\n    return !!this.outcome;\n  }\n  constructor() {\n    this.p = new Promise((c, e) => {\n      this.completeCallback = c;\n      this.errorCallback = e;\n    });\n  }\n  complete(value) {\n    return new Promise(resolve => {\n      this.completeCallback(value);\n      this.outcome = {\n        outcome: 0 /* DeferredOutcome.Resolved */,\n        value\n      };\n      resolve();\n    });\n  }\n  error(err) {\n    return new Promise(resolve => {\n      this.errorCallback(err);\n      this.outcome = {\n        outcome: 1 /* DeferredOutcome.Rejected */,\n        value: err\n      };\n      resolve();\n    });\n  }\n  cancel() {\n    return this.error(new CancellationError());\n  }\n}\n//#endregion\n//#region Promises\nexport var Promises;\n(function (Promises) {\n  /**\n   * A drop-in replacement for `Promise.all` with the only difference\n   * that the method awaits every promise to either fulfill or reject.\n   *\n   * Similar to `Promise.all`, only the first error will be returned\n   * if any.\n   */\n  function settled(promises) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let firstError = undefined;\n      const result = yield Promise.all(promises.map(promise => promise.then(value => value, error => {\n        if (!firstError) {\n          firstError = error;\n        }\n        return undefined; // do not rethrow so that other promises can settle\n      })));\n\n      if (typeof firstError !== 'undefined') {\n        throw firstError;\n      }\n      return result; // cast is needed and protected by the `throw` above\n    });\n  }\n\n  Promises.settled = settled;\n  /**\n   * A helper to create a new `Promise<T>` with a body that is a promise\n   * itself. By default, an error that raises from the async body will\n   * end up as a unhandled rejection, so this utility properly awaits the\n   * body and rejects the promise as a normal promise does without async\n   * body.\n   *\n   * This method should only be used in rare cases where otherwise `async`\n   * cannot be used (e.g. when callbacks are involved that require this).\n   */\n  function withAsyncBody(bodyFn) {\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield bodyFn(resolve, reject);\n      } catch (error) {\n        reject(error);\n      }\n    }));\n  }\n  Promises.withAsyncBody = withAsyncBody;\n})(Promises || (Promises = {}));\n/**\n * A rich implementation for an `AsyncIterable<T>`.\n */\nexport class AsyncIterableObject {\n  static fromArray(items) {\n    return new AsyncIterableObject(writer => {\n      writer.emitMany(items);\n    });\n  }\n  static fromPromise(promise) {\n    return new AsyncIterableObject(emitter => __awaiter(this, void 0, void 0, function* () {\n      emitter.emitMany(yield promise);\n    }));\n  }\n  static fromPromises(promises) {\n    return new AsyncIterableObject(emitter => __awaiter(this, void 0, void 0, function* () {\n      yield Promise.all(promises.map(p => __awaiter(this, void 0, void 0, function* () {\n        return emitter.emitOne(yield p);\n      })));\n    }));\n  }\n  static merge(iterables) {\n    return new AsyncIterableObject(emitter => __awaiter(this, void 0, void 0, function* () {\n      yield Promise.all(iterables.map(iterable => {\n        var _a, iterable_1, iterable_1_1;\n        return __awaiter(this, void 0, void 0, function* () {\n          var _b, e_1, _c, _d;\n          try {\n            for (_a = true, iterable_1 = __asyncValues(iterable); iterable_1_1 = yield iterable_1.next(), _b = iterable_1_1.done, !_b; _a = true) {\n              _d = iterable_1_1.value;\n              _a = false;\n              const item = _d;\n              emitter.emitOne(item);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (!_a && !_b && (_c = iterable_1.return)) yield _c.call(iterable_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        });\n      }));\n    }));\n  }\n  constructor(executor) {\n    this._state = 0 /* AsyncIterableSourceState.Initial */;\n    this._results = [];\n    this._error = null;\n    this._onStateChanged = new Emitter();\n    queueMicrotask(() => __awaiter(this, void 0, void 0, function* () {\n      const writer = {\n        emitOne: item => this.emitOne(item),\n        emitMany: items => this.emitMany(items),\n        reject: error => this.reject(error)\n      };\n      try {\n        yield Promise.resolve(executor(writer));\n        this.resolve();\n      } catch (err) {\n        this.reject(err);\n      } finally {\n        writer.emitOne = undefined;\n        writer.emitMany = undefined;\n        writer.reject = undefined;\n      }\n    }));\n  }\n  [Symbol.asyncIterator]() {\n    let i = 0;\n    return {\n      next: () => __awaiter(this, void 0, void 0, function* () {\n        do {\n          if (this._state === 2 /* AsyncIterableSourceState.DoneError */) {\n            throw this._error;\n          }\n          if (i < this._results.length) {\n            return {\n              done: false,\n              value: this._results[i++]\n            };\n          }\n          if (this._state === 1 /* AsyncIterableSourceState.DoneOK */) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          yield Event.toPromise(this._onStateChanged.event);\n        } while (true);\n      })\n    };\n  }\n  static map(iterable, mapFn) {\n    return new AsyncIterableObject(emitter => __awaiter(this, void 0, void 0, function* () {\n      var _a, e_2, _b, _c;\n      try {\n        for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield iterable_2.next(), _a = iterable_2_1.done, !_a; _d = true) {\n          _c = iterable_2_1.value;\n          _d = false;\n          const item = _c;\n          emitter.emitOne(mapFn(item));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = iterable_2.return)) yield _b.call(iterable_2);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }));\n  }\n  map(mapFn) {\n    return AsyncIterableObject.map(this, mapFn);\n  }\n  static filter(iterable, filterFn) {\n    return new AsyncIterableObject(emitter => __awaiter(this, void 0, void 0, function* () {\n      var _a, e_3, _b, _c;\n      try {\n        for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield iterable_3.next(), _a = iterable_3_1.done, !_a; _d = true) {\n          _c = iterable_3_1.value;\n          _d = false;\n          const item = _c;\n          if (filterFn(item)) {\n            emitter.emitOne(item);\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = iterable_3.return)) yield _b.call(iterable_3);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }));\n  }\n  filter(filterFn) {\n    return AsyncIterableObject.filter(this, filterFn);\n  }\n  static coalesce(iterable) {\n    return AsyncIterableObject.filter(iterable, item => !!item);\n  }\n  coalesce() {\n    return AsyncIterableObject.coalesce(this);\n  }\n  static toPromise(iterable) {\n    var _a, iterable_4, iterable_4_1;\n    var _b, e_4, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = [];\n      try {\n        for (_a = true, iterable_4 = __asyncValues(iterable); iterable_4_1 = yield iterable_4.next(), _b = iterable_4_1.done, !_b; _a = true) {\n          _d = iterable_4_1.value;\n          _a = false;\n          const item = _d;\n          result.push(item);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (!_a && !_b && (_c = iterable_4.return)) yield _c.call(iterable_4);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n      return result;\n    });\n  }\n  toPromise() {\n    return AsyncIterableObject.toPromise(this);\n  }\n  /**\n   * The value will be appended at the end.\n   *\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  emitOne(value) {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    // it is important to add new values at the end,\n    // as we may have iterators already running on the array\n    this._results.push(value);\n    this._onStateChanged.fire();\n  }\n  /**\n   * The values will be appended at the end.\n   *\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  emitMany(values) {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    // it is important to add new values at the end,\n    // as we may have iterators already running on the array\n    this._results = this._results.concat(values);\n    this._onStateChanged.fire();\n  }\n  /**\n   * Calling `resolve()` will mark the result array as complete.\n   *\n   * **NOTE** `resolve()` must be called, otherwise all consumers of this iterable will hang indefinitely, similar to a non-resolved promise.\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  resolve() {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    this._state = 1 /* AsyncIterableSourceState.DoneOK */;\n    this._onStateChanged.fire();\n  }\n  /**\n   * Writing an error will permanently invalidate this iterable.\n   * The current users will receive an error thrown, as will all future users.\n   *\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  reject(error) {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    this._state = 2 /* AsyncIterableSourceState.DoneError */;\n    this._error = error;\n    this._onStateChanged.fire();\n  }\n}\nAsyncIterableObject.EMPTY = AsyncIterableObject.fromArray([]);\nexport class CancelableAsyncIterableObject extends AsyncIterableObject {\n  constructor(_source, executor) {\n    super(executor);\n    this._source = _source;\n  }\n  cancel() {\n    this._source.cancel();\n  }\n}\nexport function createCancelableAsyncIterable(callback) {\n  const source = new CancellationTokenSource();\n  const innerIterable = callback(source.token);\n  return new CancelableAsyncIterableObject(source, emitter => __awaiter(this, void 0, void 0, function* () {\n    var _a, e_5, _b, _c;\n    const subscription = source.token.onCancellationRequested(() => {\n      subscription.dispose();\n      source.dispose();\n      emitter.reject(new CancellationError());\n    });\n    try {\n      try {\n        for (var _d = true, innerIterable_1 = __asyncValues(innerIterable), innerIterable_1_1; innerIterable_1_1 = yield innerIterable_1.next(), _a = innerIterable_1_1.done, !_a; _d = true) {\n          _c = innerIterable_1_1.value;\n          _d = false;\n          const item = _c;\n          if (source.token.isCancellationRequested) {\n            // canceled in the meantime\n            return;\n          }\n          emitter.emitOne(item);\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (!_d && !_a && (_b = innerIterable_1.return)) yield _b.call(innerIterable_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      subscription.dispose();\n      source.dispose();\n    } catch (err) {\n      subscription.dispose();\n      source.dispose();\n      emitter.reject(err);\n    }\n  }));\n}\n//#endregion","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__asyncValues","o","Symbol","asyncIterator","TypeError","m","i","call","__values","iterator","verb","n","v","settle","d","CancellationTokenSource","CancellationError","Emitter","Event","toDisposable","setTimeout0","MicrotaskDelay","isThenable","obj","createCancelablePromise","callback","source","thenable","token","promise","subscription","onCancellationRequested","dispose","err","cancel","catch","undefined","finally","onfinally","raceCancellation","defaultValue","ref","Throttler","constructor","isDisposed","activePromise","queuedPromise","queuedPromiseFactory","queue","promiseFactory","Error","onComplete","timeoutDeferred","timeout","fn","scheduled","handle","setTimeout","isTriggered","clearTimeout","microtaskDeferred","queueMicrotask","Delayer","defaultDelay","deferred","completionPromise","doResolve","doReject","task","trigger","delay","cancelTimeout","_a","ThrottledDelayer","delayer","throttler","millis","disposable","disposableTimeout","handler","store","timer","deleteAndLeak","add","first","promiseFactories","shouldStop","t","index","len","length","loop","factory","TimeoutTimer","runner","_token","setIfNotSet","cancelAndSet","IntervalTimer","clearInterval","interval","setInterval","RunOnceScheduler","timeoutToken","timeoutHandler","onTimeout","bind","isScheduled","schedule","doRun","runWhenIdle","requestIdleCallback","cancelIdleCallback","disposed","end","Date","now","Object","freeze","didTimeout","timeRemaining","Math","max","IdleValue","executor","_didRun","_executor","_value","_error","_handle","isInitialized","DeferredPromise","isRejected","outcome","isSettled","p","c","completeCallback","errorCallback","complete","error","Promises","settled","promises","firstError","all","map","withAsyncBody","bodyFn","AsyncIterableObject","fromArray","items","writer","emitMany","fromPromise","emitter","fromPromises","emitOne","merge","iterables","iterable","iterable_1","iterable_1_1","_b","e_1","_c","_d","item","e_1_1","return","_state","_results","_onStateChanged","toPromise","event","mapFn","e_2","iterable_2","iterable_2_1","e_2_1","filter","filterFn","e_3","iterable_3","iterable_3_1","e_3_1","coalesce","iterable_4","iterable_4_1","e_4","push","e_4_1","fire","values","concat","EMPTY","CancelableAsyncIterableObject","_source","createCancelableAsyncIterable","innerIterable","e_5","innerIterable_1","innerIterable_1_1","isCancellationRequested","e_5_1"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/base/common/async.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nimport { CancellationTokenSource } from './cancellation.js';\nimport { CancellationError } from './errors.js';\nimport { Emitter, Event } from './event.js';\nimport { toDisposable } from './lifecycle.js';\nimport { setTimeout0 } from './platform.js';\nimport { MicrotaskDelay } from './symbols.js';\nexport function isThenable(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nexport function createCancelablePromise(callback) {\n    const source = new CancellationTokenSource();\n    const thenable = callback(source.token);\n    const promise = new Promise((resolve, reject) => {\n        const subscription = source.token.onCancellationRequested(() => {\n            subscription.dispose();\n            source.dispose();\n            reject(new CancellationError());\n        });\n        Promise.resolve(thenable).then(value => {\n            subscription.dispose();\n            source.dispose();\n            resolve(value);\n        }, err => {\n            subscription.dispose();\n            source.dispose();\n            reject(err);\n        });\n    });\n    return new class {\n        cancel() {\n            source.cancel();\n        }\n        then(resolve, reject) {\n            return promise.then(resolve, reject);\n        }\n        catch(reject) {\n            return this.then(undefined, reject);\n        }\n        finally(onfinally) {\n            return promise.finally(onfinally);\n        }\n    };\n}\nexport function raceCancellation(promise, token, defaultValue) {\n    return new Promise((resolve, reject) => {\n        const ref = token.onCancellationRequested(() => {\n            ref.dispose();\n            resolve(defaultValue);\n        });\n        promise.then(resolve, reject).finally(() => ref.dispose());\n    });\n}\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tconst throttler = new Throttler();\n * \t\tconst letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n    constructor() {\n        this.isDisposed = false;\n        this.activePromise = null;\n        this.queuedPromise = null;\n        this.queuedPromiseFactory = null;\n    }\n    queue(promiseFactory) {\n        if (this.isDisposed) {\n            return Promise.reject(new Error('Throttler is disposed'));\n        }\n        if (this.activePromise) {\n            this.queuedPromiseFactory = promiseFactory;\n            if (!this.queuedPromise) {\n                const onComplete = () => {\n                    this.queuedPromise = null;\n                    if (this.isDisposed) {\n                        return;\n                    }\n                    const result = this.queue(this.queuedPromiseFactory);\n                    this.queuedPromiseFactory = null;\n                    return result;\n                };\n                this.queuedPromise = new Promise(resolve => {\n                    this.activePromise.then(onComplete, onComplete).then(resolve);\n                });\n            }\n            return new Promise((resolve, reject) => {\n                this.queuedPromise.then(resolve, reject);\n            });\n        }\n        this.activePromise = promiseFactory();\n        return new Promise((resolve, reject) => {\n            this.activePromise.then((result) => {\n                this.activePromise = null;\n                resolve(result);\n            }, (err) => {\n                this.activePromise = null;\n                reject(err);\n            });\n        });\n    }\n    dispose() {\n        this.isDisposed = true;\n    }\n}\nconst timeoutDeferred = (timeout, fn) => {\n    let scheduled = true;\n    const handle = setTimeout(() => {\n        scheduled = false;\n        fn();\n    }, timeout);\n    return {\n        isTriggered: () => scheduled,\n        dispose: () => {\n            clearTimeout(handle);\n            scheduled = false;\n        },\n    };\n};\nconst microtaskDeferred = (fn) => {\n    let scheduled = true;\n    queueMicrotask(() => {\n        if (scheduled) {\n            scheduled = false;\n            fn();\n        }\n    });\n    return {\n        isTriggered: () => scheduled,\n        dispose: () => { scheduled = false; },\n    };\n};\n/**\n * A helper to delay (debounce) execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer {\n    constructor(defaultDelay) {\n        this.defaultDelay = defaultDelay;\n        this.deferred = null;\n        this.completionPromise = null;\n        this.doResolve = null;\n        this.doReject = null;\n        this.task = null;\n    }\n    trigger(task, delay = this.defaultDelay) {\n        this.task = task;\n        this.cancelTimeout();\n        if (!this.completionPromise) {\n            this.completionPromise = new Promise((resolve, reject) => {\n                this.doResolve = resolve;\n                this.doReject = reject;\n            }).then(() => {\n                this.completionPromise = null;\n                this.doResolve = null;\n                if (this.task) {\n                    const task = this.task;\n                    this.task = null;\n                    return task();\n                }\n                return undefined;\n            });\n        }\n        const fn = () => {\n            var _a;\n            this.deferred = null;\n            (_a = this.doResolve) === null || _a === void 0 ? void 0 : _a.call(this, null);\n        };\n        this.deferred = delay === MicrotaskDelay ? microtaskDeferred(fn) : timeoutDeferred(delay, fn);\n        return this.completionPromise;\n    }\n    isTriggered() {\n        var _a;\n        return !!((_a = this.deferred) === null || _a === void 0 ? void 0 : _a.isTriggered());\n    }\n    cancel() {\n        var _a;\n        this.cancelTimeout();\n        if (this.completionPromise) {\n            (_a = this.doReject) === null || _a === void 0 ? void 0 : _a.call(this, new CancellationError());\n            this.completionPromise = null;\n        }\n    }\n    cancelTimeout() {\n        var _a;\n        (_a = this.deferred) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.deferred = null;\n    }\n    dispose() {\n        this.cancel();\n    }\n}\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * The mail man is clever and waits for a certain amount of time, before going\n * out to deliver letters. While the mail man is going out, more letters arrive\n * and can only be delivered once he is back. Once he is back the mail man will\n * do one more trip to deliver the letters that have accumulated while he was out.\n */\nexport class ThrottledDelayer {\n    constructor(defaultDelay) {\n        this.delayer = new Delayer(defaultDelay);\n        this.throttler = new Throttler();\n    }\n    trigger(promiseFactory, delay) {\n        return this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay);\n    }\n    cancel() {\n        this.delayer.cancel();\n    }\n    dispose() {\n        this.delayer.dispose();\n        this.throttler.dispose();\n    }\n}\nexport function timeout(millis, token) {\n    if (!token) {\n        return createCancelablePromise(token => timeout(millis, token));\n    }\n    return new Promise((resolve, reject) => {\n        const handle = setTimeout(() => {\n            disposable.dispose();\n            resolve();\n        }, millis);\n        const disposable = token.onCancellationRequested(() => {\n            clearTimeout(handle);\n            disposable.dispose();\n            reject(new CancellationError());\n        });\n    });\n}\n/**\n * Creates a timeout that can be disposed using its returned value.\n * @param handler The timeout handler.\n * @param timeout An optional timeout in milliseconds.\n * @param store An optional {@link DisposableStore} that will have the timeout disposable managed automatically.\n *\n * @example\n * const store = new DisposableStore;\n * // Call the timeout after 1000ms at which point it will be automatically\n * // evicted from the store.\n * const timeoutDisposable = disposableTimeout(() => {}, 1000, store);\n *\n * if (foo) {\n *   // Cancel the timeout and evict it from store.\n *   timeoutDisposable.dispose();\n * }\n */\nexport function disposableTimeout(handler, timeout = 0, store) {\n    const timer = setTimeout(() => {\n        handler();\n        if (store) {\n            disposable.dispose();\n        }\n    }, timeout);\n    const disposable = toDisposable(() => {\n        clearTimeout(timer);\n        store === null || store === void 0 ? void 0 : store.deleteAndLeak(disposable);\n    });\n    store === null || store === void 0 ? void 0 : store.add(disposable);\n    return disposable;\n}\nexport function first(promiseFactories, shouldStop = t => !!t, defaultValue = null) {\n    let index = 0;\n    const len = promiseFactories.length;\n    const loop = () => {\n        if (index >= len) {\n            return Promise.resolve(defaultValue);\n        }\n        const factory = promiseFactories[index++];\n        const promise = Promise.resolve(factory());\n        return promise.then(result => {\n            if (shouldStop(result)) {\n                return Promise.resolve(result);\n            }\n            return loop();\n        });\n    };\n    return loop();\n}\nexport class TimeoutTimer {\n    constructor(runner, timeout) {\n        this._token = -1;\n        if (typeof runner === 'function' && typeof timeout === 'number') {\n            this.setIfNotSet(runner, timeout);\n        }\n    }\n    dispose() {\n        this.cancel();\n    }\n    cancel() {\n        if (this._token !== -1) {\n            clearTimeout(this._token);\n            this._token = -1;\n        }\n    }\n    cancelAndSet(runner, timeout) {\n        this.cancel();\n        this._token = setTimeout(() => {\n            this._token = -1;\n            runner();\n        }, timeout);\n    }\n    setIfNotSet(runner, timeout) {\n        if (this._token !== -1) {\n            // timer is already set\n            return;\n        }\n        this._token = setTimeout(() => {\n            this._token = -1;\n            runner();\n        }, timeout);\n    }\n}\nexport class IntervalTimer {\n    constructor() {\n        this._token = -1;\n    }\n    dispose() {\n        this.cancel();\n    }\n    cancel() {\n        if (this._token !== -1) {\n            clearInterval(this._token);\n            this._token = -1;\n        }\n    }\n    cancelAndSet(runner, interval) {\n        this.cancel();\n        this._token = setInterval(() => {\n            runner();\n        }, interval);\n    }\n}\nexport class RunOnceScheduler {\n    constructor(runner, delay) {\n        this.timeoutToken = -1;\n        this.runner = runner;\n        this.timeout = delay;\n        this.timeoutHandler = this.onTimeout.bind(this);\n    }\n    /**\n     * Dispose RunOnceScheduler\n     */\n    dispose() {\n        this.cancel();\n        this.runner = null;\n    }\n    /**\n     * Cancel current scheduled runner (if any).\n     */\n    cancel() {\n        if (this.isScheduled()) {\n            clearTimeout(this.timeoutToken);\n            this.timeoutToken = -1;\n        }\n    }\n    /**\n     * Cancel previous runner (if any) & schedule a new runner.\n     */\n    schedule(delay = this.timeout) {\n        this.cancel();\n        this.timeoutToken = setTimeout(this.timeoutHandler, delay);\n    }\n    get delay() {\n        return this.timeout;\n    }\n    set delay(value) {\n        this.timeout = value;\n    }\n    /**\n     * Returns true if scheduled.\n     */\n    isScheduled() {\n        return this.timeoutToken !== -1;\n    }\n    onTimeout() {\n        this.timeoutToken = -1;\n        if (this.runner) {\n            this.doRun();\n        }\n    }\n    doRun() {\n        var _a;\n        (_a = this.runner) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n}\n/**\n * Execute the callback the next time the browser is idle, returning an\n * {@link IDisposable} that will cancel the callback when disposed. This wraps\n * [requestIdleCallback] so it will fallback to [setTimeout] if the environment\n * doesn't support it.\n *\n * @param callback The callback to run when idle, this includes an\n * [IdleDeadline] that provides the time alloted for the idle callback by the\n * browser. Not respecting this deadline will result in a degraded user\n * experience.\n * @param timeout A timeout at which point to queue no longer wait for an idle\n * callback but queue it on the regular event loop (like setTimeout). Typically\n * this should not be used.\n *\n * [IdleDeadline]: https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline\n * [requestIdleCallback]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\n * [setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout\n */\nexport let runWhenIdle;\n(function () {\n    if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\n        runWhenIdle = (runner) => {\n            setTimeout0(() => {\n                if (disposed) {\n                    return;\n                }\n                const end = Date.now() + 15; // one frame at 64fps\n                runner(Object.freeze({\n                    didTimeout: true,\n                    timeRemaining() {\n                        return Math.max(0, end - Date.now());\n                    }\n                }));\n            });\n            let disposed = false;\n            return {\n                dispose() {\n                    if (disposed) {\n                        return;\n                    }\n                    disposed = true;\n                }\n            };\n        };\n    }\n    else {\n        runWhenIdle = (runner, timeout) => {\n            const handle = requestIdleCallback(runner, typeof timeout === 'number' ? { timeout } : undefined);\n            let disposed = false;\n            return {\n                dispose() {\n                    if (disposed) {\n                        return;\n                    }\n                    disposed = true;\n                    cancelIdleCallback(handle);\n                }\n            };\n        };\n    }\n})();\n/**\n * An implementation of the \"idle-until-urgent\"-strategy as introduced\n * here: https://philipwalton.com/articles/idle-until-urgent/\n */\nexport class IdleValue {\n    constructor(executor) {\n        this._didRun = false;\n        this._executor = () => {\n            try {\n                this._value = executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        };\n        this._handle = runWhenIdle(() => this._executor());\n    }\n    dispose() {\n        this._handle.dispose();\n    }\n    get value() {\n        if (!this._didRun) {\n            this._handle.dispose();\n            this._executor();\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    get isInitialized() {\n        return this._didRun;\n    }\n}\n/**\n * Creates a promise whose resolution or rejection can be controlled imperatively.\n */\nexport class DeferredPromise {\n    get isRejected() {\n        var _a;\n        return ((_a = this.outcome) === null || _a === void 0 ? void 0 : _a.outcome) === 1 /* DeferredOutcome.Rejected */;\n    }\n    get isSettled() {\n        return !!this.outcome;\n    }\n    constructor() {\n        this.p = new Promise((c, e) => {\n            this.completeCallback = c;\n            this.errorCallback = e;\n        });\n    }\n    complete(value) {\n        return new Promise(resolve => {\n            this.completeCallback(value);\n            this.outcome = { outcome: 0 /* DeferredOutcome.Resolved */, value };\n            resolve();\n        });\n    }\n    error(err) {\n        return new Promise(resolve => {\n            this.errorCallback(err);\n            this.outcome = { outcome: 1 /* DeferredOutcome.Rejected */, value: err };\n            resolve();\n        });\n    }\n    cancel() {\n        return this.error(new CancellationError());\n    }\n}\n//#endregion\n//#region Promises\nexport var Promises;\n(function (Promises) {\n    /**\n     * A drop-in replacement for `Promise.all` with the only difference\n     * that the method awaits every promise to either fulfill or reject.\n     *\n     * Similar to `Promise.all`, only the first error will be returned\n     * if any.\n     */\n    function settled(promises) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let firstError = undefined;\n            const result = yield Promise.all(promises.map(promise => promise.then(value => value, error => {\n                if (!firstError) {\n                    firstError = error;\n                }\n                return undefined; // do not rethrow so that other promises can settle\n            })));\n            if (typeof firstError !== 'undefined') {\n                throw firstError;\n            }\n            return result; // cast is needed and protected by the `throw` above\n        });\n    }\n    Promises.settled = settled;\n    /**\n     * A helper to create a new `Promise<T>` with a body that is a promise\n     * itself. By default, an error that raises from the async body will\n     * end up as a unhandled rejection, so this utility properly awaits the\n     * body and rejects the promise as a normal promise does without async\n     * body.\n     *\n     * This method should only be used in rare cases where otherwise `async`\n     * cannot be used (e.g. when callbacks are involved that require this).\n     */\n    function withAsyncBody(bodyFn) {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield bodyFn(resolve, reject);\n            }\n            catch (error) {\n                reject(error);\n            }\n        }));\n    }\n    Promises.withAsyncBody = withAsyncBody;\n})(Promises || (Promises = {}));\n/**\n * A rich implementation for an `AsyncIterable<T>`.\n */\nexport class AsyncIterableObject {\n    static fromArray(items) {\n        return new AsyncIterableObject((writer) => {\n            writer.emitMany(items);\n        });\n    }\n    static fromPromise(promise) {\n        return new AsyncIterableObject((emitter) => __awaiter(this, void 0, void 0, function* () {\n            emitter.emitMany(yield promise);\n        }));\n    }\n    static fromPromises(promises) {\n        return new AsyncIterableObject((emitter) => __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(promises.map((p) => __awaiter(this, void 0, void 0, function* () { return emitter.emitOne(yield p); })));\n        }));\n    }\n    static merge(iterables) {\n        return new AsyncIterableObject((emitter) => __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(iterables.map((iterable) => { var _a, iterable_1, iterable_1_1; return __awaiter(this, void 0, void 0, function* () {\n                var _b, e_1, _c, _d;\n                try {\n                    for (_a = true, iterable_1 = __asyncValues(iterable); iterable_1_1 = yield iterable_1.next(), _b = iterable_1_1.done, !_b; _a = true) {\n                        _d = iterable_1_1.value;\n                        _a = false;\n                        const item = _d;\n                        emitter.emitOne(item);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (!_a && !_b && (_c = iterable_1.return)) yield _c.call(iterable_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }); }));\n        }));\n    }\n    constructor(executor) {\n        this._state = 0 /* AsyncIterableSourceState.Initial */;\n        this._results = [];\n        this._error = null;\n        this._onStateChanged = new Emitter();\n        queueMicrotask(() => __awaiter(this, void 0, void 0, function* () {\n            const writer = {\n                emitOne: (item) => this.emitOne(item),\n                emitMany: (items) => this.emitMany(items),\n                reject: (error) => this.reject(error)\n            };\n            try {\n                yield Promise.resolve(executor(writer));\n                this.resolve();\n            }\n            catch (err) {\n                this.reject(err);\n            }\n            finally {\n                writer.emitOne = undefined;\n                writer.emitMany = undefined;\n                writer.reject = undefined;\n            }\n        }));\n    }\n    [Symbol.asyncIterator]() {\n        let i = 0;\n        return {\n            next: () => __awaiter(this, void 0, void 0, function* () {\n                do {\n                    if (this._state === 2 /* AsyncIterableSourceState.DoneError */) {\n                        throw this._error;\n                    }\n                    if (i < this._results.length) {\n                        return { done: false, value: this._results[i++] };\n                    }\n                    if (this._state === 1 /* AsyncIterableSourceState.DoneOK */) {\n                        return { done: true, value: undefined };\n                    }\n                    yield Event.toPromise(this._onStateChanged.event);\n                } while (true);\n            })\n        };\n    }\n    static map(iterable, mapFn) {\n        return new AsyncIterableObject((emitter) => __awaiter(this, void 0, void 0, function* () {\n            var _a, e_2, _b, _c;\n            try {\n                for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield iterable_2.next(), _a = iterable_2_1.done, !_a; _d = true) {\n                    _c = iterable_2_1.value;\n                    _d = false;\n                    const item = _c;\n                    emitter.emitOne(mapFn(item));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_2.return)) yield _b.call(iterable_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }));\n    }\n    map(mapFn) {\n        return AsyncIterableObject.map(this, mapFn);\n    }\n    static filter(iterable, filterFn) {\n        return new AsyncIterableObject((emitter) => __awaiter(this, void 0, void 0, function* () {\n            var _a, e_3, _b, _c;\n            try {\n                for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield iterable_3.next(), _a = iterable_3_1.done, !_a; _d = true) {\n                    _c = iterable_3_1.value;\n                    _d = false;\n                    const item = _c;\n                    if (filterFn(item)) {\n                        emitter.emitOne(item);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_3.return)) yield _b.call(iterable_3);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        }));\n    }\n    filter(filterFn) {\n        return AsyncIterableObject.filter(this, filterFn);\n    }\n    static coalesce(iterable) {\n        return AsyncIterableObject.filter(iterable, item => !!item);\n    }\n    coalesce() {\n        return AsyncIterableObject.coalesce(this);\n    }\n    static toPromise(iterable) {\n        var _a, iterable_4, iterable_4_1;\n        var _b, e_4, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = [];\n            try {\n                for (_a = true, iterable_4 = __asyncValues(iterable); iterable_4_1 = yield iterable_4.next(), _b = iterable_4_1.done, !_b; _a = true) {\n                    _d = iterable_4_1.value;\n                    _a = false;\n                    const item = _d;\n                    result.push(item);\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (!_a && !_b && (_c = iterable_4.return)) yield _c.call(iterable_4);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            return result;\n        });\n    }\n    toPromise() {\n        return AsyncIterableObject.toPromise(this);\n    }\n    /**\n     * The value will be appended at the end.\n     *\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    emitOne(value) {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        // it is important to add new values at the end,\n        // as we may have iterators already running on the array\n        this._results.push(value);\n        this._onStateChanged.fire();\n    }\n    /**\n     * The values will be appended at the end.\n     *\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    emitMany(values) {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        // it is important to add new values at the end,\n        // as we may have iterators already running on the array\n        this._results = this._results.concat(values);\n        this._onStateChanged.fire();\n    }\n    /**\n     * Calling `resolve()` will mark the result array as complete.\n     *\n     * **NOTE** `resolve()` must be called, otherwise all consumers of this iterable will hang indefinitely, similar to a non-resolved promise.\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    resolve() {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        this._state = 1 /* AsyncIterableSourceState.DoneOK */;\n        this._onStateChanged.fire();\n    }\n    /**\n     * Writing an error will permanently invalidate this iterable.\n     * The current users will receive an error thrown, as will all future users.\n     *\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    reject(error) {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        this._state = 2 /* AsyncIterableSourceState.DoneError */;\n        this._error = error;\n        this._onStateChanged.fire();\n    }\n}\nAsyncIterableObject.EMPTY = AsyncIterableObject.fromArray([]);\nexport class CancelableAsyncIterableObject extends AsyncIterableObject {\n    constructor(_source, executor) {\n        super(executor);\n        this._source = _source;\n    }\n    cancel() {\n        this._source.cancel();\n    }\n}\nexport function createCancelableAsyncIterable(callback) {\n    const source = new CancellationTokenSource();\n    const innerIterable = callback(source.token);\n    return new CancelableAsyncIterableObject(source, (emitter) => __awaiter(this, void 0, void 0, function* () {\n        var _a, e_5, _b, _c;\n        const subscription = source.token.onCancellationRequested(() => {\n            subscription.dispose();\n            source.dispose();\n            emitter.reject(new CancellationError());\n        });\n        try {\n            try {\n                for (var _d = true, innerIterable_1 = __asyncValues(innerIterable), innerIterable_1_1; innerIterable_1_1 = yield innerIterable_1.next(), _a = innerIterable_1_1.done, !_a; _d = true) {\n                    _c = innerIterable_1_1.value;\n                    _d = false;\n                    const item = _c;\n                    if (source.token.isCancellationRequested) {\n                        // canceled in the meantime\n                        return;\n                    }\n                    emitter.emitOne(item);\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = innerIterable_1.return)) yield _b.call(innerIterable_1);\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n            subscription.dispose();\n            source.dispose();\n        }\n        catch (err) {\n            subscription.dispose();\n            source.dispose();\n            emitter.reject(err);\n        }\n    }));\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}