{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore, markAsDisposed, toDisposable, trackDisposable } from '../lifecycle.js';\nimport { getFunctionName } from './base.js';\nimport { getLogger } from './logging.js';\nexport function autorunOpts(options, fn) {\n  return new AutorunObserver(options.debugName, fn, undefined, undefined);\n}\nexport function autorun(fn) {\n  return new AutorunObserver(undefined, fn, undefined, undefined);\n}\nexport function autorunHandleChanges(options, fn) {\n  return new AutorunObserver(options.debugName, fn, options.createEmptyChangeSummary, options.handleChange);\n}\nexport function autorunWithStore(fn) {\n  const store = new DisposableStore();\n  const disposable = autorunOpts({\n    debugName: () => getFunctionName(fn) || '(anonymous)'\n  }, reader => {\n    store.clear();\n    fn(reader, store);\n  });\n  return toDisposable(() => {\n    disposable.dispose();\n    store.dispose();\n  });\n}\nexport class AutorunObserver {\n  get debugName() {\n    if (typeof this._debugName === 'string') {\n      return this._debugName;\n    }\n    if (typeof this._debugName === 'function') {\n      const name = this._debugName();\n      if (name !== undefined) {\n        return name;\n      }\n    }\n    const name = getFunctionName(this._runFn);\n    if (name !== undefined) {\n      return name;\n    }\n    return '(anonymous)';\n  }\n  constructor(_debugName, _runFn, createChangeSummary, _handleChange) {\n    var _a, _b;\n    this._debugName = _debugName;\n    this._runFn = _runFn;\n    this.createChangeSummary = createChangeSummary;\n    this._handleChange = _handleChange;\n    this.state = 2 /* AutorunState.stale */;\n    this.updateCount = 0;\n    this.disposed = false;\n    this.dependencies = new Set();\n    this.dependenciesToBeRemoved = new Set();\n    this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleAutorunCreated(this);\n    this._runIfNeeded();\n    trackDisposable(this);\n  }\n  dispose() {\n    this.disposed = true;\n    for (const o of this.dependencies) {\n      o.removeObserver(this);\n    }\n    this.dependencies.clear();\n    markAsDisposed(this);\n  }\n  _runIfNeeded() {\n    var _a, _b, _c;\n    if (this.state === 3 /* AutorunState.upToDate */) {\n      return;\n    }\n    const emptySet = this.dependenciesToBeRemoved;\n    this.dependenciesToBeRemoved = this.dependencies;\n    this.dependencies = emptySet;\n    this.state = 3 /* AutorunState.upToDate */;\n    try {\n      if (!this.disposed) {\n        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleAutorunTriggered(this);\n        const changeSummary = this.changeSummary;\n        this.changeSummary = (_b = this.createChangeSummary) === null || _b === void 0 ? void 0 : _b.call(this);\n        this._runFn(this, changeSummary);\n      }\n    } finally {\n      (_c = getLogger()) === null || _c === void 0 ? void 0 : _c.handleAutorunFinished(this);\n      // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n      // Thus, we only unsubscribe from observables that are definitely not read anymore.\n      for (const o of this.dependenciesToBeRemoved) {\n        o.removeObserver(this);\n      }\n      this.dependenciesToBeRemoved.clear();\n    }\n  }\n  toString() {\n    return `Autorun<${this.debugName}>`;\n  }\n  // IObserver implementation\n  beginUpdate() {\n    if (this.state === 3 /* AutorunState.upToDate */) {\n      this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n    }\n\n    this.updateCount++;\n  }\n  endUpdate() {\n    if (this.updateCount === 1) {\n      do {\n        if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */) {\n          this.state = 3 /* AutorunState.upToDate */;\n          for (const d of this.dependencies) {\n            d.reportChanges();\n            if (this.state === 2 /* AutorunState.stale */) {\n              // The other dependencies will refresh on demand\n              break;\n            }\n          }\n        }\n        this._runIfNeeded();\n      } while (this.state !== 3 /* AutorunState.upToDate */);\n    }\n\n    this.updateCount--;\n    assertFn(() => this.updateCount >= 0);\n  }\n  handlePossibleChange(observable) {\n    if (this.state === 3 /* AutorunState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n    }\n  }\n\n  handleChange(observable, change) {\n    if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      const shouldReact = this._handleChange ? this._handleChange({\n        changedObservable: observable,\n        change,\n        didChange: o => o === observable\n      }, this.changeSummary) : true;\n      if (shouldReact) {\n        this.state = 2 /* AutorunState.stale */;\n      }\n    }\n  }\n  // IReader implementation\n  readObservable(observable) {\n    // In case the run action disposes the autorun\n    if (this.disposed) {\n      return observable.get();\n    }\n    observable.addObserver(this);\n    const value = observable.get();\n    this.dependencies.add(observable);\n    this.dependenciesToBeRemoved.delete(observable);\n    return value;\n  }\n}\n(function (autorun) {\n  autorun.Observer = AutorunObserver;\n})(autorun || (autorun = {}));","map":{"version":3,"names":["assertFn","DisposableStore","markAsDisposed","toDisposable","trackDisposable","getFunctionName","getLogger","autorunOpts","options","fn","AutorunObserver","debugName","undefined","autorun","autorunHandleChanges","createEmptyChangeSummary","handleChange","autorunWithStore","store","disposable","reader","clear","dispose","_debugName","name","_runFn","constructor","createChangeSummary","_handleChange","_a","_b","state","updateCount","disposed","dependencies","Set","dependenciesToBeRemoved","changeSummary","call","handleAutorunCreated","_runIfNeeded","o","removeObserver","_c","emptySet","handleAutorunTriggered","handleAutorunFinished","toString","beginUpdate","endUpdate","d","reportChanges","handlePossibleChange","observable","has","change","shouldReact","changedObservable","didChange","readObservable","get","addObserver","value","add","delete","Observer"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/base/common/observableInternal/autorun.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { DisposableStore, markAsDisposed, toDisposable, trackDisposable } from '../lifecycle.js';\nimport { getFunctionName } from './base.js';\nimport { getLogger } from './logging.js';\nexport function autorunOpts(options, fn) {\n    return new AutorunObserver(options.debugName, fn, undefined, undefined);\n}\nexport function autorun(fn) {\n    return new AutorunObserver(undefined, fn, undefined, undefined);\n}\nexport function autorunHandleChanges(options, fn) {\n    return new AutorunObserver(options.debugName, fn, options.createEmptyChangeSummary, options.handleChange);\n}\nexport function autorunWithStore(fn) {\n    const store = new DisposableStore();\n    const disposable = autorunOpts({\n        debugName: () => getFunctionName(fn) || '(anonymous)',\n    }, reader => {\n        store.clear();\n        fn(reader, store);\n    });\n    return toDisposable(() => {\n        disposable.dispose();\n        store.dispose();\n    });\n}\nexport class AutorunObserver {\n    get debugName() {\n        if (typeof this._debugName === 'string') {\n            return this._debugName;\n        }\n        if (typeof this._debugName === 'function') {\n            const name = this._debugName();\n            if (name !== undefined) {\n                return name;\n            }\n        }\n        const name = getFunctionName(this._runFn);\n        if (name !== undefined) {\n            return name;\n        }\n        return '(anonymous)';\n    }\n    constructor(_debugName, _runFn, createChangeSummary, _handleChange) {\n        var _a, _b;\n        this._debugName = _debugName;\n        this._runFn = _runFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this.state = 2 /* AutorunState.stale */;\n        this.updateCount = 0;\n        this.disposed = false;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = (_a = this.createChangeSummary) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = getLogger()) === null || _b === void 0 ? void 0 : _b.handleAutorunCreated(this);\n        this._runIfNeeded();\n        trackDisposable(this);\n    }\n    dispose() {\n        this.disposed = true;\n        for (const o of this.dependencies) {\n            o.removeObserver(this);\n        }\n        this.dependencies.clear();\n        markAsDisposed(this);\n    }\n    _runIfNeeded() {\n        var _a, _b, _c;\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        this.state = 3 /* AutorunState.upToDate */;\n        try {\n            if (!this.disposed) {\n                (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleAutorunTriggered(this);\n                const changeSummary = this.changeSummary;\n                this.changeSummary = (_b = this.createChangeSummary) === null || _b === void 0 ? void 0 : _b.call(this);\n                this._runFn(this, changeSummary);\n            }\n        }\n        finally {\n            (_c = getLogger()) === null || _c === void 0 ? void 0 : _c.handleAutorunFinished(this);\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n    }\n    toString() {\n        return `Autorun<${this.debugName}>`;\n    }\n    // IObserver implementation\n    beginUpdate() {\n        if (this.state === 3 /* AutorunState.upToDate */) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n        this.updateCount++;\n    }\n    endUpdate() {\n        if (this.updateCount === 1) {\n            do {\n                if (this.state === 1 /* AutorunState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* AutorunState.upToDate */;\n                    for (const d of this.dependencies) {\n                        d.reportChanges();\n                        if (this.state === 2 /* AutorunState.stale */) {\n                            // The other dependencies will refresh on demand\n                            break;\n                        }\n                    }\n                }\n                this._runIfNeeded();\n            } while (this.state !== 3 /* AutorunState.upToDate */);\n        }\n        this.updateCount--;\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        if (this.state === 3 /* AutorunState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* AutorunState.dependenciesMightHaveChanged */;\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: o => o === observable,\n            }, this.changeSummary) : true;\n            if (shouldReact) {\n                this.state = 2 /* AutorunState.stale */;\n            }\n        }\n    }\n    // IReader implementation\n    readObservable(observable) {\n        // In case the run action disposes the autorun\n        if (this.disposed) {\n            return observable.get();\n        }\n        observable.addObserver(this);\n        const value = observable.get();\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n}\n(function (autorun) {\n    autorun.Observer = AutorunObserver;\n})(autorun || (autorun = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}