{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { validateConstraints } from '../../../base/common/types.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const ICommandService = createDecorator('commandService');\nexport const CommandsRegistry = new class {\n  constructor() {\n    this._commands = new Map();\n    this._onDidRegisterCommand = new Emitter();\n    this.onDidRegisterCommand = this._onDidRegisterCommand.event;\n  }\n  registerCommand(idOrCommand, handler) {\n    if (!idOrCommand) {\n      throw new Error(`invalid command`);\n    }\n    if (typeof idOrCommand === 'string') {\n      if (!handler) {\n        throw new Error(`invalid command`);\n      }\n      return this.registerCommand({\n        id: idOrCommand,\n        handler\n      });\n    }\n    // add argument validation if rich command metadata is provided\n    if (idOrCommand.description) {\n      const constraints = [];\n      for (const arg of idOrCommand.description.args) {\n        constraints.push(arg.constraint);\n      }\n      const actualHandler = idOrCommand.handler;\n      idOrCommand.handler = function (accessor, ...args) {\n        validateConstraints(args, constraints);\n        return actualHandler(accessor, ...args);\n      };\n    }\n    // find a place to store the command\n    const {\n      id\n    } = idOrCommand;\n    let commands = this._commands.get(id);\n    if (!commands) {\n      commands = new LinkedList();\n      this._commands.set(id, commands);\n    }\n    const removeFn = commands.unshift(idOrCommand);\n    const ret = toDisposable(() => {\n      removeFn();\n      const command = this._commands.get(id);\n      if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\n        this._commands.delete(id);\n      }\n    });\n    // tell the world about this command\n    this._onDidRegisterCommand.fire(id);\n    return ret;\n  }\n  registerCommandAlias(oldId, newId) {\n    return CommandsRegistry.registerCommand(oldId, (accessor, ...args) => accessor.get(ICommandService).executeCommand(newId, ...args));\n  }\n  getCommand(id) {\n    const list = this._commands.get(id);\n    if (!list || list.isEmpty()) {\n      return undefined;\n    }\n    return Iterable.first(list);\n  }\n  getCommands() {\n    const result = new Map();\n    for (const key of this._commands.keys()) {\n      const command = this.getCommand(key);\n      if (command) {\n        result.set(key, command);\n      }\n    }\n    return result;\n  }\n}();\nCommandsRegistry.registerCommand('noop', () => {});","map":{"version":3,"names":["Emitter","Iterable","toDisposable","LinkedList","validateConstraints","createDecorator","ICommandService","CommandsRegistry","constructor","_commands","Map","_onDidRegisterCommand","onDidRegisterCommand","event","registerCommand","idOrCommand","handler","Error","id","description","constraints","arg","args","push","constraint","actualHandler","accessor","commands","get","set","removeFn","unshift","ret","command","isEmpty","delete","fire","registerCommandAlias","oldId","newId","executeCommand","getCommand","list","undefined","first","getCommands","result","key","keys"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/platform/commands/common/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { validateConstraints } from '../../../base/common/types.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const ICommandService = createDecorator('commandService');\nexport const CommandsRegistry = new class {\n    constructor() {\n        this._commands = new Map();\n        this._onDidRegisterCommand = new Emitter();\n        this.onDidRegisterCommand = this._onDidRegisterCommand.event;\n    }\n    registerCommand(idOrCommand, handler) {\n        if (!idOrCommand) {\n            throw new Error(`invalid command`);\n        }\n        if (typeof idOrCommand === 'string') {\n            if (!handler) {\n                throw new Error(`invalid command`);\n            }\n            return this.registerCommand({ id: idOrCommand, handler });\n        }\n        // add argument validation if rich command metadata is provided\n        if (idOrCommand.description) {\n            const constraints = [];\n            for (const arg of idOrCommand.description.args) {\n                constraints.push(arg.constraint);\n            }\n            const actualHandler = idOrCommand.handler;\n            idOrCommand.handler = function (accessor, ...args) {\n                validateConstraints(args, constraints);\n                return actualHandler(accessor, ...args);\n            };\n        }\n        // find a place to store the command\n        const { id } = idOrCommand;\n        let commands = this._commands.get(id);\n        if (!commands) {\n            commands = new LinkedList();\n            this._commands.set(id, commands);\n        }\n        const removeFn = commands.unshift(idOrCommand);\n        const ret = toDisposable(() => {\n            removeFn();\n            const command = this._commands.get(id);\n            if (command === null || command === void 0 ? void 0 : command.isEmpty()) {\n                this._commands.delete(id);\n            }\n        });\n        // tell the world about this command\n        this._onDidRegisterCommand.fire(id);\n        return ret;\n    }\n    registerCommandAlias(oldId, newId) {\n        return CommandsRegistry.registerCommand(oldId, (accessor, ...args) => accessor.get(ICommandService).executeCommand(newId, ...args));\n    }\n    getCommand(id) {\n        const list = this._commands.get(id);\n        if (!list || list.isEmpty()) {\n            return undefined;\n        }\n        return Iterable.first(list);\n    }\n    getCommands() {\n        const result = new Map();\n        for (const key of this._commands.keys()) {\n            const command = this.getCommand(key);\n            if (command) {\n                result.set(key, command);\n            }\n        }\n        return result;\n    }\n};\nCommandsRegistry.registerCommand('noop', () => { });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}