{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n    this.instantiationService = instantiationService;\n    this.keybindingService = keybindingService;\n    this.commandService = commandService;\n    this.telemetryService = telemetryService;\n    this.dialogService = dialogService;\n    this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n    this.options = options;\n  }\n  _getPicks(filter, _disposables, token, runOptions) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function* () {\n      // Ask subclass for all command picks\n      const allCommandPicks = yield this.getCommandPicks(token);\n      if (token.isCancellationRequested) {\n        return [];\n      }\n      const runTfidf = createSingleCallFunction(() => {\n        const tfidf = new TfIdfCalculator();\n        tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n          key: commandPick.commandId,\n          textChunks: [commandPick.label + (commandPick.commandAlias ? ` ${commandPick.commandAlias}` : '')]\n        })));\n        const result = tfidf.calculateScores(filter, token);\n        return normalizeTfIdfScores(result).filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD).slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n      });\n      // Filter\n      const filteredCommandPicks = [];\n      for (const commandPick of allCommandPicks) {\n        const labelHighlights = (_a = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label)) !== null && _a !== void 0 ? _a : undefined;\n        const aliasHighlights = commandPick.commandAlias ? (_b = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias)) !== null && _b !== void 0 ? _b : undefined : undefined;\n        // Add if matching in label or alias\n        if (labelHighlights || aliasHighlights) {\n          commandPick.highlights = {\n            label: labelHighlights,\n            detail: this.options.showAlias ? aliasHighlights : undefined\n          };\n          filteredCommandPicks.push(commandPick);\n        }\n        // Also add if we have a 100% command ID match\n        else if (filter === commandPick.commandId) {\n          filteredCommandPicks.push(commandPick);\n        }\n        // Handle tf-idf scoring for the rest if there's a filter\n        else if (filter.length >= 3) {\n          const tfidf = runTfidf();\n          if (token.isCancellationRequested) {\n            return [];\n          }\n          // Add if we have a tf-idf score\n          const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n          if (tfidfScore) {\n            commandPick.tfIdfScore = tfidfScore.score;\n            filteredCommandPicks.push(commandPick);\n          }\n        }\n      }\n      // Add description to commands that have duplicate labels\n      const mapLabelToCommand = new Map();\n      for (const commandPick of filteredCommandPicks) {\n        const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n        if (existingCommandForLabel) {\n          commandPick.description = commandPick.commandId;\n          existingCommandForLabel.description = existingCommandForLabel.commandId;\n        } else {\n          mapLabelToCommand.set(commandPick.label, commandPick);\n        }\n      }\n      // Sort by MRU order and fallback to name otherwise\n      filteredCommandPicks.sort((commandPickA, commandPickB) => {\n        // If a result came from tf-idf, we want to put that towards the bottom\n        if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n          if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n            return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n          }\n\n          return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n        } else if (commandPickA.tfIdfScore) {\n          return 1; // first command has a score but other doesn't so other wins\n        } else if (commandPickB.tfIdfScore) {\n          return -1; // other command has a score but first doesn't so first wins\n        }\n\n        const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n        const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n        if (commandACounter && commandBCounter) {\n          return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n        }\n\n        if (commandACounter) {\n          return -1; // first command was used, so it wins over the non used one\n        }\n\n        if (commandBCounter) {\n          return 1; // other command was used so it wins over the command\n        }\n\n        if (this.options.suggestedCommandIds) {\n          const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n          const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n          if (commandASuggestion && commandBSuggestion) {\n            return 0; // honor the order of the array\n          }\n\n          if (commandASuggestion) {\n            return -1; // first command was suggested, so it wins over the non suggested one\n          }\n\n          if (commandBSuggestion) {\n            return 1; // other command was suggested so it wins over the command\n          }\n        }\n        // both commands were never used, so we sort by name\n        return commandPickA.label.localeCompare(commandPickB.label);\n      });\n      const commandPicks = [];\n      let addOtherSeparator = false;\n      let addSuggestedSeparator = true;\n      let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n      for (let i = 0; i < filteredCommandPicks.length; i++) {\n        const commandPick = filteredCommandPicks[i];\n        // Separator: recently used\n        if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('recentlyUsed', \"recently used\")\n          });\n          addOtherSeparator = true;\n        }\n        if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('suggested', \"similar commands\")\n          });\n          addSuggestedSeparator = false;\n        }\n        // Separator: commonly used\n        if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && ((_c = this.options.suggestedCommandIds) === null || _c === void 0 ? void 0 : _c.has(commandPick.commandId))) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('commonlyUsed', \"commonly used\")\n          });\n          addOtherSeparator = true;\n          addCommonlyUsedSeparator = false;\n        }\n        // Separator: other commands\n        if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !((_d = this.options.suggestedCommandIds) === null || _d === void 0 ? void 0 : _d.has(commandPick.commandId))) {\n          commandPicks.push({\n            type: 'separator',\n            label: localize('morecCommands', \"other commands\")\n          });\n          addOtherSeparator = false;\n        }\n        // Command\n        commandPicks.push(this.toCommandPick(commandPick, runOptions));\n      }\n      if (!this.hasAdditionalCommandPicks(filter, token)) {\n        return commandPicks;\n      }\n      return {\n        picks: commandPicks,\n        additionalPicks: (() => __awaiter(this, void 0, void 0, function* () {\n          var _e;\n          const additionalCommandPicks = yield this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n          if (token.isCancellationRequested) {\n            return [];\n          }\n          const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n          // Basically, if we haven't already added a separator, we add one before the additional picks so long\n          // as one hasn't been added to the start of the array.\n          if (addSuggestedSeparator && ((_e = commandPicks[0]) === null || _e === void 0 ? void 0 : _e.type) !== 'separator') {\n            commandPicks.unshift({\n              type: 'separator',\n              label: localize('suggested', \"similar commands\")\n            });\n          }\n          return commandPicks;\n        }))()\n      };\n    });\n  }\n  toCommandPick(commandPick, runOptions) {\n    if (commandPick.type === 'separator') {\n      return commandPick;\n    }\n    const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n    const ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label;\n    return Object.assign(Object.assign({}, commandPick), {\n      ariaLabel,\n      detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n      keybinding,\n      accept: () => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        // Add to history\n        this.commandsHistory.push(commandPick.commandId);\n        // Telementry\n        this.telemetryService.publicLog2('workbenchActionExecuted', {\n          id: commandPick.commandId,\n          from: (_a = runOptions === null || runOptions === void 0 ? void 0 : runOptions.from) !== null && _a !== void 0 ? _a : 'quick open'\n        });\n        // Run\n        try {\n          ((_b = commandPick.args) === null || _b === void 0 ? void 0 : _b.length) ? yield this.commandService.executeCommand(commandPick.commandId, ...commandPick.args) : yield this.commandService.executeCommand(commandPick.commandId);\n        } catch (error) {\n          if (!isCancellationError(error)) {\n            this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n          }\n        }\n      })\n    });\n  }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD = 0.5;\nAbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS = 5;\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, IDialogService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = CommandsHistory_1 = class CommandsHistory extends Disposable {\n  constructor(storageService, configurationService) {\n    super();\n    this.storageService = storageService;\n    this.configurationService = configurationService;\n    this.configuredCommandsHistoryLength = 0;\n    this.updateConfiguration();\n    this.load();\n    this.registerListeners();\n  }\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n  }\n  updateConfiguration(e) {\n    if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n      return;\n    }\n    this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n    if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n      CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n      CommandsHistory_1.saveState(this.storageService);\n    }\n  }\n  load() {\n    const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n    let serializedCache;\n    if (raw) {\n      try {\n        serializedCache = JSON.parse(raw);\n      } catch (error) {\n        // invalid data\n      }\n    }\n    const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n    if (serializedCache) {\n      let entries;\n      if (serializedCache.usesLRU) {\n        entries = serializedCache.entries;\n      } else {\n        entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n      }\n      entries.forEach(entry => cache.set(entry.key, entry.value));\n    }\n    CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n  }\n  push(commandId) {\n    if (!CommandsHistory_1.cache) {\n      return;\n    }\n    CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n    CommandsHistory_1.saveState(this.storageService);\n  }\n  peek(commandId) {\n    var _a;\n    return (_a = CommandsHistory_1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n  }\n  static saveState(storageService) {\n    if (!CommandsHistory_1.cache) {\n      return;\n    }\n    const serializedCache = {\n      usesLRU: true,\n      entries: []\n    };\n    CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({\n      key,\n      value\n    }));\n    storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n  }\n\n  static getConfiguredCommandHistoryLength(configurationService) {\n    var _a, _b;\n    const config = configurationService.getValue();\n    const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n    if (typeof configuredCommandHistoryLength === 'number') {\n      return configuredCommandHistoryLength;\n    }\n    return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n  }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory = CommandsHistory_1 = __decorate([__param(0, IStorageService), __param(1, IConfigurationService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","AbstractCommandsQuickAccessProvider_1","CommandsHistory_1","toErrorMessage","isCancellationError","matchesContiguousSubString","matchesPrefix","matchesWords","or","createSingleCallFunction","Disposable","LRUCache","TfIdfCalculator","normalizeTfIdfScores","localize","ICommandService","IConfigurationService","IDialogService","IInstantiationService","IKeybindingService","PickerQuickAccessProvider","IStorageService","ITelemetryService","AbstractCommandsQuickAccessProvider","constructor","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","PREFIX","commandsHistory","_register","createInstance","CommandsHistory","_getPicks","filter","_disposables","token","runOptions","_a","_b","_c","_d","allCommandPicks","getCommandPicks","isCancellationRequested","runTfidf","tfidf","updateDocuments","map","commandPick","commandId","textChunks","label","commandAlias","calculateScores","score","TFIDF_THRESHOLD","slice","TFIDF_MAX_RESULTS","filteredCommandPicks","labelHighlights","WORD_FILTER","undefined","aliasHighlights","highlights","detail","showAlias","push","tfidfScore","find","tfIdfScore","mapLabelToCommand","Map","existingCommandForLabel","get","description","set","sort","commandPickA","commandPickB","localeCompare","commandACounter","peek","commandBCounter","suggestedCommandIds","commandASuggestion","has","commandBSuggestion","commandPicks","addOtherSeparator","addSuggestedSeparator","addCommonlyUsedSeparator","type","toCommandPick","hasAdditionalCommandPicks","picks","additionalPicks","_e","additionalCommandPicks","getAdditionalCommandPicks","unshift","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","assign","accept","publicLog2","id","from","args","executeCommand","error","storageService","configurationService","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","onDidChangeConfiguration","affectsConfiguration","getConfiguredCommandHistoryLength","cache","limit","saveState","raw","PREF_KEY_CACHE","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","counter","getNumber","PREF_KEY_COUNTER","store","stringify","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history","DEFAULT_COMMANDS_HISTORY_LENGTH"],"sources":["/home/chlohest/work/website/my_web/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.commandService = commandService;\n        this.telemetryService = telemetryService;\n        this.dialogService = dialogService;\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n        this.options = options;\n    }\n    _getPicks(filter, _disposables, token, runOptions) {\n        var _a, _b, _c, _d;\n        return __awaiter(this, void 0, void 0, function* () {\n            // Ask subclass for all command picks\n            const allCommandPicks = yield this.getCommandPicks(token);\n            if (token.isCancellationRequested) {\n                return [];\n            }\n            const runTfidf = createSingleCallFunction(() => {\n                const tfidf = new TfIdfCalculator();\n                tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n                    key: commandPick.commandId,\n                    textChunks: [commandPick.label + (commandPick.commandAlias ? ` ${commandPick.commandAlias}` : '')]\n                })));\n                const result = tfidf.calculateScores(filter, token);\n                return normalizeTfIdfScores(result)\n                    .filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD)\n                    .slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n            });\n            // Filter\n            const filteredCommandPicks = [];\n            for (const commandPick of allCommandPicks) {\n                const labelHighlights = (_a = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label)) !== null && _a !== void 0 ? _a : undefined;\n                const aliasHighlights = commandPick.commandAlias ? (_b = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias)) !== null && _b !== void 0 ? _b : undefined : undefined;\n                // Add if matching in label or alias\n                if (labelHighlights || aliasHighlights) {\n                    commandPick.highlights = {\n                        label: labelHighlights,\n                        detail: this.options.showAlias ? aliasHighlights : undefined\n                    };\n                    filteredCommandPicks.push(commandPick);\n                }\n                // Also add if we have a 100% command ID match\n                else if (filter === commandPick.commandId) {\n                    filteredCommandPicks.push(commandPick);\n                }\n                // Handle tf-idf scoring for the rest if there's a filter\n                else if (filter.length >= 3) {\n                    const tfidf = runTfidf();\n                    if (token.isCancellationRequested) {\n                        return [];\n                    }\n                    // Add if we have a tf-idf score\n                    const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n                    if (tfidfScore) {\n                        commandPick.tfIdfScore = tfidfScore.score;\n                        filteredCommandPicks.push(commandPick);\n                    }\n                }\n            }\n            // Add description to commands that have duplicate labels\n            const mapLabelToCommand = new Map();\n            for (const commandPick of filteredCommandPicks) {\n                const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n                if (existingCommandForLabel) {\n                    commandPick.description = commandPick.commandId;\n                    existingCommandForLabel.description = existingCommandForLabel.commandId;\n                }\n                else {\n                    mapLabelToCommand.set(commandPick.label, commandPick);\n                }\n            }\n            // Sort by MRU order and fallback to name otherwise\n            filteredCommandPicks.sort((commandPickA, commandPickB) => {\n                // If a result came from tf-idf, we want to put that towards the bottom\n                if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n                    if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n                        return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n                    }\n                    return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n                }\n                else if (commandPickA.tfIdfScore) {\n                    return 1; // first command has a score but other doesn't so other wins\n                }\n                else if (commandPickB.tfIdfScore) {\n                    return -1; // other command has a score but first doesn't so first wins\n                }\n                const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n                const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n                if (commandACounter && commandBCounter) {\n                    return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n                }\n                if (commandACounter) {\n                    return -1; // first command was used, so it wins over the non used one\n                }\n                if (commandBCounter) {\n                    return 1; // other command was used so it wins over the command\n                }\n                if (this.options.suggestedCommandIds) {\n                    const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n                    const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n                    if (commandASuggestion && commandBSuggestion) {\n                        return 0; // honor the order of the array\n                    }\n                    if (commandASuggestion) {\n                        return -1; // first command was suggested, so it wins over the non suggested one\n                    }\n                    if (commandBSuggestion) {\n                        return 1; // other command was suggested so it wins over the command\n                    }\n                }\n                // both commands were never used, so we sort by name\n                return commandPickA.label.localeCompare(commandPickB.label);\n            });\n            const commandPicks = [];\n            let addOtherSeparator = false;\n            let addSuggestedSeparator = true;\n            let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n            for (let i = 0; i < filteredCommandPicks.length; i++) {\n                const commandPick = filteredCommandPicks[i];\n                // Separator: recently used\n                if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n                    commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n                    addOtherSeparator = true;\n                }\n                if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n                    commandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                    addSuggestedSeparator = false;\n                }\n                // Separator: commonly used\n                if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && ((_c = this.options.suggestedCommandIds) === null || _c === void 0 ? void 0 : _c.has(commandPick.commandId))) {\n                    commandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n                    addOtherSeparator = true;\n                    addCommonlyUsedSeparator = false;\n                }\n                // Separator: other commands\n                if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !((_d = this.options.suggestedCommandIds) === null || _d === void 0 ? void 0 : _d.has(commandPick.commandId))) {\n                    commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n                    addOtherSeparator = false;\n                }\n                // Command\n                commandPicks.push(this.toCommandPick(commandPick, runOptions));\n            }\n            if (!this.hasAdditionalCommandPicks(filter, token)) {\n                return commandPicks;\n            }\n            return {\n                picks: commandPicks,\n                additionalPicks: (() => __awaiter(this, void 0, void 0, function* () {\n                    var _e;\n                    const additionalCommandPicks = yield this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n                    if (token.isCancellationRequested) {\n                        return [];\n                    }\n                    const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n                    // Basically, if we haven't already added a separator, we add one before the additional picks so long\n                    // as one hasn't been added to the start of the array.\n                    if (addSuggestedSeparator && ((_e = commandPicks[0]) === null || _e === void 0 ? void 0 : _e.type) !== 'separator') {\n                        commandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                    }\n                    return commandPicks;\n                }))()\n            };\n        });\n    }\n    toCommandPick(commandPick, runOptions) {\n        if (commandPick.type === 'separator') {\n            return commandPick;\n        }\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ?\n            localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n            commandPick.label;\n        return Object.assign(Object.assign({}, commandPick), { ariaLabel, detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined, keybinding, accept: () => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b;\n                // Add to history\n                this.commandsHistory.push(commandPick.commandId);\n                // Telementry\n                this.telemetryService.publicLog2('workbenchActionExecuted', {\n                    id: commandPick.commandId,\n                    from: (_a = runOptions === null || runOptions === void 0 ? void 0 : runOptions.from) !== null && _a !== void 0 ? _a : 'quick open'\n                });\n                // Run\n                try {\n                    ((_b = commandPick.args) === null || _b === void 0 ? void 0 : _b.length)\n                        ? yield this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n                        : yield this.commandService.executeCommand(commandPick.commandId);\n                }\n                catch (error) {\n                    if (!isCancellationError(error)) {\n                        this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n                    }\n                }\n            }) });\n    }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD = 0.5;\nAbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS = 5;\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService),\n    __param(3, ICommandService),\n    __param(4, ITelemetryService),\n    __param(5, IDialogService)\n], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = CommandsHistory_1 = class CommandsHistory extends Disposable {\n    constructor(storageService, configurationService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.configuredCommandsHistoryLength = 0;\n        this.updateConfiguration();\n        this.load();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n    }\n    updateConfiguration(e) {\n        if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n            return;\n        }\n        this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n        if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n            CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n            CommandsHistory_1.saveState(this.storageService);\n        }\n    }\n    load() {\n        const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n        let serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                // invalid data\n            }\n        }\n        const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n        if (serializedCache) {\n            let entries;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n            }\n            entries.forEach(entry => cache.set(entry.key, entry.value));\n        }\n        CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n    push(commandId) {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n        CommandsHistory_1.saveState(this.storageService);\n    }\n    peek(commandId) {\n        var _a;\n        return (_a = CommandsHistory_1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n    }\n    static saveState(storageService) {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        const serializedCache = { usesLRU: true, entries: [] };\n        CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n        storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n        var _a, _b;\n        const config = configurationService.getValue();\n        const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n        if (typeof configuredCommandHistoryLength === 'number') {\n            return configuredCommandHistoryLength;\n        }\n        return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory = CommandsHistory_1 = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService)\n], CommandsHistory);\nexport { CommandsHistory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}